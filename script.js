import {
    getDatabase,        // üéØ Kh·ªüi t·∫°o k·∫øt n·ªëi t·ªõi Realtime Database
    ref,                // üìç T·∫°o tham chi·∫øu (ƒë∆∞·ªùng d·∫´n) ƒë·∫øn m·ªôt node trong database

    // --- Thao t√°c ghi & ƒë·ªçc d·ªØ li·ªáu ---
    set,                // ‚úçÔ∏è Ghi ƒë√® to√†n b·ªô d·ªØ li·ªáu t·∫°i v·ªã tr√≠ (x√≥a nh·ªØng d·ªØ li·ªáu c≈© kh√¥ng ƒë∆∞·ª£c khai b√°o)
    update,             // üõ†Ô∏è C·∫≠p nh·∫≠t m·ªôt ph·∫ßn d·ªØ li·ªáu (gi·ªØ nguy√™n ph·∫ßn kh√¥ng c·∫≠p nh·∫≠t)
    get,                // üì• L·∫•y d·ªØ li·ªáu m·ªôt l·∫ßn (tr·∫£ v·ªÅ snapshot)
    child,

    // --- Th√™m & x√≥a d·ªØ li·ªáu ---
    push,               // ‚ûï Th√™m node con m·ªõi v·ªõi key t·ª± ƒë·ªông (hay d√πng trong danh s√°ch chat, comment...)
    remove,             // ‚ùå X√≥a d·ªØ li·ªáu t·∫°i m·ªôt node

    // --- L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi d·ªØ li·ªáu theo th·ªùi gian th·ª±c ---
    onValue,            // üëÇ L·∫Øng nghe m·ªçi thay ƒë·ªïi t·∫°i m·ªôt node (b·∫•t k·ª≥ thay ƒë·ªïi n√†o c≈©ng g·ªçi callback)
    onChildAdded,       // üß© Khi c√≥ node con m·ªõi ƒë∆∞·ª£c th√™m v√†o
    onChildChanged,     // üîÑ Khi m·ªôt node con b·ªã thay ƒë·ªïi gi√° tr·ªã
    onChildRemoved,     // üóëÔ∏è Khi m·ªôt node con b·ªã x√≥a
    off,                // üîá H·ªßy ƒëƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán (d√πng khi kh√¥ng c·∫ßn l·∫Øng nghe n·ªØa)

    // --- Transaction & th·ªùi gian ---
    runTransaction,     // üîÅ C·∫≠p nh·∫≠t d·ªØ li·ªáu theo c√°ch an to√†n khi c√≥ th·ªÉ c√≥ xung ƒë·ªôt (v√≠ d·ª• ƒë·∫øm s·ªë l∆∞·ª£t like)
    serverTimestamp,    // üïí Ghi th·ªùi gian t·ª´ server Firebase (kh√¥ng l·ªá thu·ªôc gi·ªù m√°y ng∆∞·ªùi d√πng)

    // --- Truy v·∫•n d·ªØ li·ªáu ---
    query,              // üîç D√πng ƒë·ªÉ t·∫°o truy v·∫•n (k·∫øt h·ª£p c√°c h√†m l·ªçc/s·∫Øp x·∫øp b√™n d∆∞·ªõi)
    orderByChild,       // üî† S·∫Øp x·∫øp theo gi√° tr·ªã c·ªßa m·ªôt thu·ªôc t√≠nh con
    orderByKey,         // üîë S·∫Øp x·∫øp theo key
    orderByValue,       // üìä S·∫Øp x·∫øp theo gi√° tr·ªã ch√≠nh c·ªßa node

    limitToFirst,       // üìè Gi·ªõi h·∫°n l·∫•y N ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
    limitToLast,        // üìè Gi·ªõi h·∫°n l·∫•y N ph·∫ßn t·ª≠ cu·ªëi c√πng
    startAt,            // üîΩ B·∫Øt ƒë·∫ßu l·∫•y t·ª´ gi√° tr·ªã >= (v√≠ d·ª•: startAt(5))
    endAt,              // üîº K·∫øt th√∫c ·ªü gi√° tr·ªã <=
    equalTo             // üéØ Ch·ªâ l·∫•y c√°c node c√≥ gi√° tr·ªã b·∫±ng m·ªôt gi√° tr·ªã n√†o ƒë√≥
} from "https://www.gstatic.com/firebasejs/11.6.0/firebase-database.js";


// Truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu Firebase
const db = getDatabase();  // Kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i

//H√†m ghi d·ªØ li·ªáu l√™n Firebase
var userDataOld = {};
var userDataNew = {};
let isFinalLoadData = false;

var keyLogin = ""
let isOut = false;
function checkUserLogins() {
    if (!isFinalLoadData) return;

    const userDataRef = ref(db, 'allUsers/' + username);

    get(userDataRef).then(snapshot => {
        let data = snapshot.val();

        if (data.keyLogin !== keyLogin) {
            //C√≥ ng∆∞·ªùi kh√°c ƒëƒÉng nh·∫≠p v√†o
            console.log("C√≥ ng∆∞·ªùi kh√°c ƒë√£ ƒëƒÉng nh·∫≠p v√†o")
            isOut = true;
            //T·∫°o popup ƒë·∫øm ng∆∞·ª£c
            const countdownPopup = document.createElement("div");
            countdownPopup.id = "countdownPopup"; // Th√™m ID ƒë·ªÉ truy c·∫≠p d·ªÖ d√†ng
            countdownPopup.style.position = "fixed";
            countdownPopup.style.top = "50%";
            countdownPopup.style.left = "50%";
            countdownPopup.style.transform = "translate(-50%, -50%)";
            countdownPopup.style.padding = "20px";
            countdownPopup.style.backgroundColor = "#ffcc00";
            countdownPopup.style.color = "#000";
            countdownPopup.style.borderRadius = "10px";
            countdownPopup.style.fontSize = "24px";
            countdownPopup.style.zIndex = "1000";
            countdownPopup.style.textAlign = "center";
            countdownPopup.innerHTML = "C√≥ ng∆∞·ªùi ƒëƒÉng nh·∫≠p v√†o. B·∫°n s·∫Ω b·ªã tho√°t trong <span id='countdown'>10</span> gi√¢y.";
            document.body.appendChild(countdownPopup);

            // 4Ô∏è‚É£ Ch·∫°y b·ªô ƒë·∫øm ng∆∞·ª£c t·ª´ 10 ‚Üí 1
            let countdown = 10;
            let countdownInterval = setInterval(() => {
                const countdownElement = document.getElementById("countdown");
                if (countdownElement) {
                    countdownElement.innerText = countdown;
                }

                countdown--;
                if (countdown < 0) {
                    clearInterval(countdownInterval);
                    countdownInterval = null;
                    window.location.reload();
                }
            }, 1000);
        }
    })
}

function saveDataUserToFirebase() {
    const userDataRef = ref(db, 'allUsers/' + username);

    if (!isFinalLoadData) return;

    // Ki·ªÉm tra c√°c gi√° tr·ªã kh√°c
    if (endGame) {
        [typeGameConquest.skillBattle, typeGameConquest.battlePetUseSlotRound].forEach((obj) => {
            Object.values(obj).forEach((skill) => {
                skill.COOLDOWN[4] = 0;
                skill.DAME[3] = 0;
                skill.HEAL[3] = 0;
                skill.SHIELD[3] = 0;
                skill.BURN[3] = 0;
                skill.POISON[3] = 0;
                skill.CRIT[3] = 0;
            });
        });
    }

    // T·∫°o d·ªØ li·ªáu ng∆∞·ªùi d√πng
    let userPetIDs = {}
    if (!userPet) {
        userPet = {}
    } else {
        userPetIDs = Object.fromEntries(
            Object.entries(userPet).map(([key, pet]) => {
                const { URLimg, ...rest } = pet;  // Lo·∫°i URLimg ra
                return [key, rest];  // Tr·∫£ v·ªÅ c·∫∑p key v√† rest (pet kh√¥ng c√≥ URLimg)
            })
        );
        // Ki·ªÉm tra n·∫øu userPetIDsOld kh√¥ng c√≥ b·∫•t k·ª≥ ph·∫ßn t·ª≠ n√†o
        if (Object.keys(userPetIDs).length < 1) {
            userPetIDs = {};  // ƒê·∫∑t l·∫°i th√†nh ƒë·ªëi t∆∞·ª£ng r·ªóng thay v√¨ m·∫£ng
        }
    }

    let battleUserPetIDs = {}
    if (Object.keys(typeGameConquest.battleUserPet).length < 1) {
        battleUserPetIDs = {}; // Tr√°nh tr∆∞·ªùng h·ª£p kh√¥ng c√≥ battle pet
    } else {
        battleUserPetIDs = Object.fromEntries(
            Object.entries(typeGameConquest.battleUserPet).map(([key, pet]) => {
                const { URLimg, ...rest } = pet;  // Lo·∫°i URLimg ra
                return [key, rest];  // Tr·∫£ v·ªÅ c·∫∑p key v√† rest (pet kh√¥ng c√≥ URLimg)
            })
        );
    }

    let battleUserPetRoundIDs = {}
    if (Object.keys(typeGameConquest.battleUserPetRound).length < 1) {
        battleUserPetRoundIDs = {}; // Tr√°nh tr∆∞·ªùng h·ª£p kh√¥ng c√≥ battle pet round
    } else {
        battleUserPetRoundIDs = Object.fromEntries(
            Object.entries(typeGameConquest.battleUserPetRound).map(([key, pet]) => {
                const { URLimg, ...rest } = pet;  // Lo·∫°i URLimg ra
                return [key, rest];  // Tr·∫£ v·ªÅ c·∫∑p key v√† rest (pet kh√¥ng c√≥ URLimg)
            })
        );
    }

    let allBattleUsersData = {
        typeGameConquest: {
            ...typeGameConquest,
            battleUserPetRound: battleUserPetRoundIDs,
            battleUserPet: battleUserPetIDs
        },
        typeGameSolo5Mon,
        typeGameGuess
    };

    // T·∫°o d·ªØ li·ªáu m·ªõi
    userDataNew = {
        passwordUser: password,
        nameUser: nameUser,
        activateUser: activateUser,
        telUser: telUser,
        pointRank: pointRank,
        goldUser: goldUser,
        // staminaUser: staminaUser,
        weightBagUser: weightBagUser,
        // luckyMeet5Mon: luckyMeet5Mon,
        diamondUser: diamondUser,
        onGame: onGame,
        infoStartGame: infoStartGame,
        characterUser: characterUser,
        allCharacterUser: allCharacterUser,
        userPet: userPetIDs,
        battleData: allBattleUsersData,
        isBan: isBan,
        timeOnline: timeOnline,
        onlineLasted: onlineLasted,
        weekOnline: weekOnline,
        ticketsUser: ticketsUser,
        vipTicket: vipTicket,
        idSkillRND: idSkillRND,
        todayCheckin: todayCheckin,
        weekCheckin: weekCheckin,
        giftCheckinComplete: giftCheckinComplete,
        questDay: questDay,
        questWeek: questWeek,
        questWeekend: questWeekend
    };

    //Ki·ªÉm tra v√† l∆∞u userDataNew
    if (JSON.stringify(userDataOld) !== JSON.stringify(userDataNew)) {
        // L∆∞u d·ªØ li·ªáu v√†o Firebase
        let dataUpdate = { ...userDataNew, staminaUser: staminaUser, luckyMeet5Mon: luckyMeet5Mon };

        update(userDataRef, dataUpdate)
            .then(() => {
                console.log("üü¢ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u!");
                userDataOld = { ...userDataNew }; // C·∫≠p nh·∫≠t userDataOld sau khi l∆∞u
            })
            .catch((error) => {
                console.error("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu:", error);
            });

        // Ki·ªÉm tra n·∫øu pointRank l√† s·ªë, th√¨ chuy·ªÉn th√†nh object m·∫∑c ƒë·ªãnh
        if (typeof pointRank === 'number') {
            pointRank = {
                typeGameConquest: pointRank,
                typeGameSolo5Mon: 0,
                typeGameGuess: 0
            };
        }

        const rankDataRef = ref(db, 'rankGame/' + username + '/rankPoint');
        update(rankDataRef, pointRank)
            .then(() => {
                console.log("‚úÖ C·∫≠p nh·∫≠t rank c·ªßa b·∫°n");
            })
            .catch((error) => {
                console.error("‚ùå L·ªói khi l∆∞u rank c·ªßa b·∫°n", error);
            });

    }

}

// H√†m ƒë·ªÉ thi·∫øt l·∫≠p l·∫Øng nghe s·ª± ki·ªán cho t·∫•t c·∫£ input
function setupAutoUpdate() {
    // L·∫Øng nghe t·∫•t c·∫£ s·ª± ki·ªán input, change v√† click trong to√†n b·ªô trang
    document.addEventListener('input', function () {
        checkUserLogins();
        saveDataUserToFirebase(); // L·∫Øng nghe s·ª± ki·ªán input
    });

    document.addEventListener('change', function () {
        checkUserLogins();
        saveDataUserToFirebase(); // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi (ƒë·ªëi v·ªõi c√°c input select, checkbox...)
    });

    document.addEventListener('click', function () {
        checkUserLogins();
        saveDataUserToFirebase(); // N·∫øu b·∫°n mu·ªën theo d√µi click (v√≠ d·ª• nh∆∞ n√∫t, checkbox...)
    });

    // L·∫Øng nghe s·ª± ki·ªán k√©o th·∫£
    document.addEventListener('dragstart', function () {
        checkUserLogins();
        saveDataUserToFirebase(); // Khi b·∫Øt ƒë·∫ßu k√©o th·∫£
    });

    document.addEventListener('dragover', function (event) {
        event.preventDefault(); // Cho ph√©p th·∫£ v√†o v·ªã tr√≠
    });

    document.addEventListener('drop', function (event) {
        event.preventDefault(); // Ng·ª´ng h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh
        checkUserLogins();
        saveDataUserToFirebase(); // Khi th·∫£ ƒë·ªëi t∆∞·ª£ng
    });
}



// G·ªçi setupAutoUpdate() ƒë·ªÉ thi·∫øt l·∫≠p l·∫Øng nghe s·ª± ki·ªán khi trang load
setupAutoUpdate();

// üî• H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ Firebase
var allDataUser = "";
function readDataUser() {
    if (!username) {
        console.error("‚ö†Ô∏è Username kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const userRef = ref(db, "allUsers/" + username);

    get(userRef).then((snapshot) => {
        if (snapshot.exists()) {
            allDataUser = snapshot.val();
            console.log("üìÑ D·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ l∆∞u v√†o bi·∫øn:", allDataUser);
        } else {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!");
        }
    }).catch((error) => {
        console.error("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu:", error);
    });
}

// üî• H√†m theo d√µi d·ªØ li·ªáu thay ƒë·ªïi (Realtime)
function listenForUserChanges() {
    const userRef = ref(db, "allUsers/" + username);

    onValue(userRef, (snapshot) => {
        console.log("üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu:", snapshot.val());
    });
}

//Bi·∫øn c·ª•c b·ªô
var allPets = [];
var allComps = []; //M·∫£ng to√†n b·ªô Comps
var allCharacter = {}; //M·∫£ng l∆∞u nh√¢n v·∫≠t
var allQuestData = {}; //M·∫£ng l∆∞u nhi·ªám v·ª•

var effectsSkill = {}; // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u c√°c Effect Skill v√† m√¥ t·∫£ t∆∞∆°ng ·ª©ng
var effectsInternal = {}; // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u c√°c Effect Internal v√† m√¥ t·∫£ t∆∞∆°ng ·ª©ng
var effectsSellUp = {}; // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u c√°c Effect SellUp v√† m√¥ t·∫£ t∆∞∆°ng ·ª©ng
// Load to√†n b·ªô d·ªØ li·ªáu ch·ªâ trong 1 l·∫ßn g·ªçi

var rankGame = {}

function updateRankGameToFB() {
    const allUsersRef = ref(db, 'allUsers');

    get(allUsersRef)
        .then(snapshot => {
            if (!snapshot.exists()) {
                console.error("‚ùå allUsers kh√¥ng t·ªìn t·∫°i");
                return;
            }

            const allUsers = snapshot.val();
            const rankGame = {};

            for (const username in allUsers) {
                if (allUsers.hasOwnProperty(username)) {
                    const user = allUsers[username];
                    let userPointRank = user.pointRank;

                    // N·∫øu pointRank l√† s·ªë th√¨ c·∫≠p nh·∫≠t l·∫°i c·∫£ allUsers
                    if (typeof userPointRank === 'number') {
                        const fixedRank = {
                            typeGameConquest: userPointRank,
                            typeGameGuess: 0,
                            typeGameSolo5Mon: 0
                        };

                        // C·∫≠p nh·∫≠t l·∫°i cho user ƒë√≥ trong allUsers
                        const userRef = ref(db, 'allUsers/' + username + '/pointRank');
                        set(userRef, fixedRank)
                            .then(() => {
                                console.log(`‚úÖ ƒê√£ s·ª≠a pointRank c·ªßa ${username} th√†nh object trong allUsers.`);
                            })
                            .catch(error => {
                                console.error(`‚ùå L·ªói khi s·ª≠a pointRank c·ªßa ${username}:`, error);
                            });

                        userPointRank = fixedRank;
                    } else {
                        // N·∫øu l√† object th√¨ ƒë·∫£m b·∫£o ƒë·ªß 3 tr∆∞·ªùng
                        userPointRank = {
                            typeGameConquest: userPointRank?.typeGameConquest ?? 0,
                            typeGameGuess: userPointRank?.typeGameGuess ?? 0,
                            typeGameSolo5Mon: userPointRank?.typeGameSolo5Mon ?? 0
                        };
                    }

                    // D·ªØ li·ªáu cho rankGame
                    rankGame[username] = {
                        rankPoint: userPointRank
                    };
                }
            }

            // Ghi rankGame m·ªõi v√†o Firebase
            set(ref(db, 'rankGame'), rankGame)
                .then(() => {
                    console.log('‚úÖ rankGame ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng tr√™n Firebase.');
                })
                .catch(error => {
                    console.error('‚ùå L·ªói khi ghi rankGame v√†o Firebase:', error);
                });
        })
        .catch(error => {
            console.error("‚ùå L·ªói khi l·∫•y allUsers:", error);
        });
}


function loadAllData() {

    const dbRef = ref(db);

    Promise.all([
        get(child(dbRef, 'allCharacter')),
        get(child(dbRef, 'allQuestData')),
        get(child(dbRef, 'allPets')),
        get(child(dbRef, 'defaultHP')),
        get(child(dbRef, 'allComps')),
        get(child(dbRef, 'skillDescriptions')),
    ]).then(([charSnap, questSnap, petsSnap, hpSnap, compsSnap, skillSnap]) => {
        allCharacter = charSnap.val() || [];
        allQuestData = questSnap.val() || {};
        allPets = petsSnap.val() || [];
        defaultHP = hpSnap.val();
        allComps = compsSnap.val() || [];
        console.log("allComps", allComps);

        const skillDescriptions = skillSnap.val() || {};
        const effectsSkillArray = skillDescriptions.effectsSkill || [];
        const effectsInternalArray = skillDescriptions.effectsInternal || [];
        const effectsSellUpArray = skillDescriptions.effectsSellUp || [];

        effectsSkill = effectsSkillArray.reduce((acc, item) => {
            acc[item.name] = {
                dameSkill: item.dameSkill,
                descriptionSkill: item.descriptionSkill
            };
            return acc;
        }, {});

        effectsInternal = effectsInternalArray.reduce((acc, item) => {
            acc[item.name] = {
                dameInternal: item.dameInternal,
                descriptionInternal: item.descriptionInternal
            };
            return acc;
        }, {});

        effectsSellUp = effectsSellUpArray.reduce((acc, item) => {
            acc[item.name] = {
                dameSellUp: item.dameSellUp,
                descriptionSellUp: item.descriptionSellUp
            };
            return acc;
        }, {});

        console.log(effectsSkill, effectsInternal, effectsSellUp);
        console.log("allPets", allPets);
        console.log("allCharacter", allCharacter);
        console.log("allComps", allComps);
    }).catch(error => {
        console.error("Error loading data from Firebase:", error);
    });
}

function loadAllComp() {
    function updatePowerScale(allPets, objectsToUpdate) {
        // Duy·ªát qua t·ª´ng object trong m·∫£ng objectsToUpdate
        for (const obj of objectsToUpdate) {
                const item = obj;
                // console.log("item", item)
                // console.log("item.ID", item.ID)
                const matchedPet = allPets.find(pet => pet.ID === item.ID);

                if (matchedPet) {
                    console.log("V√†o ƒë√¢y matchedPet", matchedPet)
                    // G√°n l·∫°i POWER.SCALE theo allPets
                    if (!item.POWER) item.POWER = {};
                    item.POWER.SCALE = matchedPet.POWER.SCALE;

                    item.PRICE = matchedPet.PRICE

                    //G·∫Øn l·∫°i EFFECT 
                    item.EFFECT = matchedPet.EFFECT
                    item.SELLUP = matchedPet.SELLUP
                    item.INTERNAL = matchedPet.INTERNAL
                    item.TYPE = matchedPet.TYPE

                    let powerINT = scalePower5Mon(item.POWER.INT);

                    if (item.EFFECT.includes("Attacking")) {
                        item.DAME[0] = Math.round(powerINT.dame * item.POWER.SCALE)
                    } else {
                        item.DAME[0] = 0
                    }

                    if (item.EFFECT.includes("Healing")) {
                        item.HEAL[0] = Math.round(powerINT.heal * item.POWER.SCALE)
                    } else {
                        item.HEAL[0] = 0
                    }

                    if (item.EFFECT.includes("Shield")) {
                        item.SHIELD[0] = Math.round(powerINT.shield * item.POWER.SCALE)
                    } else {
                        item.SHIELD[0] = 0
                    }

                    if (item.EFFECT.includes("Burn")) {
                        item.BURN[0] = Math.round(powerINT.burn * item.POWER.SCALE)
                    } else {
                        item.BURN[0] = 0
                    }

                    if (item.EFFECT.includes("Poison")) {
                        item.POISON[0] = Math.round(powerINT.poison * item.POWER.SCALE)
                    } else {
                        item.POISON[0] = 0
                    }

                    //T√≠nh cooldown
                    let agi = item.POWER.AGI;
                    let minC = 8;
                    let maxC = 20;

                    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5

                    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - item.POWER.SCALE);

                    //t√≠nh crit
                    let luk = item.POWER.LUK;
                    let maxCrit = 60;
                    let scaleCrit = 1500; // t√πy ch·ªânh
                    let valueCrit = maxCrit * luk / (luk + scaleCrit);
                    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
                    valueCrit = Math.round(valueCrit * item.POWER.SCALE); 

                    //t√≠nh def
                    let def = item.POWER.DEF;
                    let maxDef = 90;
                    let scaleDef = 475; // t√πy ch·ªânh
                    let valueDef = maxDef * def / (def + scaleDef);
                    valueDef = Math.min(maxDef, Math.max(0, valueDef));
                    valueDef = Math.round(valueDef * item.POWER.SCALE);

                    item.DEF[0] = valueDef
                    item.CRIT[0] = valueCrit
                    item.COOLDOWN[0] = Math.ceil(valueC)
                    item.URLimg = matchedPet.URLimg
                }
        }
    }
    
    const compUpdateRef = ref(db, `allCompsRound`);

    get(compUpdateRef).then((snapshot) => {
        const allCompsRound = snapshot.val() || {};
        
        for (const roundKey in allCompsRound) {
            const compInRound = allCompsRound[roundKey];
    
            // B·ªè qua n·∫øu compInRound kh√¥ng ph·∫£i object
            if (typeof compInRound !== 'object' || compInRound === null) continue;
    
            for (const compKey in compInRound) {
                const comp = compInRound[compKey];
    
                if (!comp || typeof comp.slotSkillComp !== 'object') continue;
    
                const skillKeys = Object.keys(comp.slotSkillComp);
                const skillObjects = skillKeys.map(key => comp.slotSkillComp[key]);
    
                updatePowerScale(allPets, skillObjects);
    
                const updatedSlotSkillComp = {};
                skillKeys.forEach((key, index) => {
                    updatedSlotSkillComp[key] = skillObjects[index];
                });
                comp.slotSkillComp = updatedSlotSkillComp;
            }
        }
    
        return set(compUpdateRef, allCompsRound);
    })
    .then(() => console.log("‚úÖ C·∫≠p nh·∫≠t allCompsByRound th√†nh c√¥ng"))
    .catch(err => console.error("‚ùå L·ªói c·∫≠p nh·∫≠t allCompsByRound:", err));

}

//Khai b√°o c√°c bi·∫øn
//Th√¥ng tin User
var username = "";
var password = "";
var nameUser = "";
var telUser = "";
var activateUser = "";
var emailUser = "";
var goldUser = 0;
var staminaUser = 0; // Kh·ªüi t·∫°o staminaUser
var weightBagUser = 0;
var luckyMeet5Mon = 0;
var diamondUser = 0;

var pointRank = { typeGameConquest: 0, typeGameSolo5Mon: 0, typeGameGuess: 0 }
var characterUser = "";
var allCharacterUser = [];
var isBan = "";
var timeOnline = "";
var newTimeOnline = "";
var onlineLasted = "";
var weekOnline = ""
var newWeekOnline = "";
var ticketsUser = 0;
var vipTicket = "Th∆∞·ªùng";
var pointRankComp = "";
var todayCheckin = "";
var weekCheckin = { cn: 0, t2: 0, t3: 0, t4: 0, t5: 0, t6: 0, t7: 0 };
var giftCheckinComplete = ""
var questDay = { qd1: [0, "No"], qd2: [0, "No"], qd3: [0, "No"], qd4: [0, "No"], qd5: [0, "No"], qd6: [0, "No"] };;
var questWeek = { qw1: [0, "No"], qw2: [0, "No"], qw3: [0, "No"], qw4: [0, "No"], qw5: [0, "No"], qw6: [0, "No"] };;
var questWeekend = { qwe1: [0, "No"], qwe2: [0, "No"], qwe3: [0, "No"], qwe4: [0, "No"], qwe5: [0, "No"], qwe6: [0, "No"] };;

//Ch·∫ø ƒë·ªô game
var onGame = 0;
var infoStartGame = { typeGame: "Conquest", modeGame: "Normal", difficultyGame: "Easy", roundGame: 1, stepGame: 0, winStreak: 0, } //type game: Conquest (chinh ph·ª•c), Solo5Mon (ƒë·ªëi kh√°ng), Guess (D·ª± ƒëo√°n) //modeGame: Guide, Normal, Rank //difficultyGame: Easy, Normal, Hard, Very Hard, Hell


//Pet m√† user c√≥ (trong sheet User)
var userPet = {}; //pet ƒë·ªÉ hi·ªÉn th·ªã ·ªü t·ªß ƒë·ªì

//Hp c·ªßa ng∆∞·ªùi ch∆°i (n·∫øu round = 1 th√¨ auto Hp = 300; c√≤n round > 1 th√¨ Hp ƒë∆∞·ª£c l·∫•y t·ª´ googleSheet)
var defaultHP = 0;
var maxHpUp = 0;
var idSkillRND = 0; //ID random t·∫°o id cho div skill

//Ch·ªâ s·ªë trong game
//ƒêi·ªÉm nh·∫≠n ƒë∆∞·ª£c qua m·ªói round
let modeGamePoint = 0;

//Th√¥ng tin c·ªßa ng∆∞·ªùi ch∆°i
var nowHpBattleMy = 0;
var nowShieldBattleMy = 0;
var nowBurnBattleMy = 0;
var nowPoisonBattleMy = 0;

//Th√¥ng tin ch·ªâ s·ªë 
var nowHpBattleComp = 0;
var nowShieldBattleComp = 0;
var nowBurnBattleComp = 0;
var nowPoisonBattleComp = 0;

let isLogin = false;
var defaultSTT5Mon = {
    ID: "", NAME: "", TYPE: [""], SELLUP: [""], INTERNAL: [""], EFFECT: [""], URLimg: {Lv1: "", Lv2: "", Lv3: "", Lv4: ""},
    LEVEL: 0, POWER: { ATK: 0, DEF: 0, AGI: 0, INT: 0, LUK: 0, HP: 0, SCALE: 0 }, DAME: [0, 0, 0, 0, 0, 0], DEF: [0, 0, 0, 0, 0, 0],
    HEAL: [0, 0, 0, 0, 0, 0], SHIELD: [0, 0, 0, 0, 0, 0], BURN: [0, 0, 0, 0, 0, 0], POISON: [0, 0, 0, 0, 0, 0], 
    CRIT: [0, 0, 0, 0, 0, 0], COOLDOWN: [0, 0, 0, 0, 0, 0], PRICE: 0,
};

var defaultSTT5MonInBattle = {
    ID: "", NAME: "", TYPE: [""], SELLUP: [""], INTERNAL: [""], EFFECT: [""], URLimg: {Lv1: "", Lv2: "", Lv3: "", Lv4: ""},
    LEVEL: 0, POWER: { ATK: 0, DEF: 0, AGI: 0, INT: 0, LUK: 0, HP: 0, SCALE: 0 }, DAME: [0, 0, 0, 0, 0, 0], DEF: [0, 0, 0, 0, 0, 0],
    HEAL: [0, 0, 0, 0, 0, 0], SHIELD: [0, 0, 0, 0, 0, 0], BURN: [0, 0, 0, 0, 0, 0], POISON: [0, 0, 0, 0, 0, 0], 
    CRIT: [0, 0, 0, 0, 0, 0], COOLDOWN: [0, 0, 0, 0, 0, 0], PRICE: 0, PRICESELL: 0,
};

var typeGameGuess = {}
var typeGameSolo5Mon = {}
var typeGameConquest = {
    winBattle: 0,
    loseBattle: 0,
    pointBattle: 0,
    reRoll: 0,
    reRollPrice: 0,
    starUser: 0,
    selectCharacterBattle: "",
    slowB: 0,
    upCooldownB: 0,
    dameCritB: 0,
    slowA: 0,
    upCooldownA: 0,
    dameCritA: 0,
    selectSkillShop: 0,
    usernameComp: "",
    idComp: "",
    nameComp: "",
    maxHpBattleComp: 0,
    winComp: 0,
    loseComp: 0,
    selectCharacterComp: "",
    battleUserPet: [""],
    maxHpBattle: 0,
    // slotLock: {skill1B: false, skill2B: false, skill3B: true, skill4B: true, skill5B: true, skill6B: true, skill7B: true, skill8B: true, skill9B: true},
    battleUserPetRound: [""],
    battlePetUseSlotRound: {
        skill1B: defaultSTT5MonInBattle,
        skill2B: defaultSTT5MonInBattle,
        skill3B: defaultSTT5MonInBattle,
        skill4B: defaultSTT5MonInBattle,
        skill5B: defaultSTT5MonInBattle,
        skill6B: defaultSTT5MonInBattle,
        skill7B: defaultSTT5MonInBattle,
        skill8B: defaultSTT5MonInBattle,
        skill9B: defaultSTT5MonInBattle,
    },
    battlePetInShop: {
        battleShop1: defaultSTT5MonInBattle,
        battleShop2: defaultSTT5MonInBattle,
        battleShop3: defaultSTT5MonInBattle,
        battleShop4: defaultSTT5MonInBattle,
        battleShop5: defaultSTT5MonInBattle,
    },
    battlePetInInventory: {
        battleInv1: defaultSTT5MonInBattle,
        battleInv2: defaultSTT5MonInBattle,
        battleInv3: defaultSTT5MonInBattle,
        battleInv4: defaultSTT5MonInBattle,
        battleInv5: defaultSTT5MonInBattle,
        battleInv6: defaultSTT5MonInBattle,
        battleInv7: defaultSTT5MonInBattle,
        battleInv8: defaultSTT5MonInBattle,
        battleInv9: defaultSTT5MonInBattle,
    },
    skillBattle: {
        skill1A: defaultSTT5MonInBattle,
        skill2A: defaultSTT5MonInBattle,
        skill3A: defaultSTT5MonInBattle,
        skill4A: defaultSTT5MonInBattle,
        skill5A: defaultSTT5MonInBattle,
        skill6A: defaultSTT5MonInBattle,
        skill7A: defaultSTT5MonInBattle,
        skill8A: defaultSTT5MonInBattle,
        skill9A: defaultSTT5MonInBattle,
        skill1B: defaultSTT5MonInBattle,
        skill2B: defaultSTT5MonInBattle,
        skill3B: defaultSTT5MonInBattle,
        skill4B: defaultSTT5MonInBattle,
        skill5B: defaultSTT5MonInBattle,
        skill6B: defaultSTT5MonInBattle,
        skill7B: defaultSTT5MonInBattle,
        skill8B: defaultSTT5MonInBattle,
        skill9B: defaultSTT5MonInBattle,
    },
};

function loadDataForUser() {
    const userDataRef = ref(db, `allUsers/${username}`); // Truy c·∫≠p ƒë∆∞·ªùng d·∫´n d·ªØ li·ªáu ng∆∞·ªùi d√πng

    const rankGameData = ref(db, 'rankGame');

    get(rankGameData)
        .then(snapshot => {
            if (!snapshot.exists()) {
                console.error("D·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i trong Firebase.");
                rankGame = {};  // Kh·ªüi t·∫°o bi·∫øn rankGame n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
                return;
            }

            const data = snapshot.val();

            if (!data) {
                console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ Firebase l√† null ho·∫∑c undefined.");
                return;
            }

            rankGame = data;
        })
        .catch(error => {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Firebase:", error);
        });

    // S·ª≠ d·ª•ng `get` ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Firebase
    get(userDataRef)
        .then((snapshot) => {
            if (!snapshot.exists()) {
                console.error("D·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i trong Firebase.");
                return;
            }

            const data = snapshot.val(); // L·∫•y d·ªØ li·ªáu

            // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu tr·∫£ v·ªÅ h·ª£p l·ªá
            if (!data) {
                console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ Firebase l√† null ho·∫∑c undefined.");
                return;
            }

            // C·∫≠p nh·∫≠t th√¥ng tin game
            typeGameConquest = { ...typeGameConquest, ...data.battleData.typeGameConquest };
            typeGameGuess = { ...typeGameGuess, ...data.battleData.typeGameGuess };
            typeGameSolo5Mon = { ...typeGameSolo5Mon, ...data.battleData.typeGameSolo5Mon };
            if (!data.battleData.typeGameConquest.battleUserPet) {
                typeGameConquest.battleUserPet = {}; // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
            }

            if (!data.battleData.typeGameConquest.battleUserPetRound) {
                typeGameConquest.battleUserPetRound = {}; // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
            }

            // L·∫•y danh s√°ch pet c·ªßa ng∆∞·ªùi d√πng
            if (!data.userPet) {
                userPet = {}; // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi userPet l√† m·ªôt ƒë·ªëi t∆∞·ª£ng tr·ªëng
            } else {
                userPet = Object.entries(data.userPet).map(([key, pet]) => {
                    const matched = allPets.find(p => p.ID === pet.ID && Number(p.LEVEL) === 1);
                    if (matched) {
                        return [key, { ...pet, URLimg: matched.URLimg }];
                    }
                    return [key, pet];
                });

                // B∆∞·ªõc 2: Chuy·ªÉn m·∫£ng [key, value] tr·ªü l·∫°i object
                userPet = Object.fromEntries(userPet) ?? {};
            }
            console.log("userPet", userPet)

            // C·∫≠p nh·∫≠t c√°c th√¥ng tin c∆° b·∫£n
            goldUser = data.goldUser;
            staminaUser = data.staminaUser;
            weightBagUser = data.weightBagUser || 100;
            luckyMeet5Mon = data.luckyMeet5Mon || 5;
            diamondUser = data.diamondUser || 0;
            infoStartGame = { ...infoStartGame, ...data.infoStartGame } || { typeGame: "Conquest", modeGame: "Normal", difficultyGame: "Easy", roundGame: 1, stepGame: 0, winStreak: 0 };
            activateUser = data.activateUser;
            characterUser = data.characterUser;

            
        console.log(allCharacter)
        console.log(characterUser)
        document.getElementById("playerHunter").src = allCharacter[characterUser].urlIMG
        
            allCharacterUser = data.allCharacterUser;
            onGame = data.onGame;
            idSkillRND = data.idSkillRND;
            pointRank = data.pointRank || { typeGameConquest: 0, typeGameSolo5Mon: 0, typeGameGuess: 0 };
            nameUser = data.nameUser;
            isBan = data.isBan;
            timeOnline = data.timeOnline;
            onlineLasted = data.onlineLasted;
            allCharacterUser = data.allCharacterUser || ["C0001"];

            weekOnline = data.weekOnline && data.weekOnline !== "" ? data.weekOnline : getISOWeek(new Date());

            // C·∫≠p nh·∫≠t th√¥ng tin tu·∫ßn v√† th·ªùi gian hi·ªán t·∫°i
            newWeekOnline = getISOWeek(new Date());
            let now = new Date();
            now.setHours(now.getHours() + 7); // C·ªông th√™m 7 gi·ªù cho m√∫i gi·ªù Vi·ªát Nam
            newTimeOnline = now.toISOString().split('T')[0];

            restoreStamina(timeOnline);

            console.log("timeOnline", timeOnline);
            console.log("newTimeOnline", newTimeOnline);
            console.log("weekOnline", weekOnline);
            console.log("newWeekOnline", newWeekOnline);

            // C√°c th√¥ng tin kh√°c
            ticketsUser = data.ticketsUser;
            vipTicket = data.vipTicket === "No" ? "Th∆∞·ªùng" : data.vipTicket;
            todayCheckin = data.todayCheckin || "No";
            weekCheckin = { ...weekCheckin, ...data.weekCheckin } || { cn: 0, t2: 0, t3: 0, t4: 0, t5: 0, t6: 0, t7: 0 };
            giftCheckinComplete = data.giftCheckinComplete || "";
            questDay = { ...questDay, ...data.questDay } || { qd1: [0, "No"], qd2: [0, "No"], qd3: [0, "No"], qd4: [0, "No"], qd5: [0, "No"], qd6: [0, "No"] };
            questWeek = { ...questWeek, ...data.questWeek } || { qw1: [0, "No"], qw2: [0, "No"], qw3: [0, "No"], qw4: [0, "No"], qw5: [0, "No"], qw6: [0, "No"] };
            questWeekend = { ...questWeekend, ...data.questWeekend } || { qwe1: [0, "No"], qwe2: [0, "No"], qwe3: [0, "No"], qwe4: [0, "No"], qwe5: [0, "No"], qwe6: [0, "No"] };

            // L·∫•y th√¥ng tin battle pets         
            typeGameConquest.battleUserPet = !data.battleData?.typeGameConquest?.battleUserPet
                ? {}
                : Object.fromEntries(
                    Object.entries(data.battleData.typeGameConquest.battleUserPet).map(([key, pet]) => {
                        const matched = allPets.find(p => p.ID === pet.ID && Number(p.LEVEL) === 1);
                        return [key, matched ? { ...pet, URLimg: matched.URLimg } : pet];
                    })
                );


            // C·∫≠p nh·∫≠t UI
            document.getElementById("textNameComp").innerText = typeGameConquest.nameComp;

            // Ki·ªÉm tra ƒëi·ªÉm rank c·ªßa ƒë·ªëi th·ªß
            Object.keys(rankGame).forEach((key) => {
                if (key === typeGameConquest.usernameComp) {
                    pointRankComp = rankGame[key].rankPoint.typeGameConquest;
                    console.log("pointRankComp", pointRankComp);
                }
            });

            typeGameConquest.battleUserPetRound = !data.battleData?.typeGameConquest?.battleUserPetRound
                ? {}
                : Object.fromEntries(
                    Object.entries(data.battleData.typeGameConquest.battleUserPetRound).map(([key, pet]) => {
                        const matched = allPets.find(p => p.ID === pet.ID && Number(p.LEVEL) === 1);
                        return [key, matched ? { ...pet, URLimg: matched.URLimg } : pet];
                    })
                );

            // C·∫≠p nh·∫≠t UI th√¥ng tin ng∆∞·ªùi d√πng
            document.getElementById("nameUser").innerText = `${nameUser}`;
            resetGoldAndTicket();
            isFinalLoadData = true;
            updateStamina();
            hideLoading();

            // Hi·ªÉn th·ªã popup n·∫øu user ch∆∞a ch·ªçn nh√¢n v·∫≠t
            if (!characterUser || characterUser === "") {
                openPopupSelectCharacter(true);
                if (guideMode) showStepGuide(0);
            }

            // Reset checkin v√† nhi·ªám v·ª•
            resetDayorWeek();


            //L∆∞u data v√†o dataUserOld
            if (endGame) {
                [typeGameConquest.skillBattle, typeGameConquest.battlePetUseSlotRound].forEach((obj) => {
                    Object.values(obj).forEach((skill) => {
                        skill.COOLDOWN[4] = 0;
                        skill.DAME[3] = 0;
                        skill.HEAL[3] = 0;
                        skill.SHIELD[3] = 0;
                        skill.BURN[3] = 0;
                        skill.POISON[3] = 0;
                        skill.CRIT[3] = 0;
                    });
                });
            }

            // T·∫°o d·ªØ li·ªáu ng∆∞·ªùi d√πng //+++
            let userPetIDsOld = Object.fromEntries(
                Object.entries(userPet).map(([key, pet]) => {
                    const { URLimg, ...rest } = pet;  // Lo·∫°i URLimg ra
                    return [key, rest];  // Tr·∫£ v·ªÅ c·∫∑p key v√† rest (pet kh√¥ng c√≥ URLimg)
                })
            );

            // Ki·ªÉm tra n·∫øu userPetIDsOld kh√¥ng c√≥ b·∫•t k·ª≥ ph·∫ßn t·ª≠ n√†o
            if (Object.keys(userPetIDsOld).length < 1) {
                userPetIDsOld = {};  // ƒê·∫∑t l·∫°i th√†nh ƒë·ªëi t∆∞·ª£ng r·ªóng thay v√¨ m·∫£ng
            }

            let battleUserPetIDsOld = Object.fromEntries(
                Object.entries(typeGameConquest.battleUserPet).map(([key, pet]) => {
                    const { URLimg, ...rest } = pet;  // Lo·∫°i URLimg ra
                    return [key, rest];  // Tr·∫£ v·ªÅ c·∫∑p key v√† rest (pet kh√¥ng c√≥ URLimg)
                })
            );

            if (Object.keys(battleUserPetIDsOld).length < 1) {
                battleUserPetIDsOld = {};
            }

            let battleUserPetRoundIDsOld = Object.fromEntries(
                Object.entries(typeGameConquest.battleUserPetRound).map(([key, pet]) => {
                    const { URLimg, ...rest } = pet;  // Lo·∫°i URLimg ra
                    return [key, rest];  // Tr·∫£ v·ªÅ c·∫∑p key v√† rest (pet kh√¥ng c√≥ URLimg)
                })
            );

            if (Object.keys(battleUserPetRoundIDsOld).length < 1) {
                battleUserPetRoundIDsOld = {};
            }

            let allBattleUsersData = {
                typeGameConquest: {
                    ...typeGameConquest,
                    battleUserPetRound: battleUserPetRoundIDsOld,
                    battleUserPet: battleUserPetIDsOld
                },
                typeGameSolo5Mon,
                typeGameGuess
            };

            function updatePowerScale(allPets, objectsToUpdate) {
                // Duy·ªát qua t·ª´ng object trong m·∫£ng objectsToUpdate
                for (const obj of objectsToUpdate) {
                    // Duy·ªát qua t·ª´ng key trong object ƒë√≥
                    Object.keys(obj).forEach(key => {
                        const item = obj[key];
                        const matchedPet = allPets.find(pet => pet.ID === item.ID);
                        if (matchedPet) {
                            // G√°n l·∫°i POWER.SCALE theo allPets
                            if (!item.POWER) item.POWER = {};
                            item.POWER.SCALE = matchedPet.POWER.SCALE;

                            item.PRICE = matchedPet.PRICE

                            //G·∫Øn l·∫°i EFFECT 
                            item.EFFECT = matchedPet.EFFECT
                            item.SELLUP = matchedPet.SELLUP
                            item.INTERNAL = matchedPet.INTERNAL
                            item.TYPE = matchedPet.TYPE

                            let powerINT = scalePower5Mon(item.POWER.INT);

                            if (item.EFFECT.includes("Attacking")) {
                                item.DAME[0] = Math.round(powerINT.dame * item.POWER.SCALE)
                            } else {
                                item.DAME[0] = 0
                            }

                            if (item.EFFECT.includes("Healing")) {
                                item.HEAL[0] = Math.round(powerINT.heal * item.POWER.SCALE)
                            } else {
                                item.HEAL[0] = 0
                            }

                            if (item.EFFECT.includes("Shield")) {
                                item.SHIELD[0] = Math.round(powerINT.shield * item.POWER.SCALE)
                            } else {
                                item.SHIELD[0] = 0
                            }

                            if (item.EFFECT.includes("Burn")) {
                                item.BURN[0] = Math.round(powerINT.burn * item.POWER.SCALE)
                            } else {
                                item.BURN[0] = 0
                            }

                            if (item.EFFECT.includes("Poison")) {
                                item.POISON[0] = Math.round(powerINT.poison * item.POWER.SCALE)
                            } else {
                                item.POISON[0] = 0
                            }

                            //T√≠nh cooldown
                            let agi = item.POWER.AGI;
                            let minC = 8;
                            let maxC = 20;

                            let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5

                            let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - item.POWER.SCALE);

                            //t√≠nh crit
                            let luk = item.POWER.LUK;
                            let maxCrit = 60;
                            let scaleCrit = 1500; // t√πy ch·ªânh
                            let valueCrit = maxCrit * luk / (luk + scaleCrit);
                            valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
                            valueCrit = Math.round(valueCrit * item.POWER.SCALE);

                            //t√≠nh def
                            let def = item.POWER.DEF;
                            let maxDef = 90;
                            let scaleDef = 475; // t√πy ch·ªânh
                            let valueDef = maxDef * def / (def + scaleDef);
                            valueDef = Math.min(maxDef, Math.max(0, valueDef));
                            valueDef = Math.round(valueDef * item.POWER.SCALE);

                            item.DEF[0] = valueDef
                            item.CRIT[0] = valueCrit
                            item.COOLDOWN[0] = Math.ceil(valueC)
                            item.URLimg = matchedPet.URLimg
                        }
                    });
                }
            }


            // L·∫•y to√†n b·ªô slotSkillComp t·ª´ allComps (d·∫°ng object), c√πng v·ªõi c√°c object c√≤n l·∫°i
            const allSkillSources = [
                typeGameConquest.battlePetInShop,
                typeGameConquest.battlePetUseSlotRound,
                typeGameConquest.battleUserPet,
                typeGameConquest.battleUserPetRound,
                typeGameConquest.skillBattle,
                userPet,
            ];

            // G·ªçi h√†m x·ª≠ l√Ω t·∫•t c·∫£
            updatePowerScale(allPets, allSkillSources);

            // L·∫∑p qua t·ª´ng ph·∫ßn t·ª≠ trong allComps ƒë·ªÉ c·∫≠p nh·∫≠p l·∫°i comps

            userDataOld = {
                passwordUser: password,
                nameUser: nameUser,
                activateUser: activateUser,
                telUser: telUser,
                pointRank: pointRank,
                goldUser: goldUser,
                // staminaUser: staminaUser,
                weightBagUser: weightBagUser,
                // luckyMeet5Mon: luckyMeet5Mon,
                diamondUser: diamondUser,
                onGame: onGame,
                infoStartGame: infoStartGame,
                characterUser: characterUser,
                allCharacterUser: allCharacterUser,
                userPet: userPetIDsOld,
                battleData: allBattleUsersData,
                isBan: isBan,
                timeOnline: timeOnline,
                onlineLasted: onlineLasted,
                weekOnline: weekOnline,
                ticketsUser: ticketsUser,
                vipTicket: vipTicket,
                idSkillRND: idSkillRND,
                todayCheckin: todayCheckin,
                weekCheckin: weekCheckin,
                giftCheckinComplete: giftCheckinComplete,
                questDay: questDay,
                questWeek: questWeek,
                questWeekend: questWeekend
            };

            console.log("userDataOld", userDataOld)


        })
        .catch(error => {
            console.error("L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Firebase:", error);
        });
}

//TƒÉng stamina cho user m·ªói khi ƒëƒÉng nh·∫≠p ho·∫∑c quay l·∫°i
let staminaInterval = null; // d√πng ƒë·ªÉ l∆∞u ID c·ªßa setInterval

function startStaminaRegen() {
    console.log("B·∫Øt ƒë·∫ßu h·ªìi th·ªÉ l·ª±c");
    if (staminaInterval) return; // tr√°nh t·∫°o nhi·ªÅu interval

    staminaInterval = setInterval(() => {
        if (staminaUser < 1000) {
            staminaUser += 1;
            updateStamina();

            let now = new Date();
            now.setHours(now.getHours() + 7); // m√∫i gi·ªù VN
            onlineLasted = now.toISOString();

            console.log("üî• H·ªìi 1 th·ªÉ l·ª±c");
        }
    }, 1 * 60 * 1000); // 1 ph√∫t
}

function stopStaminaRegen() {
    if (staminaInterval) {
        clearInterval(staminaInterval);
        staminaInterval = null;
        console.log("üõë ƒê√£ d·ª´ng h·ªìi th·ªÉ l·ª±c");
    }
}

function restoreStamina() {
    if (!onlineLasted) return;

    let now = new Date();
    now.setHours(now.getHours() + 7);

    let last = new Date(onlineLasted);
    let diffMs = now - last;
    let diffMin = Math.floor(diffMs / (1000 * 60));

    let staminaToAdd = Math.floor(diffMin / 1);
    if (staminaToAdd > 1000) staminaToAdd = 1000
    if (staminaToAdd > 0) {
        staminaUser += staminaToAdd;
        if (staminaUser > 1000) {
            staminaUser = 1000

        } else {
            messageOpen(`üî• ƒê√£ h·ªìi ${staminaToAdd} th·ªÉ l·ª±c l√∫c b·∫°n offline!`);
        }
        updateStamina();
    }
}


//H√†m t√≠nh tu·∫ßn trong nƒÉm
function getISOWeek(date) {
    // T·∫°o ƒë·ªëi t∆∞·ª£ng Date theo gi·ªù Vi·ªát Nam (UTC+7)
    let d = new Date(date.getTime() + 7 * 60 * 60 * 1000);

    // ƒê∆∞a v·ªÅ ƒë·∫ßu ng√†y theo gi·ªù Vi·ªát Nam
    d.setHours(0, 0, 0, 0);

    // ƒê∆∞a v·ªÅ th·ª© 5 c·ªßa tu·∫ßn ƒë√≥
    d.setDate(d.getDate() + 4 - (d.getDay() || 7));

    // L·∫•y ng√†y ƒë·∫ßu nƒÉm theo gi·ªù Vi·ªát Nam
    let yearStart = new Date(d.getFullYear(), 0, 1);
    yearStart.setHours(0, 0, 0, 0); // ƒê·∫£m b·∫£o c≈©ng l√† 0h theo gi·ªù Vi·ªát Nam

    // T√≠nh s·ªë tu·∫ßn trong nƒÉm
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}

function resetDayorWeek() {
    // Ki·ªÉm tra n·∫øu ƒë√£ qua ng√†y m·ªõi
    if (newTimeOnline !== timeOnline) {
        console.log("Ng√†y m·ªõi! Reset bi·∫øn daily...");
        todayCheckin = "No";
        questDay = { qd1: [0, "No"], qd2: [0, "No"], qd3: [0, "No"], qd4: [0, "No"], qd5: [0, "No"], qd6: [0, "No"] };
        staminaUser = 1000;
        // Ki·ªÉm tra n·∫øu h√¥m nay l√† th·ª© 2, reset th√™m bi·∫øn tu·∫ßn
        timeOnline = newTimeOnline
        if (weekOnline !== newWeekOnline) {
            console.log("ƒê·∫ßu tu·∫ßn m·ªõi! Reset bi·∫øn weekly...");
            weekCheckin = { cn: 0, t2: 0, t3: 0, t4: 0, t5: 0, t6: 0, t7: 0 };
            giftCheckinComplete = "";
            questWeek = { qw1: [0, "No"], qw2: [0, "No"], qw3: [0, "No"], qw4: [0, "No"], qw5: [0, "No"], qw6: [0, "No"] };
            questWeekend = { qwe1: [0, "No"], qwe2: [0, "No"], qwe3: [0, "No"], qwe4: [0, "No"], qwe5: [0, "No"], qwe6: [0, "No"] };
            weekOnline = newWeekOnline
        }
    }
}

//Battle
var endGame = true;

//Khai b√†o bi·∫øn ƒë·ªÉ l∆∞u ID cooldown
var animationFrameIds = [];
let skillsSleepA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
let skillsDeleteA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
let skillsSleepB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };
let skillsDeleteB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };

function userSkillA(skillKey, isComp) {
    const skillElement = document.getElementById(skillKey);
    let overlayDiv = null;

    // for (const child of skillElement.children) {
    //     if (child.classList.contains("skillCooldownOverlay") || child.classList.contains("skillCooldownOverlayLV")) {
    //         overlayDiv = child;
    //         break;
    //     }
    // }

    //T√≠nh mutilcast=> ƒë√°nh li√™n ti·∫øp
    let doubleSkill = Math.max(typeGameConquest.skillBattle[skillKey].COOLDOWN[1] + typeGameConquest.skillBattle[skillKey].COOLDOWN[2] + typeGameConquest.skillBattle[skillKey].COOLDOWN[3], 1)
    Object.keys(effectsSkill).forEach((effectSkill) => {
        if (typeGameConquest.skillBattle[skillKey].EFFECT.includes(effectSkill)) {
            for (let d = 1; d <= doubleSkill; d++) {
                setTimeout(() => {
                    useSkill(skillKey, effectSkill, overlayDiv, isComp);
                }, 350 * (d - 1)); // Th·ª±c hi·ªán s·ª≠ d·ª•ng skill v·ªõi delay tƒÉng d·∫ßn
            }
        }
    });
}
function baseAttack(skillKey, isComp) {
    // Ki·ªÉm tra skill c√≥ t·ªìn t·∫°i kh√¥ng
    if (!typeGameConquest.skillBattle[skillKey] || !typeGameConquest.skillBattle[skillKey].ID) {
        return;
    }

    if (endGame === true) {
        stopSkillGame()
        return;
    }

    const skill = document.getElementById(skillKey);
    const overlay = skill.querySelector('.skillCooldownOverlay');

    const cooldownTime = typeGameConquest.skillBattle[skillKey].COOLDOWN[0];

    // ∆Øu ti√™n ki·ªÉm tra tr·∫°ng th√°i Sleep/delete
    let skillsSleep = isComp ? skillsSleepA : skillsSleepB;
    let skillsDelete = isComp ? skillsDeleteA : skillsDeleteB;
    let skillsSpeed = isComp ? skillsSpeedA : skillsSpeedB;

    if (skillsDelete[skillKey] === 1) {
        return; // B·ªè qua n·∫øu b·ªã xo√°
    }

    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i overlay ban ƒë·∫ßu
    overlay.style.transitionDuration = '0ms'; // Kh√¥ng c√≥ hi·ªáu ·ª©ng chuy·ªÉn ti·∫øp ban ƒë·∫ßu
    overlay.style.transform = 'scaleY(1)';    // ƒê·∫∑t overlay ƒë·∫ßy (hi·ªán full)

    // Kh·ªüi t·∫°o th·ªùi gian b·∫Øt ƒë·∫ßu h·ªìi chi√™u
    let startTime = Date.now();
    let elapsedTime = 0;

    function updateCooldown() {
        // N·∫øu game ƒë√£ k·∫øt th√∫c, kh√¥ng l√†m g√¨ n·ªØa
        if (endGame) return;

        if (skillsSleep[skillKey] > 0) {
            // ƒêang b·ªã sleep, kh√¥ng c·∫≠p nh·∫≠t elapsedTime, gi·ªØ nguy√™n startTime
            setTimeout(updateCooldown, 100); // Ki·ªÉm tra l·∫°i sau 100ms
            return;
        } else {
            const skillChild = skill.querySelector('.skill');
            if (skillChild && skillChild.classList.contains('sleep')) {
                skillChild.classList.remove('sleep');
                console.log(`${skillKey} ƒë√£ h·∫øt sleep v√† class 'sleep' ƒë√£ ƒë∆∞·ª£c x√≥a`);
            }
        }

        const now = Date.now();
        const delta = now - startTime;
        startTime = now;

        //Kh·ªüi t·∫°o bi·∫øn cooldown
        let hasteMultiplier = 1;
        if (skillsSpeed[skillKey] > 0) { //N·∫øu tƒÉng t·ªëc
            hasteMultiplier = 2;
            const skillChild = skill.querySelector('.skillCooldownOverlay');
            skill.style.boxShadow = '0 0 10px 3px rgba(255, 0, 0, 0.75)';
            skill.style.animation = 'speedGlow 1.5s infinite alternate';
            if (skillChild) {
                skillChild.style.background = 'linear-gradient(to bottom, #ff0404, #ff040438, #ff040438, #ff040438, #ff040438, #ff040438, #ff0404)'
            }
        } else if (skillsSpeed[skillKey] < 0) { //N·∫øu slow
            hasteMultiplier = 0.5;
            const skillChild = skill.querySelector('.skillCooldownOverlay');
            skill.style.boxShadow = '0 0 10px 3px rgba(0, 233, 255, 0.75)';
            skill.style.animation = 'slowGlow 1.5s infinite alternate';
            if (skillChild) {
                skillChild.style.background = 'linear-gradient(to bottom, #04b7ff, #04a0ff38, #04a0ff38, #04a0ff38, #04a0ff38, #04a0ff38, #04b7ff)';
            }

        } else if (skillsSpeed[skillKey] === 0) { //Kh√¥ng g√¨
            hasteMultiplier = 1;
            const skillChild = skill.querySelector('.skillCooldownOverlay');
            skill.style.boxShadow = '';
            skill.style.animation = '';
            if (skillChild) {
                skillChild.style.background = 'linear-gradient(to bottom, #f9ff04, #f9ff0438, #f9ff0438, #f9ff0438, #f9ff0438, #f9ff0438, #f9ff04)';
            }
        }

        elapsedTime += delta * hasteMultiplier;

        const progress = Math.min(elapsedTime / cooldownTime, 1);
        overlay.style.transform = `scaleY(${1 - progress})`;

        if (progress < 1) {
            const frameId = requestAnimationFrame(updateCooldown);
            animationFrameIds.push(frameId);
        } else {
            //Ki·ªÉm tra xem endgame ch∆∞a, n·∫øu ch∆∞a => Ti·∫øp t·ª•c v√≤ng h·ªìi chi√™u
            if (endGame === false) {
                baseAttack(skillKey, isComp);
                // Khi h·∫øt th·ªùi gian h·ªìi chi√™u, k√≠ch ho·∫°t ƒë√≤n ƒë√°nh th∆∞·ªùng
                // === X√°c ƒë·ªãnh m·ª•c ti√™u ===
                let targetAttackFirst = isComp ? skillKey.slice(0, -1) + "B" : skillKey.slice(0, -1) + "A";

                // N·∫øu m·ª•c ti√™u ƒë·∫ßu ti√™n c√≤n s·ªëng
                if (curentHpAll5Mon[targetAttackFirst] > 0) {
                    console.log(`T·∫•n c√¥ng m·ª•c ti√™u: ${targetAttackFirst}`);
                    // T√≠nh s·ªë l·∫ßn ƒë√°nh
                    let doubleAttack = Math.max(
                        typeGameConquest.skillBattle[skillKey].COOLDOWN[1] +
                        typeGameConquest.skillBattle[skillKey].COOLDOWN[2] +
                        typeGameConquest.skillBattle[skillKey].COOLDOWN[3], 1
                    );

                    for (let d = 1; d <= doubleAttack; d++) {
                        setTimeout(() => {
                            const baseScale = 1;
                            const scaleSTR = baseScale * Math.log10(typeGameConquest.skillBattle[skillKey].POWER.STR);
                            let valuePower = 0.12 * typeGameConquest.skillBattle[skillKey].POWER.STR / scaleSTR + 1

                            let baseDame = Math.round(valuePower * typeGameConquest.skillBattle[skillKey].POWER.SCALE);

                            let defTargetAttack = typeGameConquest.skillBattle[targetAttackFirst].DEF.reduce((a, b) => a + b, 0) / 100;

                            let critDame = 1;
                            let upCritDame = isComp ? typeGameConquest.dameCritA : typeGameConquest.dameCritB
                            let critPoint = typeGameConquest.skillBattle[skillKey].CRIT.reduce((a, b) => a + b, 0); // T√≠nh t·ªïng ƒëi·ªÉm ch√≠ m·∫°ng

                            // Random t·ª´ 1 -> 100
                            let randomValue = Math.floor(Math.random() * 100); // Random s·ªë nguy√™n t·ª´ 1 ƒë·∫øn 100

                            // Ki·ªÉm tra n·∫øu randomValue <= critPoint th√¨ k√≠ch ho·∫°t ch√≠ m·∫°ng
                            let dameCritWithEffect = 0;
                            if (typeGameConquest.skillBattle[skillKey].EFFECT.includes("doubleDameCrit")) {
                                dameCritWithEffect = 3
                            } else {
                                dameCritWithEffect = 2
                            }

                            let isCrit = false;
                            if (randomValue <= critPoint) {
                                critDame = dameCritWithEffect + upCritDame / 100;
                                isCrit = true;
                            } else {
                                critDame = 1;
                                isCrit = false;
                            }

                            let dameSkill = Math.round(baseDame * (1 - defTargetAttack) * critDame);

                            if (skillsDelete[skillKey] === 1 || skillsSleep[skillKey] > 0) {

                            } else {
                                baseAttacking(skillKey, dameSkill, isCrit, targetAttackFirst);
                                let rageGain = calculateRageGainFromSkill(typeGameConquest.skillBattle[skillKey]);
                                typeGameConquest.skillBattle[skillKey].COOLDOWN[4] += rageGain / doubleAttack;
                                //TƒÉng n·ªô cho skillKey
                                if (typeGameConquest.skillBattle[skillKey].COOLDOWN[4] >= 100) { //ƒê·ªß n·ªô
                                    typeGameConquest.skillBattle[skillKey].COOLDOWN[4] -= 100;
                                    userSkillA(skillKey, isComp)
                                }
                                updateHpAndRageBar5Mon();
                            }

                        }, d * 200); // delay m·ªói l·∫ßn 200ms
                    }

                } else {
                    // N·∫øu m·ª•c ti√™u ch√≠nh ƒë√£ ch·∫øt, t√¨m m·ª•c ti√™u kh√°c
                    const skillIndex = parseInt(skillKey.replace(/[^0-9]/g, ""));
                    const side = isComp ? "B" : "A";

                    let indices = [];
                    for (let i = skillIndex + 1; i <= 9; i++) indices.push(i);
                    for (let i = 1; i < skillIndex; i++) indices.push(i);

                    let found = false;
                    for (let i of indices) {
                        let targetKey = `skill${i}${side}`;
                        if (typeGameConquest.skillBattle[targetKey] && curentHpAll5Mon[targetKey] > 0) {
                            targetAttackFirst = targetKey;
                            found = true;
                            break;
                        }
                    }

                    if (!found) {
                        let doubleAttack = Math.max(
                            typeGameConquest.skillBattle[skillKey].COOLDOWN[1] +
                            typeGameConquest.skillBattle[skillKey].COOLDOWN[2] +
                            typeGameConquest.skillBattle[skillKey].COOLDOWN[3], 1
                        );

                        for (let d = 1; d <= doubleAttack; d++) {
                            setTimeout(() => {
                                const baseScale = 1;
                                const scaleSTR = baseScale * Math.log10(typeGameConquest.skillBattle[skillKey].POWER.STR);
                                let valuePower = 0.12 * typeGameConquest.skillBattle[skillKey].POWER.STR / scaleSTR + 1

                                let baseDame = Math.round(valuePower * typeGameConquest.skillBattle[skillKey].POWER.SCALE);

                                let critDame = 1;
                                let upCritDame = isComp ? typeGameConquest.dameCritA : typeGameConquest.dameCritB
                                let critPoint = typeGameConquest.skillBattle[skillKey].CRIT.reduce((a, b) => a + b, 0); // T√≠nh t·ªïng ƒëi·ªÉm ch√≠ m·∫°ng

                                // Random t·ª´ 1 -> 100
                                let randomValue = Math.floor(Math.random() * 100); // Random s·ªë nguy√™n t·ª´ 1 ƒë·∫øn 100

                                // Ki·ªÉm tra n·∫øu randomValue <= critPoint th√¨ k√≠ch ho·∫°t ch√≠ m·∫°ng
                                let dameCritWithEffect = 0;
                                if (typeGameConquest.skillBattle[skillKey].EFFECT.includes("doubleDameCrit")) {
                                    dameCritWithEffect = 3
                                } else {
                                    dameCritWithEffect = 2
                                }

                                let isCrit = false;
                                if (randomValue <= critPoint) {
                                    critDame = dameCritWithEffect + upCritDame / 100;
                                    isCrit = true;
                                } else {
                                    critDame = 1;
                                    isCrit = false;
                                }

                                // let dameSkill = Math.ceil(baseDame * critDame);
                                let dameSkill = Math.round(baseDame);

                                if (skillsDelete[skillKey] === 1 || skillsSleep[skillKey] > 0) {

                                } else {
                                    skillAttacking(skillKey, dameSkill, isCrit);
                                    let rageGain = calculateRageGainFromSkill(typeGameConquest.skillBattle[skillKey]);
                                    typeGameConquest.skillBattle[skillKey].COOLDOWN[4] += rageGain / doubleAttack;
                                    //TƒÉng n·ªô cho skillKey
                                    if (typeGameConquest.skillBattle[skillKey].COOLDOWN[4] >= 100) { //ƒê·ªß n·ªô
                                        typeGameConquest.skillBattle[skillKey].COOLDOWN[4] -= 100;
                                        userSkillA(skillKey, isComp)
                                    }
                                    updateHpAndRageBar5Mon();
                                }
                            }, d * 200); // delay m·ªói l·∫ßn 200ms
                        }
                    } else {

                        // Ti·∫øp t·ª•c t·∫•n c√¥ng nh∆∞ ·ªü tr√™n
                        let doubleAttack = Math.max(
                            typeGameConquest.skillBattle[skillKey].COOLDOWN[1] +
                            typeGameConquest.skillBattle[skillKey].COOLDOWN[2] +
                            typeGameConquest.skillBattle[skillKey].COOLDOWN[3], 1
                        );

                        for (let d = 1; d <= doubleAttack; d++) {
                            setTimeout(() => {
                                const baseScale = 1;
                                const scaleSTR = baseScale * Math.log10(typeGameConquest.skillBattle[skillKey].POWER.STR);
                                let valuePower = 0.12 * typeGameConquest.skillBattle[skillKey].POWER.STR / scaleSTR + 1

                                let baseDame = Math.round(valuePower * typeGameConquest.skillBattle[skillKey].POWER.SCALE);

                                let defTargetAttack = typeGameConquest.skillBattle[targetAttackFirst].DEF.reduce((a, b) => a + b, 0) / 100;

                                let critDame = 1;
                                let upCritDame = isComp ? typeGameConquest.dameCritA : typeGameConquest.dameCritB
                                let critPoint = typeGameConquest.skillBattle[skillKey].CRIT.reduce((a, b) => a + b, 0); // T√≠nh t·ªïng ƒëi·ªÉm ch√≠ m·∫°ng

                                // Random t·ª´ 1 -> 100
                                let randomValue = Math.floor(Math.random() * 100); // Random s·ªë nguy√™n t·ª´ 1 ƒë·∫øn 100

                                // Ki·ªÉm tra n·∫øu randomValue <= critPoint th√¨ k√≠ch ho·∫°t ch√≠ m·∫°ng
                                let dameCritWithEffect = 0;
                                if (typeGameConquest.skillBattle[skillKey].EFFECT.includes("doubleDameCrit")) {
                                    dameCritWithEffect = 3
                                } else {
                                    dameCritWithEffect = 2
                                }

                                let isCrit = false;
                                if (randomValue <= critPoint) {
                                    critDame = dameCritWithEffect + upCritDame / 100;
                                    isCrit = true;
                                } else {
                                    critDame = 1;
                                    isCrit = false;
                                }

                                let dameSkill = Math.round(baseDame * (1 - defTargetAttack) * critDame);

                                if (skillsDelete[skillKey] === 1 || skillsSleep[skillKey] > 0) {

                                } else {
                                    baseAttacking(skillKey, dameSkill, isCrit, targetAttackFirst);
                                    let rageGain = calculateRageGainFromSkill(typeGameConquest.skillBattle[skillKey]);
                                    typeGameConquest.skillBattle[skillKey].COOLDOWN[4] += rageGain / doubleAttack;
                                    //TƒÉng n·ªô cho skillKey
                                    if (typeGameConquest.skillBattle[skillKey].COOLDOWN[4] >= 100) { //ƒê·ªß n·ªô
                                        typeGameConquest.skillBattle[skillKey].COOLDOWN[4] -= 100;
                                        userSkillA(skillKey, isComp)
                                    }
                                    updateHpAndRageBar5Mon();
                                }
                            }, d * 200); // delay m·ªói l·∫ßn 200ms
                        }
                    }

                }
            } else {
                stopSkillGame()
                return;
            }
        }
    }

    // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p c·∫≠p nh·∫≠t cooldown
    const frameId = requestAnimationFrame(updateCooldown);
    animationFrameIds.push(frameId); // L∆∞u ID

}

function calculateRageGainFromSkill(skillData) {
    function getScaledRage(stat, multiplier) {
        return multiplier * Math.sqrt(stat || 0);
    }

    function getInvertedRage(stat, multiplier) {
        // N·∫øu stat th·∫•p ‚Üí gi√° tr·ªã cao
        const maxStat = 1000; // gi·ªõi h·∫°n max gi·∫£ ƒë·ªãnh (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
        const safeStat = Math.min(stat || 0, maxStat);
        return multiplier * Math.sqrt(maxStat - safeStat);
    }

    const stats = skillData.POWER || {};

    let rageGain = Math.floor(
        getScaledRage(stats.STR, 0.1) +
        getScaledRage(stats.DEF, 0.3) +
        getScaledRage(stats.INT, 0.1) +
        getInvertedRage(stats.AGI, 0.2) + // d√πng h·ªá s·ªë m·ªõi v√† c√¥ng th·ª©c ng∆∞·ª£c
        getScaledRage(stats.LUK, 0.1) +
        getScaledRage(stats.HP, 0.3)
    );

    return rageGain;
}



// H√†m ƒë√°nh th∆∞·ªùng baseAttack
function baseAttacking(skillKey, dameSkill, isCrit, targetAttack) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);
    const skillsDelete = teamAorB === 'TeamA' ? skillsDeleteB : skillsDeleteA
    const isComp = teamAorB === 'TeamA' ? true : false

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(targetAttack);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (teamAorB === "TeamA") {
        // attackEffect.classList.add('attackEffectOfA');
        attackEffect.classList.add('baseAttackEffect')
        attackEffect.style.transform = "rotate(180deg)";
    } else {
        // attackEffect.classList.add('attackEffectOfB');
        attackEffect.classList.add('baseAttackEffect');
    }

    // new Audio('sound/attack.mp3').play(); //√Çm thanh t·∫•n c√¥ng

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        // T√≠nh g√≥c gi·ªØa 2 ƒëi·ªÉm, ƒë·ªïi t·ª´ radian sang ƒë·ªô
        const angleInRadians = Math.atan2(deltaY, deltaX);
        const angleInDegrees = angleInRadians * (180 / Math.PI) + 90;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px) rotate(${angleInDegrees}deg)`;

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectNumberAtBaseAttack(targetAttack, dameSkill, "Attacking", isCrit);

            //Tr·ª´ m√°u target
            curentHpAll5Mon[targetAttack] -= dameSkill

            if (curentHpAll5Mon[targetAttack] <= 0) {
                skillsDelete[targetAttack] = 1
                const skillChild = target.querySelector('.skill');
                if (skillChild) {
                    skillChild.classList.add('delete');
                }
            }
            updateHpAndRageBar5Mon();
        }, duration);
    };

    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}

//H√†m t√≠nh t·ªça ƒë·ªô m·ª•c ti√™u m≈©i t√™n/n·∫Øm ƒë·∫•m
const getCenterRelativeToContainer = (el, container) => {
    let offsetX = 0;
    let offsetY = 0;
    let current = el;

    // C·ªông d·ªìn t·∫•t c·∫£ offset t·ª´ el ƒë·∫øn container
    while (current && current !== container) {
        offsetX += current.offsetLeft;
        offsetY += current.offsetTop;
        current = current.offsetParent;
    }

    return {
        x: offsetX + el.offsetWidth / 2,
        y: offsetY + el.offsetHeight / 2
    };
};



//H√†m update HpBar5Mon v√† rageBar5Mon
function updateHpAndRageBar5Mon() {
    for (let i = 1; i <= 9; i++) {
        const keyA = `skill${i}A`;
        const keyB = `skill${i}B`;

        [keyA, keyB].forEach(skillKey => {
            const skillKeyS = skillKey.charAt(0).toUpperCase() + skillKey.slice(1);

            // L·∫•y currentHp v√† maxHp t·ª´ maxHpAll5Mon v√† curentHpAll5Mon
            const currentHp = curentHpAll5Mon[skillKey] || 0;
            const maxHp = maxHpAll5Mon[skillKey] || 1; // D√πng maxHpAll5Mon ƒë·ªÉ t√≠nh

            // T√≠nh ph·∫ßn trƒÉm HP ch√≠nh x√°c
            const hpPercent = Math.max(0, Math.min(100, (currentHp / maxHp) * 100));
            const hpElement = document.getElementById(`hp${skillKeyS}`);
            if (hpElement) {
                hpElement.style.width = `${hpPercent}%`;
            }

            // Update Rage Bar
            const rageData = typeGameConquest?.skillBattle?.[skillKey]?.COOLDOWN?.[4] ?? 0;
            const ragePercent = Math.max(0, Math.min(100, rageData));
            const rageElement = document.getElementById(`rage${skillKeyS}`);
            if (rageElement) {
                rageElement.style.width = `${ragePercent}%`;
            }
        });
    }
}

// H√†m s·ª≠ d·ª•ng skill Attacking
function skillAttacking(skillId, dameSkill, isCrit) {
    const teamAorB = skillId.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillId.includes('A') ? 'TeamB' : 'TeamA';
    const skill = document.getElementById(skillId);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSide = skillId.includes('A') ? 'hpBarB' : 'hpBarA';


    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(imgTeam);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (imgTeam === "TeamB") {
        // attackEffect.classList.add('attackEffectOfA');
        attackEffect.classList.add('attackEffect')
    } else {
        // attackEffect.classList.add('attackEffectOfB');
        attackEffect.classList.add('attackEffect');
        attackEffect.style.transform = "rotate(90deg)";
    }

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        if (imgTeam === "TeamB") {
            attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;
        } else {
            attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px) rotate(90deg)`;
        }

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectNumberAtAttack(skillId, dameSkill, "Attacking", isCrit);
            applyDamage(targetSide, dameSkill, "Dame");
            //Hi·ªáu ·ª©ng b·ªã t·∫•n c√¥ng
            const teamAtk = skillId.includes('A') ? 'TeamA' : 'TeamB';

            applyAtkEffect(teamAtk);


        }, duration);
    };


    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}

// H√†m s·ª≠ d·ª•ng skill Heal healing
function skillHealing(skillId, dameSkill, isCrit) {
    const teamAorB = skillId.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillId.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillId);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSide = skillId.includes('A') ? 'hpBarA' : 'hpBarB';


    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(imgTeam);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (imgTeam === "TeamA") {
        attackEffect.classList.add('healEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    } else {
        attackEffect.classList.add('healEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    }

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectNumberAtAttack(skillId, dameSkill, "Heal", isCrit);
            applyDamage(targetSide, dameSkill, "Heal");
            //Hi·ªáu ·ª©ng b·ªã t·∫•n c√¥ng
            const teamAtk = skillId.includes('A') ? 'TeamB' : 'TeamA';

            applyAtkEffect(teamAtk);


        }, duration);
    };


    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}

// H√†m s·ª≠ d·ª•ng skill Shield
function skillShield(skillId, dameSkill, isCrit) {
    const teamAorB = skillId.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillId.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillId);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSide = skillId.includes('A') ? 'hpBarA' : 'hpBarB';

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(imgTeam);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (imgTeam === "TeamA") {
        attackEffect.classList.add('shieldEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    } else {
        attackEffect.classList.add('shieldEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    }

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectNumberAtAttack(skillId, dameSkill, "Shield", isCrit);
            applyDamage(targetSide, dameSkill, "Shield");

            //Hi·ªáu ·ª©ng b·ªã t·∫•n c√¥ng
            const teamAtk = skillId.includes('A') ? 'TeamB' : 'TeamA';

            applyAtkEffect(teamAtk);


        }, duration);
    };


    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}

// H√†m s·ª≠ d·ª•ng skill Burn
function skillBurn(skillId, dameSkill, isCrit) {
    const teamAorB = skillId.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillId.includes('A') ? 'TeamB' : 'TeamA';
    const skill = document.getElementById(skillId);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSideId = skillId.includes('A') ? 'hpBarB' : 'hpBarA';
    const effectContainerId = targetSideId === "hpBarA" ? "effectContainerA" : "effectContainerB";
    const effectContainer = document.querySelector(`#${effectContainerId}`);




    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(imgTeam);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (imgTeam === "TeamB") {
        attackEffect.classList.add('burnEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    } else {
        attackEffect.classList.add('burnEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    }

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectNumberAtAttack(skillId, dameSkill, "Burn", isCrit);
            //C·ªông burn cho ƒë·ªëi th·ªß
            if (teamAorB == 'TeamB') {
                nowBurnBattleComp += dameSkill
            } else {
                nowBurnBattleMy += dameSkill
            }
            updateHpbar();

            //Hi·ªáu ·ª©ng b·ªã t·∫•n c√¥ng
            const teamAtk = skillId.includes('A') ? 'TeamA' : 'TeamB';

            applyAtkEffect(teamAtk);


        }, duration);
    };


    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}

// H√†m s·ª≠ d·ª•ng skill Poison
function skillPoison(skillId, dameSkill, isCrit) {
    const teamAorB = skillId.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillId.includes('A') ? 'TeamB' : 'TeamA';
    const skill = document.getElementById(skillId);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSideId = skillId.includes('A') ? 'hpBarB' : 'hpBarA';
    const effectContainerId = targetSideId === "hpBarA" ? "effectContainerA" : "effectContainerB";
    const effectContainer = document.querySelector(`#${effectContainerId}`);

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(imgTeam);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (imgTeam === "TeamB") {
        attackEffect.classList.add('poisonEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    } else {
        attackEffect.classList.add('poisonEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    }

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectNumberAtAttack(skillId, dameSkill, "Poison", isCrit);
            //C·ªông poison cho ƒë·ªëi th·ªß
            if (teamAorB == 'TeamB') {
                nowPoisonBattleComp += dameSkill
            } else {
                nowPoisonBattleMy += dameSkill
            }
            updateHpbar();
            //Hi·ªáu ·ª©ng b·ªã t·∫•n c√¥ng
            const teamAtk = skillId.includes('A') ? 'TeamA' : 'TeamB';
            applyAtkEffect(teamAtk);


        }, duration);
    };


    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}


let cooldownQueueComp = 0; // M·∫£ng ƒë·ªÉ l∆∞u c√°c th·ªùi gian k·∫øt th√∫c t·∫°m d·ª´ng cooldown c·ªßa ng∆∞·ªùi ch∆°i
let cooldownQueueMy = 0; // M·∫£ng ƒë·ªÉ l∆∞u c√°c th·ªùi gian k·∫øt th√∫c t·∫°m d·ª´ng cooldown c·ªßa ƒë·ªëi th·ªß

// Skill ƒë√≥ng bƒÉng (t·∫°m d·ª´ng cooldown)
function skillFreeze(skillId, timeFreeze, isComp) {
    const teamAorB = skillId.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillId.includes('A') ? 'TeamB' : 'TeamA';
    const skill = document.getElementById(skillId);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSideId = skillId.includes('A') ? 'hpBarB' : 'hpBarA';
    const effectContainerId = targetSideId === "hpBarA" ? "cooldownTimeSkillA" : "cooldownTimeSkillB";
    const effectContainer = document.querySelector(`#${effectContainerId}`);


    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m
    const target = document.getElementById(imgTeam);  // ƒê·ªëi t∆∞·ª£ng b·ªã t·∫•n c√¥ng

    // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
    let attackEffect = document.createElement('div');
    if (imgTeam === "TeamB") {
        attackEffect.classList.add('freezeEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    } else {
        attackEffect.classList.add('freezeEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
    }

    const battleScreen = document.getElementById('battleScreen');
    battleScreen.appendChild(attackEffect);

    // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
    const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
    const { x: targetX, y: targetY } = getCenterRelativeToContainer(target, battleScreen);

    // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
    attackEffect.style.position = 'absolute';
    attackEffect.style.left = `${skillX}px`;
    attackEffect.style.top = `${skillY}px`;

    const effectRect = attackEffect.getBoundingClientRect();
    const effectWidth = effectRect.width;
    const effectHeight = effectRect.height;

    // T·∫°o hi·ªáu ·ª©ng bay
    const moveEffect = () => {
        const duration = 500;
        const deltaX = targetX - skillX - effectWidth / 2;
        const deltaY = targetY - skillY - effectHeight / 2;

        attackEffect.style.transition = `transform ${duration}ms ease-out`;
        attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

        // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
        setTimeout(() => {
            attackEffect.remove();
            attackEffect = null;
            effectHpBarUpdate(effectContainer, timeFreeze, "Freeze");

            pauseCooldown(timeFreeze, isComp); // C·ªông th√™m th·ªùi gian t·∫°m d·ª´ng cho ƒë·ªëi th·ªß ho·∫∑c ng∆∞·ªùi ch∆°i
            console.log(`Cooldown paused for ${timeFreeze / 1000} seconds!`);
            updateSttForSkillAffter();
            //Hi·ªáu ·ª©ng b·ªã t·∫•n c√¥ng
            const teamAtk = skillId.includes('A') ? 'TeamA' : 'TeamB';
            applyAtkEffect(teamAtk);

        }, duration);
    };

    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
    setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
}

function pauseCooldown(timeFreeze, isComp) {
    if (!isComp) { //n·∫øu skill v√†o ƒë·ªëi th·ªß
        cooldownQueueComp += timeFreeze; // C·ªông th√™m th·ªùi gian v√†o t·ªïng c·ªßa ƒë·ªëi th·ªß
        console.log("cooldownQueueComp", cooldownQueueComp, isComp)
    } else { //n·∫øu skill v√†o m√¨nh
        cooldownQueueMy += timeFreeze; // C·ªông th√™m th·ªùi gian v√†o t·ªïng c·ªßa ng∆∞·ªùi ch∆°i
        console.log("cooldownQueueMy", cooldownQueueMy, isComp)
    }
}


//Skill gi√∫p 2 skill b√™n c·∫°nh k√≠ch ho·∫°t 1 l·∫ßn
function skillchargerSkill(skillKey, isComp, typeSkill) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey
    let adjacentSlots = [];

    if (typeSkill === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    }

    if (typeSkill === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    }

    if (typeSkill === "LeftRight") {
        // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    }
    if (typeSkill === "All") {
        if (isComp === true) {
            adjacentSlots = [
                'skill1A', 'skill2A', 'skill3A', 'skill4A', 'skill5A', 'skill6A', 'skill7A', 'skill8A', 'skill9A',
            ]
        } else {
            adjacentSlots = [
                'skill1B', 'skill2B', 'skill3B', 'skill4B', 'skill5B', 'skill6B', 'skill7B', 'skill8B', 'skill9B',
            ]
        }
    }

    if (typeSkill === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) // TYPE gi·ªëng nhau
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) // TYPE gi·ªëng nhau
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }

    //Lo·∫°i tr·ª´ c√°c skill c√≥ tr√πng EFFECT v·ªõi skill n√†y
    let myEffect = ['ChargerSkillAll', 'ChargerSkillLeftRight', 'ChargerSkillLeft', 'ChargerSkillRight', 'ChargerSkillType']

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        let skillsSleep = isComp ? skillsSleepA : skillsSleepB
        let skillsDelete = isComp ? skillsDeleteA : skillsDeleteB
        // let limitSkills = isComp? limitSkillsA : limitSkillsB
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== ""
            // && limitSkills[adjacentKey] <= 10
            && skillsSleep[adjacentKey] === 0 && skillsDelete[adjacentKey] === 0
        ) {

            // // ∆Øu ti√™n ki·ªÉm tra tr·∫°ng th√°i Sleep/delete
            // if (skillsSleep[adjacentKey] === 1) {
            //   skillsSleep[adjacentKey] = 0
            //   const skillElement = document.getElementById(adjacentKey);
            //   if (skillElement) {
            //     const skillChild = skillElement.querySelector('.skill');
            //     if (skillChild && skillChild.classList.contains('sleep')) {
            //       skillChild.classList.remove('sleep');
            //     }
            //   }
            //   return; // B·ªè qua skill n√†y
            // }

            // if (skillsDelete[adjacentKey] === 1) {
            //   skillsDelete[adjacentKey] = 0
            //   console.log(`Skill ${adjacentKey} ƒë√£ b·ªã x√≥a!`);
            //   return; // B·ªè qua skill n√†y
            // }

            let adjacentEffectSkill = typeGameConquest.skillBattle[adjacentKey].EFFECT;
            for (let effect of adjacentEffectSkill) {
                if (!myEffect.includes(effect)) {
                    userSkillA(adjacentKey, isComp);
                    break; // Tho√°t kh·ªèi v√≤ng l·∫∑p ngay khi g·ªçi xong startSkill.
                }
            }
        }
    });
}

//Skill tƒÉng dame cho pet kh√°c
function skillUpDame(skillKey, dameSkill, isComp, typeEffect) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey

    // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
    let adjacentSlots = [];
    if (typeEffect === "LeftRight") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "All") {
        for (let s = 1; s <= 9; s++) {
            if (skillIndex !== s) {
                adjacentSlots.push(`skill${s}${isComp ? 'A' : 'B'}`);
            }
        }
    } else if (typeEffect === "Self") {
        adjacentSlots.push(`skill${skillIndex}${isComp ? 'A' : 'B'}`);
    } else if (typeEffect === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }


    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slot h·ª£p l·ªá th√¨ kh√¥ng l√†m g√¨
    if (adjacentSlots.length === 0) return;

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== "") {
            if (typeGameConquest.skillBattle[adjacentKey].EFFECT.includes("Attacking")) {
                typeGameConquest.skillBattle[adjacentKey].DAME[3] += dameSkill
            }
        }
    });
    updateSttForSkillAffter();
}

//Skill tƒÉng ch·ªâ s·ªë heal cho pet kh√°c
function skillUpHeal(skillKey, dameSkill, isComp, typeEffect) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey

    // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
    let adjacentSlots = [];
    if (typeEffect === "LeftRight") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "All") {
        for (let s = 1; s <= 9; s++) {
            if (skillIndex !== s) {
                adjacentSlots.push(`skill${s}${isComp ? 'A' : 'B'}`);
            }
        }
    } else if (typeEffect === "Self") {
        adjacentSlots.push(`skill${skillIndex}${isComp ? 'A' : 'B'}`);
    } else if (typeEffect === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slot h·ª£p l·ªá th√¨ kh√¥ng l√†m g√¨
    if (adjacentSlots.length === 0) return;

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== "") {
            if (typeGameConquest.skillBattle[adjacentKey].EFFECT.includes("Healing")) {
                typeGameConquest.skillBattle[adjacentKey].HEAL[3] += dameSkill
            }
        }
    });
    updateSttForSkillAffter();
}

//Skill tƒÉng ch·ªâ s·ªë shield cho pet kh√°c
function skillUpShield(skillKey, dameSkill, isComp, typeEffect) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey

    // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
    let adjacentSlots = [];
    if (typeEffect === "LeftRight") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "All") {
        for (let s = 1; s <= 9; s++) {
            if (skillIndex !== s) {
                adjacentSlots.push(`skill${s}${isComp ? 'A' : 'B'}`);
            }
        }
    } else if (typeEffect === "Self") {
        adjacentSlots.push(`skill${skillIndex}${isComp ? 'A' : 'B'}`);
    } else if (typeEffect === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slot h·ª£p l·ªá th√¨ kh√¥ng l√†m g√¨
    if (adjacentSlots.length === 0) return;

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== "") {
            if (typeGameConquest.skillBattle[adjacentKey].EFFECT.includes("Shield")) {
                typeGameConquest.skillBattle[adjacentKey].SHIELD[3] += dameSkill
            }
        }
    });
    updateSttForSkillAffter();
}

//Skill tƒÉng ch·ªâ s·ªë burn cho pet kh√°c
function skillUpBurn(skillKey, dameSkill, isComp, typeEffect) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey

    // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
    let adjacentSlots = [];
    if (typeEffect === "LeftRight") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "All") {
        for (let s = 1; s <= 9; s++) {
            if (skillIndex !== s) {
                adjacentSlots.push(`skill${s}${isComp ? 'A' : 'B'}`);
            }
        }
    } else if (typeEffect === "Self") {
        adjacentSlots.push(`skill${skillIndex}${isComp ? 'A' : 'B'}`);
    } else if (typeEffect === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slot h·ª£p l·ªá th√¨ kh√¥ng l√†m g√¨
    if (adjacentSlots.length === 0) return;

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== "") {
            if (typeGameConquest.skillBattle[adjacentKey].EFFECT.includes("Burn")) {
                typeGameConquest.skillBattle[adjacentKey].BURN[3] += dameSkill
            }
        }
    });
    updateSttForSkillAffter();
}

//Skill tƒÉng ch·ªâ s·ªë poison cho pet kh√°c
function skillUpPoison(skillKey, dameSkill, isComp, typeEffect) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey

    // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
    let adjacentSlots = [];
    if (typeEffect === "LeftRight") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "All") {
        for (let s = 1; s <= 9; s++) {
            if (skillIndex !== s) {
                adjacentSlots.push(`skill${s}${isComp ? 'A' : 'B'}`);
            }
        }
    } else if (typeEffect === "Self") {
        adjacentSlots.push(`skill${skillIndex}${isComp ? 'A' : 'B'}`);
    } else if (typeEffect === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) && // TYPE gi·ªëng nhau
                    typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") //Bao g·ªìm attacking
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slot h·ª£p l·ªá th√¨ kh√¥ng l√†m g√¨
    if (adjacentSlots.length === 0) return;

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== "") {
            if (typeGameConquest.skillBattle[adjacentKey].EFFECT.includes("Poison")) {
                typeGameConquest.skillBattle[adjacentKey].POISON[3] += dameSkill
            }
        }
    });
    updateSttForSkillAffter();
}

//Skill tƒÉng ch·ªâ s·ªë crit cho pet kh√°c
function skillUpCrit(skillKey, dameSkill, isComp, typeEffect) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    const skill = document.getElementById(skillKey);

    // X√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa skill hi·ªán t·∫°i
    let skillIndex = parseInt(skillKey.match(/\d+/)[0]); // L·∫•y s·ªë th·ª© t·ª± t·ª´ skillKey

    // Ki·ªÉm tra v√† th√™m c√°c slot li·ªÅn k·ªÅ h·ª£p l·ªá
    let adjacentSlots = [];
    if (typeEffect === "LeftRight") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Left") {
        if (skillIndex - 1 >= 1) {
            adjacentSlots.push(`skill${skillIndex - 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "Right") {
        if (skillIndex + 1 <= 9) {
            adjacentSlots.push(`skill${skillIndex + 1}${isComp ? 'A' : 'B'}`);
        }
    } else if (typeEffect === "All") {
        for (let s = 1; s <= 9; s++) {
            if (skillIndex !== s) {
                adjacentSlots.push(`skill${s}${isComp ? 'A' : 'B'}`);
            }
        }
    } else if (typeEffect === "Self") {
        adjacentSlots.push(`skill${skillIndex}${isComp ? 'A' : 'B'}`);
    } else if (typeEffect === "Type") {
        for (let skill in typeGameConquest.skillBattle) {
            if (isComp === true) {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("A") &&                 // K·∫øt th√∫c b·∫±ng "A"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) // TYPE gi·ªëng nhau
                ) {
                    adjacentSlots.push(skill)
                }
            } else {
                if (
                    skill !== skillKey &&                  // Kh√¥ng tr√πng skillKey
                    skill.endsWith("B") &&                 // K·∫øt th√∫c b·∫±ng "B"
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[skillKey].TYPE.includes(type)) // TYPE gi·ªëng nhau
                ) {
                    adjacentSlots.push(skill)
                }
            }
        }
    }

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slot h·ª£p l·ªá th√¨ kh√¥ng l√†m g√¨
    if (adjacentSlots.length === 0) return;

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // Duy·ªát qua c√°c slot li·ªÅn k·ªÅ v√† k√≠ch ho·∫°t skill t∆∞∆°ng ·ª©ng
    adjacentSlots.forEach(adjacentKey => {
        if (typeGameConquest.skillBattle[adjacentKey] && typeGameConquest.skillBattle[adjacentKey].ID !== "") {
            typeGameConquest.skillBattle[adjacentKey].CRIT[3] += dameSkill
        }
    });
}
//+++

//Skill tƒÉng ch·ªâ s·ªë shield skill b·∫±ng shield ƒëang ƒë∆∞·ª£c t·∫°o hi·ªán t·∫°i
function skillUpShieldWithNowShield(isComp) {
    updateSttForSkillAffter();
    let shieldNow = isComp ? nowShieldBattleComp : nowShieldBattleMy

    // TƒÉng shield cho c√°c skill c√≥ effect "UpShieldWithNowShield"
    for (const skill in typeGameConquest.skillBattle) {
        const isCorrectSkill = isComp ? skill.endsWith("A") : skill.endsWith("B");
        const hasEffect = typeGameConquest.skillBattle[skill]?.EFFECT.includes("UpShieldWithNowShield");

        if (isCorrectSkill && hasEffect) {
            if (typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking")) {
                // let damePlus = shieldNow===0?typeGameConquest.skillBattle[skill].SHIELD.reduce((a, b) => a + b, 0)||0:0
                typeGameConquest.skillBattle[skill].DAME[4] = shieldNow
            }

            if (typeGameConquest.skillBattle[skill].EFFECT.includes("Healing")) {
                // let damePlus = shieldNow===0?typeGameConquest.skillBattle[skill].SHIELD.reduce((a, b) => a + b, 0)||0:0
                typeGameConquest.skillBattle[skill].HEAL[4] = shieldNow
            }
        }
    }
    updateSttForSkillAffter();
}

//Skill v√¥ hi·ªáu h√≥a (ƒë√≥ng bƒÉng) skill ƒë·ªãch
function skillSleepSkills(skillKey, dameSkill, isComp, qtyTarget) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillKey.includes('A') ? 'TeamB' : 'TeamA';
    const skill = document.getElementById(skillKey);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSideId = skillKey.includes('A') ? 'hpBarB' : 'hpBarA';
    const effectContainerId = targetSideId === "hpBarA" ? "cooldownTimeSkillA" : "cooldownTimeSkillB";
    const effectContainer = document.querySelector(`#${effectContainerId}`);

    // M·∫£ng ch·ª©a c√°c ch·ªâ s·ªë c·ªßa skillsSleep c√≥ gi√° tr·ªã l√† 0
    let sleepSkills = [];
    let skillsSleep = isComp ? skillsSleepB : skillsSleepA; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p
    let skillsDelete = isComp ? skillsDeleteB : skillsDeleteA; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p

    // L·∫∑p qua ƒë·ªëi t∆∞·ª£ng skillsSleep ƒë·ªÉ ch·ªçn c√°c skill (kh√¥ng c·∫ßn ki·ªÉm tra ƒë√£ b·ªã sleep hay ch∆∞a)
    for (let skill in skillsSleep) {
        if (typeGameConquest.skillBattle[skill]?.ID && skillsDelete[skill] === 0) {
            sleepSkills.push(skill);
            console.log("Skill c√≥ th·ªÉ sleep:", skill);
        }
    }

    // L·∫•y c√°c skill ng·∫´u nhi√™n t·ª´ sleepSkills ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã th√†nh 1 (sleep)
    let selectedSkills = [];
    while (selectedSkills.length < qtyTarget && sleepSkills.length > 0) { //sleep v·ªõi s·ªë l∆∞·ª£ng qtyTarget
        let randIndex = Math.floor(Math.random() * sleepSkills.length); // Ch·ªçn m·ªôt index ng·∫´u nhi√™n
        const selectedSkill = sleepSkills[randIndex]; // L·∫•y key skill t·ª´ m·∫£ng sleepSkills
        selectedSkills.push(selectedSkill); // Th√™m key skill v√†o danh s√°ch ƒë√£ ch·ªçn
        sleepSkills.splice(randIndex, 1); // X√≥a skill ƒë√£ ch·ªçn kh·ªèi m·∫£ng
    }

    // In ra c√°c k·ªπ nƒÉng ƒë∆∞·ª£c ch·ªçn
    console.log("selectedSkills", selectedSkills);

    // ƒê·ªïi gi√° tr·ªã trong skillsSleep t·∫°i c√°c skill ƒë√£ ch·ªçn t·ª´ 0 th√†nh 1, v√† tƒÉng d·∫ßn theo dameSkill
    selectedSkills.forEach(skill => {
        skillsSleep[skill] += dameSkill; // Th√™m dameSkill v√†o skillsSleep[skill] (tƒÉng th·ªùi gian ng·ªß)
        console.log("Skill ƒë√£ Sleep:", skill, skillsSleep); // Ki·ªÉm tra skill b·ªã Sleep
    });

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m cho c√°c ch·ªâ s·ªë SleepSkills b·ªã ch·ªçn
    selectedSkills.forEach(skillKeyToSleep => {
        const targetSkill = document.getElementById(skillKeyToSleep); // L·∫•y id t∆∞∆°ng ·ª©ng c·ªßa skill ƒë·ªëi ph∆∞∆°ng
        if (targetSkill) {

            // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
            let attackEffect = document.createElement('div');
            if (imgTeam === "TeamB") {
                attackEffect.classList.add('sleepEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            } else {
                attackEffect.classList.add('sleepEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            }

            const battleScreen = document.getElementById('battleScreen');
            battleScreen.appendChild(attackEffect);

            // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
            const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
            const { x: targetX, y: targetY } = getCenterRelativeToContainer(targetSkill, battleScreen);

            // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
            attackEffect.style.position = 'absolute';
            attackEffect.style.left = `${skillX}px`;
            attackEffect.style.top = `${skillY}px`;

            const effectRect = attackEffect.getBoundingClientRect();
            const effectWidth = effectRect.width;
            const effectHeight = effectRect.height;

            // T·∫°o hi·ªáu ·ª©ng bay
            const moveEffect = () => {
                const duration = 500;
                const deltaX = targetX - skillX - effectWidth / 2;
                const deltaY = targetY - skillY - effectHeight / 2;

                attackEffect.style.transition = `transform ${duration}ms ease-out`;
                attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

                const skillChild = targetSkill.querySelector('.skill');
                // Ki·ªÉm tra n·∫øu t√¨m th·∫•y ph·∫ßn t·ª≠, th√™m class 'Sleep'
                if (skillChild) {
                    skillChild.classList.add('sleep');
                }
                // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
                setTimeout(() => {
                    attackEffect.remove();
                    attackEffect = null;
                }, duration);
            };

            // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
            setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu

            // X√°c ƒë·ªãnh skillSleep object ƒëang d√πng
            const skillsSleep = isComp ? skillsSleepB : skillsSleepA;

            // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ sleepTimerElement th√¨ kh√¥ng t·∫°o l·∫°i
            let sleepTimerElement = targetSkill.querySelector('.sleepTimer');

            if (!sleepTimerElement) {
                // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
                sleepTimerElement = document.createElement('div');
                sleepTimerElement.classList.add('sleepTimer');

                // Style tr·ª±c ti·∫øp
                sleepTimerElement.style.position = 'absolute';
                sleepTimerElement.style.top = '60%';
                sleepTimerElement.style.left = '50%';
                sleepTimerElement.style.transform = 'translate(-50%, -50%)';
                sleepTimerElement.style.fontSize = '12px';
                sleepTimerElement.style.color = 'white';
                sleepTimerElement.style.background = 'rgba(183, 179, 179, 0.62)';
                sleepTimerElement.style.padding = '1px 3px';
                sleepTimerElement.style.borderRadius = '4px';
                sleepTimerElement.style.zIndex = '2';
                sleepTimerElement.style.pointerEvents = 'none';
                sleepTimerElement.style.fontWeight = 'bold';

                targetSkill.appendChild(sleepTimerElement);
            }

            // Tr∆∞·ªõc khi setInterval m·ªõi
            if (targetSkill.sleepIntervalId) {
                clearInterval(targetSkill.sleepIntervalId);
                targetSkill.sleepIntervalId = null;
            }

            // C·∫≠p nh·∫≠t hi·ªáu ·ª©ng v√† l∆∞u ID interval
            targetSkill.sleepIntervalId = setInterval(() => {
                const currentSleep = skillsSleep[skillKeyToSleep];

                if (currentSleep > 0) {
                    sleepTimerElement.textContent = Math.ceil(currentSleep / 1000);
                    let skillsSpeed = isComp ? skillsSpeedB : skillsSpeedA
                    if (skillsSpeed[skillKeyToSleep] > 0) {
                        skillsSleep[skillKeyToSleep] = Math.max(0, currentSleep - 200 * 2);
                    } else if (skillsSpeed[skillKeyToSleep] < 0) {
                        skillsSleep[skillKeyToSleep] = Math.max(0, currentSleep - 200 / 2);
                    } else {
                        skillsSleep[skillKeyToSleep] = Math.max(0, currentSleep - 200);
                    }

                } else {
                    clearInterval(targetSkill.sleepIntervalId);
                    targetSkill.sleepIntervalId = null;
                    sleepTimerElement.remove();
                    sleepTimerElement = null;
                }
            }, 200);

        }
    });
}

//Skill v√¥ hi·ªáu h√≥a (ƒë√≥ng bƒÉng) skill ƒë·ªãch
function skillDeleteSkills(skillKey, dameSkill, isComp) {
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillKey.includes('A') ? 'TeamB' : 'TeamA';
    const skill = document.getElementById(skillKey);

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSideId = skillKey.includes('A') ? 'hpBarB' : 'hpBarA';
    const effectContainerId = targetSideId === "hpBarA" ? "cooldownTimeSkillA" : "cooldownTimeSkillB";
    const effectContainer = document.querySelector(`#${effectContainerId}`);

    // M·∫£ng ch·ª©a c√°c ch·ªâ s·ªë c·ªßa skillsDelete c√≥ gi√° tr·ªã l√† 0
    let deleteSkills = [];
    let skillsDelete = isComp ? skillsDeleteB : skillsDeleteA; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p

    // L·∫∑p qua ƒë·ªëi t∆∞·ª£ng skillsDelete ƒë·ªÉ ch·ªçn c√°c ch·ªâ s·ªë c√≥ gi√° tr·ªã 0 (ch∆∞a b·ªã delete)
    for (let skill in skillsDelete) {
        if (skillsDelete[skill] === 0 && typeGameConquest.skillBattle[skill]?.ID && typeGameConquest.skillBattle[skill].LEVEL <= typeGameConquest.skillBattle[skillKey].LEVEL && !typeGameConquest.skillBattle[skill].EFFECT.includes("BKBDelete")) {
            deleteSkills.push(skill);  // Th√™m key v√†o danh s√°ch skill c√≥ th·ªÉ delete
            console.log(`Skill c√≥ th·ªÉ delete:`, skill);
        }
    }

    let countDameSkill = 0;
    if (dameSkill >= deleteSkills.length) {
        countDameSkill = deleteSkills.length
    } else {
        countDameSkill = dameSkill
    }

    // L·∫•y c√°c skill c·∫ßn delete
    let selectedSkills = [];
    for (let i = 0; i < countDameSkill; i++) {
        if (deleteSkills.length > 0) {
            let randIndex = Math.floor(Math.random() * deleteSkills.length); // Ch·ªçn skill ng·∫´u nhi√™n
            const selectedSkill = deleteSkills[randIndex];
            selectedSkills.push(selectedSkill); // Th√™m v√†o danh s√°ch ƒë√£ ch·ªçn
            deleteSkills.splice(randIndex, 1); // X√≥a kh·ªèi danh s√°ch c√°c skill c√≥ th·ªÉ ch·ªçn
        }
    }

    // ƒê·∫£m b·∫£o kh√¥ng ch·ªçn th√™m skill
    // if (selectedSkills.length > dameSkill) {
    //   selectedSkills = selectedSkills.slice(0, dameSkill);
    // }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i delete cho c√°c skill
    selectedSkills.forEach(skill => {
        skillsDelete[skill] = 1; // ƒê·∫∑t tr·∫°ng th√°i delete
        console.log("Skill ƒë√£ delete:", skill);
    });

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m cho c√°c ch·ªâ s·ªë deleteSkills b·ªã ch·ªçn
    selectedSkills.forEach(skillKeyToDelete => {
        const targetSkill = document.getElementById(skillKeyToDelete); // L·∫•y id t∆∞∆°ng ·ª©ng c·ªßa skill ƒë·ªëi ph∆∞∆°ng
        if (targetSkill) {

            // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
            let attackEffect = document.createElement('div');
            if (imgTeam === "TeamB") {
                attackEffect.classList.add('deleteEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            } else {
                attackEffect.classList.add('deleteEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            }

            const battleScreen = document.getElementById('battleScreen');
            battleScreen.appendChild(attackEffect);

            // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
            const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
            const { x: targetX, y: targetY } = getCenterRelativeToContainer(targetSkill, battleScreen);

            // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
            attackEffect.style.position = 'absolute';
            attackEffect.style.left = `${skillX}px`;
            attackEffect.style.top = `${skillY}px`;

            const effectRect = attackEffect.getBoundingClientRect();
            const effectWidth = effectRect.width;
            const effectHeight = effectRect.height;

            // T·∫°o hi·ªáu ·ª©ng bay
            const moveEffect = () => {
                const duration = 500;
                const deltaX = targetX - skillX - effectWidth / 2;
                const deltaY = targetY - skillY - effectHeight / 2;

                attackEffect.style.transition = `transform ${duration}ms ease-out`;
                attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

                const skillChild = targetSkill.querySelector('.skill');
                // Ki·ªÉm tra n·∫øu t√¨m th·∫•y ph·∫ßn t·ª≠, th√™m class 'delete'
                if (skillChild) {
                    skillChild.classList.add('delete');
                }
                // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
                setTimeout(() => {
                    attackEffect.remove();
                    attackEffect = null;
                }, duration);
            };

            // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
            setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu
        }
    });
}

//Skill tƒÉng t·ªëc 
let skillsSpeedA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
let skillsSpeedB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };

function skillSpeedUp(skillKey, dameSkill, isComp, qtyTarget) {

    const skill = document.getElementById(skillKey)
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillKey.includes('A') ? 'TeamA' : 'TeamB';

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // M·∫£ng ch·ª©a c√°c ch·ªâ s·ªë c·ªßa skillsHaste c√≥ gi√° tr·ªã l√† 0
    let hasteSkills = [];
    let skillsSpeed = isComp ? skillsSpeedA : skillsSpeedB; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p
    let skillsDelete = isComp ? skillsDeleteA : skillsDeleteB; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p

    // L·∫∑p qua ƒë·ªëi t∆∞·ª£ng skillsSpeed ƒë·ªÉ ch·ªçn c√°c skill (kh√¥ng c·∫ßn ki·ªÉm tra ƒë√£ tƒÉng t·ªëc hay ch∆∞a)
    for (let skill in skillsSpeed) {
        if (typeGameConquest.skillBattle[skill]?.ID && skillsDelete[skill] === 0 && skill !== skillKey) {
            hasteSkills.push(skill);
            console.log("Skill c√≥ th·ªÉ tƒÉng t·ªëc:", skill);
        }
    }

    // L·∫•y c√°c skill ng·∫´u nhi√™n t·ª´ hasteSkills ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã th√†nh 1
    let selectedSkills = [];
    while (selectedSkills.length < qtyTarget && hasteSkills.length > 0) { //haste v·ªõi s·ªë l∆∞·ª£ng qtyTarget
        let randIndex = Math.floor(Math.random() * hasteSkills.length); // Ch·ªçn m·ªôt index ng·∫´u nhi√™n
        const selectedSkill = hasteSkills[randIndex]; // L·∫•y key skill t·ª´ m·∫£ng hasteSkills
        selectedSkills.push(selectedSkill); // Th√™m key skill v√†o danh s√°ch ƒë√£ ch·ªçn
        hasteSkills.splice(randIndex, 1); // X√≥a skill ƒë√£ ch·ªçn kh·ªèi m·∫£ng
    }

    // In ra c√°c k·ªπ nƒÉng ƒë∆∞·ª£c ch·ªçn
    console.log("selectedSkills", selectedSkills);

    // ƒê·ªïi gi√° tr·ªã trong skillsSpeed t·∫°i c√°c skill ƒë√£ ch·ªçn t·ª´ 0 th√†nh 1, v√† tƒÉng d·∫ßn theo dameSkill
    selectedSkills.forEach(skill => {
        skillsSpeed[skill] += dameSkill; // Th√™m dameSkill v√†o skillsSpeed[skill] (tƒÉng th·ªùi gian ng·ªß)
        console.log("Skill ƒë√£ tƒÉng t·ªëc:", skill, skillsSpeed); // Ki·ªÉm tra skill tƒÉng t·ªëc
    });

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m cho c√°c ch·ªâ s·ªë HasteSkills b·ªã ch·ªçn
    selectedSkills.forEach(skillKeyToHaste => {
        const targetSkill = document.getElementById(skillKeyToHaste); // L·∫•y id t∆∞∆°ng ·ª©ng c·ªßa skill ƒë·ªëi ph∆∞∆°ng
        if (targetSkill) {

            // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
            let attackEffect = document.createElement('div');
            if (imgTeam === "TeamB") {
                attackEffect.classList.add('speedUpEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            } else {
                attackEffect.classList.add('speedUpEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            }

            const battleScreen = document.getElementById('battleScreen');
            battleScreen.appendChild(attackEffect);

            // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
            const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
            const { x: targetX, y: targetY } = getCenterRelativeToContainer(targetSkill, battleScreen);

            // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
            attackEffect.style.position = 'absolute';
            attackEffect.style.left = `${skillX}px`;
            attackEffect.style.top = `${skillY}px`;

            const effectRect = attackEffect.getBoundingClientRect();
            const effectWidth = effectRect.width;
            const effectHeight = effectRect.height;

            // T·∫°o hi·ªáu ·ª©ng bay
            const moveEffect = () => {
                const duration = 500;
                const deltaX = targetX - skillX - effectWidth / 2;
                const deltaY = targetY - skillY - effectHeight / 2;

                attackEffect.style.transition = `transform ${duration}ms ease-out`;
                attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

                // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
                setTimeout(() => {
                    attackEffect.remove();
                    attackEffect = null;
                }, duration);
            };

            // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
            setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu

            // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ hasteTimerElement th√¨ kh√¥ng t·∫°o l·∫°i
            let hasteTimerElement = targetSkill.querySelector('.hasteTimer');

            if (!hasteTimerElement) {
                // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
                hasteTimerElement = document.createElement('div');
                hasteTimerElement.classList.add('hasteTimer');

                // Style tr·ª±c ti·∫øp
                hasteTimerElement.style.position = 'absolute';
                hasteTimerElement.style.top = '40%';
                hasteTimerElement.style.left = '50%';
                hasteTimerElement.style.transform = 'translate(-50%, -50%)';
                hasteTimerElement.style.fontSize = '12px';
                hasteTimerElement.style.color = 'white';
                hasteTimerElement.style.background = 'rgba(244, 48, 48, 0.62)';
                hasteTimerElement.style.padding = '1px 3px';
                hasteTimerElement.style.borderRadius = '4px';
                hasteTimerElement.style.zIndex = '2';
                hasteTimerElement.style.pointerEvents = 'none';
                hasteTimerElement.style.fontWeight = 'bold';

                targetSkill.appendChild(hasteTimerElement);
            }
            // Tr∆∞·ªõc khi setInterval m·ªõi
            if (targetSkill.hasteIntervalId) {
                clearInterval(targetSkill.hasteIntervalId);
                targetSkill.hasteIntervalId = null;
            }

            // C·∫≠p nh·∫≠t hi·ªáu ·ª©ng v√† l∆∞u ID interval
            targetSkill.hasteIntervalId = setInterval(() => {
                const currentHaste = skillsSpeed[skillKeyToHaste];

                // Gi·∫£m d·∫ßn nh∆∞ng kh√¥ng v∆∞·ª£t qua 0
                skillsSpeed[skillKeyToHaste] = Math.max(0, currentHaste - 500);

                // C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i
                hasteTimerElement.textContent = Math.ceil(skillsSpeed[skillKeyToHaste] / 1000);

                // N·∫øu skillsSpeed ƒë√£ v·ªÅ 0, d·ª´ng hi·ªáu ·ª©ng v√† x√≥a timer
                if (skillsSpeed[skillKeyToHaste] === 0) {
                    clearInterval(targetSkill.hasteIntervalId);
                    targetSkill.hasteIntervalId = null;
                    hasteTimerElement.remove();
                    hasteTimerElement = null;
                }
            }, 500);


        }
    });
}


function skillSlow(skillKey, dameSkill, isComp, qtyTarget) {
    const skill = document.getElementById(skillKey)
    const teamAorB = skillKey.includes('A') ? 'TeamA' : 'TeamB';
    var imgTeam = skillKey.includes('A') ? 'TeamB' : 'TeamA';

    // Hi·ªáu ·ª©ng cho thanh skill 
    if (teamAorB == 'TeamA') { //b√™n A
        skill.classList.add('attackingSkillA');
        setTimeout(() => skill.classList.remove('attackingSkillA'), 500);
    } else { //b√™n B
        skill.classList.add('attackingSkillB');
        setTimeout(() => skill.classList.remove('attackingSkillB'), 500);
    }

    // M·∫£ng ch·ª©a c√°c ch·ªâ s·ªë c·ªßa skillsSlow c√≥ gi√° tr·ªã l√† 0
    let slowSkills = [];
    let skillsSpeed = isComp ? skillsSpeedB : skillsSpeedA; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p
    let skillsDelete = isComp ? skillsDeleteB : skillsDeleteA; // T·ª± ƒë·ªông ch·ªçn m·∫£ng ph√π h·ª£p

    // L·∫∑p qua ƒë·ªëi t∆∞·ª£ng skillsSpeed ƒë·ªÉ ch·ªçn c√°c skill
    for (let skill in skillsSpeed) {
        if (typeGameConquest.skillBattle[skill]?.ID && skillsDelete[skill] === 0) {
            slowSkills.push(skill);
            console.log("Skill c√≥ th·ªÉ l√†m ch·∫≠m:", skill);
        }
    }

    // L·∫•y c√°c skill ng·∫´u nhi√™n t·ª´ slowSkills ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã th√†nh 1
    let selectedSkills = [];
    while (selectedSkills.length < qtyTarget && slowSkills.length > 0) { //slow v·ªõi s·ªë l∆∞·ª£ng qtyTarget
        let randIndex = Math.floor(Math.random() * slowSkills.length); // Ch·ªçn m·ªôt index ng·∫´u nhi√™n
        const selectedSkill = slowSkills[randIndex]; // L·∫•y key skill t·ª´ m·∫£ng slowSkills
        selectedSkills.push(selectedSkill); // Th√™m key skill v√†o danh s√°ch ƒë√£ ch·ªçn
        slowSkills.splice(randIndex, 1); // X√≥a skill ƒë√£ ch·ªçn kh·ªèi m·∫£ng
    }

    // In ra c√°c k·ªπ nƒÉng ƒë∆∞·ª£c ch·ªçn
    console.log("selectedSkills", selectedSkills);

    // ƒê·ªïi gi√° tr·ªã trong skillsSpeed t·∫°i c√°c skill ƒë√£ ch·ªçn t·ª´ 0 th√†nh 1, v√† tƒÉng d·∫ßn theo dameSkill
    selectedSkills.forEach(skill => {
        skillsSpeed[skill] -= dameSkill; // Th√™m dameSkill v√†o skillsSpeed[skill] (tƒÉng th·ªùi gian ng·ªß)
        console.log("Skill ƒë√£ l√†m ch·∫≠m:", skill, skillsSpeed); // Ki·ªÉm tra skill tƒÉng t·ªëc
    });

    // T·∫°o hi·ªáu ·ª©ng m≈©i t√™n/n·∫Øm ƒë·∫•m cho c√°c ch·ªâ s·ªë SlowSkills b·ªã ch·ªçn
    selectedSkills.forEach(skillKeyToSlow => {
        const targetSkill = document.getElementById(skillKeyToSlow); // L·∫•y id t∆∞∆°ng ·ª©ng c·ªßa skill ƒë·ªëi ph∆∞∆°ng
        if (targetSkill) {

            // T·∫°o m≈©i t√™n/n·∫Øm ƒë·∫•m
            let attackEffect = document.createElement('div');
            if (imgTeam === "TeamB") {
                attackEffect.classList.add('slowEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            } else {
                attackEffect.classList.add('slowEffect'); // Class CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng hi·ªáu ·ª©ng
            }

            const battleScreen = document.getElementById('battleScreen');
            battleScreen.appendChild(attackEffect);

            // T√≠nh t·ªça ƒë·ªô trung t√¢m skill v√† target t∆∞∆°ng ƒë·ªëi v·ªõi battleScreen
            const { x: skillX, y: skillY } = getCenterRelativeToContainer(skill, battleScreen);
            const { x: targetX, y: targetY } = getCenterRelativeToContainer(targetSkill, battleScreen);

            // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu c·ªßa m≈©i t√™n
            attackEffect.style.position = 'absolute';
            attackEffect.style.left = `${skillX}px`;
            attackEffect.style.top = `${skillY}px`;

            const effectRect = attackEffect.getBoundingClientRect();
            const effectWidth = effectRect.width;
            const effectHeight = effectRect.height;

            // T·∫°o hi·ªáu ·ª©ng bay
            const moveEffect = () => {
                const duration = 500;
                const deltaX = targetX - skillX - effectWidth / 2;
                const deltaY = targetY - skillY - effectHeight / 2;

                attackEffect.style.transition = `transform ${duration}ms ease-out`;
                attackEffect.style.transform = `translate(${deltaX}px, ${deltaY}px)`;

                // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng k·∫øt th√∫c
                setTimeout(() => {
                    attackEffect.remove();
                    attackEffect = null;
                }, duration);
            };

            // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng di chuy·ªÉn
            setTimeout(moveEffect, 100); // Ch·ªù m·ªôt ch√∫t sau khi hi·ªáu ·ª©ng skill b·∫Øt ƒë·∫ßu

            // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ slowTimerElement th√¨ kh√¥ng t·∫°o l·∫°i
            let slowTimerElement = targetSkill.querySelector('.slowTimer');

            if (!slowTimerElement) {
                // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
                slowTimerElement = document.createElement('div');
                slowTimerElement.classList.add('slowTimer');

                // Style tr·ª±c ti·∫øp
                slowTimerElement.style.position = 'absolute';
                slowTimerElement.style.top = '40%';
                slowTimerElement.style.left = '50%';
                slowTimerElement.style.transform = 'translate(-50%, -50%)';
                slowTimerElement.style.fontSize = '12px';
                slowTimerElement.style.color = 'white';
                slowTimerElement.style.background = 'rgba(78, 207, 246, 0.62)';
                slowTimerElement.style.padding = '1px 3px';
                slowTimerElement.style.borderRadius = '4px';
                slowTimerElement.style.zIndex = '2';
                slowTimerElement.style.pointerEvents = 'none';
                slowTimerElement.style.fontWeight = 'bold';

                targetSkill.appendChild(slowTimerElement);
            }

            // Tr∆∞·ªõc khi setInterval m·ªõi
            if (targetSkill.slowIntervalId) {
                clearInterval(targetSkill.slowIntervalId);
                targetSkill.slowIntervalId = null;
            }

            // C·∫≠p nh·∫≠t hi·ªáu ·ª©ng v√† l∆∞u ID interval
            targetSkill.slowIntervalId = setInterval(() => {
                const currentSlow = skillsSpeed[skillKeyToSlow];

                if (currentSlow < 0) {
                    skillsSpeed[skillKeyToSlow] = Math.min(0, currentSlow + 500);
                    slowTimerElement.textContent = Math.ceil(Math.abs(skillsSpeed[skillKeyToSlow] / 1000).toFixed(0));
                } else {
                    clearInterval(targetSkill.slowIntervalId);
                    targetSkill.slowIntervalId = null;
                    slowTimerElement.remove();
                    slowTimerElement = null;
                }
            }, 500);

        }
    });
}

//H√†m hi·ªÉn th·ªã s·ªë s√°t th∆∞∆°ng ƒë√°nh th∆∞·ªùng baseAttack
function effectNumberAtBaseAttack(targetAttack, dameSkill, effect, isCrit) {
    let effectNumberDiv = document.createElement('div');

    const effectContainer = document.getElementById(targetAttack);

    // Th√™m class t√πy theo lo·∫°i hi·ªáu ·ª©ng
    if (effect === "Poison") {
        effectNumberDiv.classList.add('effect', 'poison');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho poison
    } else if (effect === "Burn") {
        effectNumberDiv.classList.add('effect', 'burn');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    } else if (effect === "Attacking") {
        effectNumberDiv.classList.add('effect', 'damage');
        effectNumberDiv.innerText = `-${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    } else if (effect === "Shield") {
        effectNumberDiv.classList.add('effect', 'shield');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    } else if (effect === "Heal") {
        effectNumberDiv.classList.add('effect', 'heal');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    }

    if (isCrit) {
        effectNumberDiv.style.backgroundImage = "url('https://cdn-icons-png.freepik.com/256/7380/7380434.png?semt=ais_hybrid')";
        effectNumberDiv.style.backgroundSize = "60px 60px";  // Ho·∫∑c "cover" t√πy thu·ªôc v√†o c√°ch b·∫°n mu·ªën h√¨nh ·∫£nh ƒë∆∞·ª£c ph√≥ng to.
        effectNumberDiv.style.backgroundRepeat = "no-repeat";  // ƒê·∫£m b·∫£o h√¨nh kh√¥ng b·ªã l·∫∑p l·∫°i.
        effectNumberDiv.style.backgroundPosition = "center";  // ƒê·∫∑t h√¨nh gi·ªØa ph·∫ßn t·ª≠.
        effectNumberDiv.style.fontSize = "40px";
    }


    // T·∫°o m·ªôt v·ªã tr√≠ ng·∫´u nhi√™n nh·ªè ƒë·ªÉ s·ªë s·∫Ω xu·∫•t hi·ªán v·ªõi hi·ªáu ·ª©ng
    const randomX = Math.random() * 80 - 40; // T·∫°o hi·ªáu ·ª©ng di chuy·ªÉn ¬±40px
    const randomY = Math.random() * 80 - 40;


    // ƒê·∫∑t v·ªã tr√≠ c·ªßa s·ªë s√°t th∆∞∆°ng t·∫°i v·ªã tr√≠ c·ªßa container
    // effectNumberDiv.style.position = 'absolute';
    effectNumberDiv.style.transform = `translate(${randomX}px, ${randomY}px)`;
    effectNumberDiv.style.fontSize = '20px';  // ƒê·∫∑t k√≠ch th∆∞·ªõc ch·ªØ
    effectNumberDiv.style.zIndex = '200';     // ƒê·∫£m b·∫£o s·ªë lu√¥n n·∫±m tr√™n c√°c ph·∫ßn t·ª≠ kh√°c
    effectNumberDiv.style.animation = 'fadeOut 1.5s ease-in-out forwards';  // Th√™m hi·ªáu ·ª©ng di chuy·ªÉn

    // Th√™m v√†o container c·ªßa effect
    effectContainer.appendChild(effectNumberDiv);

    // C·∫≠p nh·∫≠t l·∫°i thanh HP (n·∫øu c√≥)
    updateHpbar();

    // X√≥a s·ªë sau khi hi·ªáu ·ª©ng ho√†n t·∫•t
    setTimeout(() => {
        effectNumberDiv.remove();
        effectNumberDiv = null;
    }, 1500);  // Sau 1.5s, s·ªë s·∫Ω bi·∫øn m·∫•t
}


//H√†m hi·ªÉn th·ªã s·ªë s√°t th∆∞∆°ng c·ªông th√™m c·ªßa burn/poison bay s·ªë ·ªü User Main
function effectNumberAtAttack(skillId, dameSkill, effect, isCrit) {
    let effectNumberDiv = document.createElement('div');

    // X·ª≠ l√Ω t·∫•n c√¥ng
    const targetSideId = skillId.includes('A') ? 'hpBarB' : 'hpBarA';
    let effectContainerId = "";
    if (effect === "Shield" || effect === "Heal") {
        effectContainerId = targetSideId === "hpBarA" ? "localtionB" : "localtionA";
    } else {
        effectContainerId = targetSideId === "hpBarA" ? "localtionA" : "localtionB";
    }

    const effectContainer = document.getElementById(effectContainerId);

    // Th√™m class t√πy theo lo·∫°i hi·ªáu ·ª©ng
    if (effect === "Poison") {
        effectNumberDiv.classList.add('effect', 'poison');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho poison
    } else if (effect === "Burn") {
        effectNumberDiv.classList.add('effect', 'burn');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    } else if (effect === "Attacking") {
        effectNumberDiv.classList.add('effect', 'damage');
        effectNumberDiv.innerText = `-${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    } else if (effect === "Shield") {
        effectNumberDiv.classList.add('effect', 'shield');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    } else if (effect === "Heal") {
        effectNumberDiv.classList.add('effect', 'heal');
        effectNumberDiv.innerText = `+${dameSkill}`; // Hi·ªÉn th·ªã s·ªë cho burn
    }

    if (isCrit) {
        effectNumberDiv.style.backgroundImage = "url('https://cdn-icons-png.freepik.com/256/7380/7380434.png?semt=ais_hybrid')";
        effectNumberDiv.style.backgroundSize = "60px 60px";  // Ho·∫∑c "cover" t√πy thu·ªôc v√†o c√°ch b·∫°n mu·ªën h√¨nh ·∫£nh ƒë∆∞·ª£c ph√≥ng to.
        effectNumberDiv.style.backgroundRepeat = "no-repeat";  // ƒê·∫£m b·∫£o h√¨nh kh√¥ng b·ªã l·∫∑p l·∫°i.
        effectNumberDiv.style.backgroundPosition = "center";  // ƒê·∫∑t h√¨nh gi·ªØa ph·∫ßn t·ª≠.
        effectNumberDiv.style.fontSize = "40px";
    }


    // T·∫°o m·ªôt v·ªã tr√≠ ng·∫´u nhi√™n nh·ªè ƒë·ªÉ s·ªë s·∫Ω xu·∫•t hi·ªán v·ªõi hi·ªáu ·ª©ng
    const randomX = Math.random() * 80 - 40; // T·∫°o hi·ªáu ·ª©ng di chuy·ªÉn ¬±40px
    const randomY = Math.random() * 80 - 40;


    // ƒê·∫∑t v·ªã tr√≠ c·ªßa s·ªë s√°t th∆∞∆°ng t·∫°i v·ªã tr√≠ c·ªßa container
    // effectNumberDiv.style.position = 'absolute';
    effectNumberDiv.style.transform = `translate(${randomX}px, ${randomY}px)`;
    effectNumberDiv.style.fontSize = '20px';  // ƒê·∫∑t k√≠ch th∆∞·ªõc ch·ªØ
    effectNumberDiv.style.zIndex = '200';     // ƒê·∫£m b·∫£o s·ªë lu√¥n n·∫±m tr√™n c√°c ph·∫ßn t·ª≠ kh√°c
    effectNumberDiv.style.animation = 'fadeOut 1.5s ease-in-out forwards';  // Th√™m hi·ªáu ·ª©ng di chuy·ªÉn

    // Th√™m v√†o container c·ªßa effect
    effectContainer.appendChild(effectNumberDiv);

    // C·∫≠p nh·∫≠t l·∫°i thanh HP (n·∫øu c√≥)
    updateHpbar();

    // X√≥a s·ªë sau khi hi·ªáu ·ª©ng ho√†n t·∫•t
    setTimeout(() => {
        effectNumberDiv.remove();
        effectNumberDiv = null;
    }, 1500);  // Sau 1.5s, s·ªë s·∫Ω bi·∫øn m·∫•t
}


// H√†m √°p d·ª•ng s√°t th∆∞∆°ng
function applyDamage(targetSideId, dameSkill, effect) {
    const targetSide = document.querySelector(`#${targetSideId}`);
    const hpBar = targetSide.querySelector('.hpFill');
    const hpText = targetSide.querySelector('.hpText');
    const shieldText = targetSide.querySelector('.shieldText');
    const shieldBar = targetSide.querySelector('.shieldFill');

    // L·∫•y `effectContainer`
    const effectContainerId = targetSideId === "hpBarA" ? "effectContainerA" : "effectContainerB";
    const effectContainer = document.querySelector(`#${effectContainerId}`);

    let currentHp, currentShield, maxHp;

    // X√°c ƒë·ªãnh th√¥ng tin b√™n c·∫ßn √°p d·ª•ng
    if (targetSideId === "hpBarA") {
        currentHp = nowHpBattleComp;
        currentShield = nowShieldBattleComp;
        maxHp = typeGameConquest.maxHpBattleComp;
    } else if (targetSideId === "hpBarB") {
        currentHp = nowHpBattleMy;
        currentShield = nowShieldBattleMy;
        maxHp = (typeGameConquest.maxHpBattle + maxHpUp);
    }

    // X·ª≠ l√Ω khi h·ªìi m√°u
    if (effect === "Heal") {
        currentHp = Math.min(currentHp + dameSkill, maxHp); // Gi·ªõi h·∫°n HP kh√¥ng v∆∞·ª£t qu√° max HP
        if (targetSideId === "hpBarA") {
            nowPoisonBattleComp = Math.max(0, nowPoisonBattleComp - 1);
        } else {
            nowPoisonBattleMy = Math.max(0, nowPoisonBattleMy - 1);
        }
    } else if (effect === "Dame" || effect === "Burn" || effect === "overTime") {
        if (currentShield > 0) {
            // Tr·ª´ s√°t th∆∞∆°ng v√†o Shield tr∆∞·ªõc
            const remainingDamage = Math.max(dameSkill - currentShield, 0);
            currentShield = Math.max(currentShield - dameSkill, 0);
            // Tr·ª´ s√°t th∆∞∆°ng d∆∞ v√†o HP n·∫øu Shield b·ªã ph√°
            currentHp = Math.max(currentHp - remainingDamage, 0);
        } else {
            // N·∫øu kh√¥ng c√≤n Shield, tr·ª´ th·∫≥ng v√†o HP
            currentHp = Math.max(currentHp - dameSkill, 0);
        }
    } else if (effect === "Poison") {
        // X·ª≠ l√Ω khi g√¢y s√°t th∆∞∆°ng Poison
        currentHp = Math.max(currentHp - dameSkill, 0);
    } else if (effect === "Shield") {
        currentShield = Math.max(currentShield + dameSkill, 0);
        if (targetSideId === "hpBarA") {
            nowBurnBattleComp = Math.max(0, nowBurnBattleComp - 1);
        } else {
            nowBurnBattleMy = Math.max(0, nowBurnBattleMy - 1);
        }
    }

    updateHpbar();


    // C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
    if (targetSideId === "hpBarA") {
        nowHpBattleComp = currentHp;
        nowShieldBattleComp = currentShield;
    } else if (targetSideId === "hpBarB") {
        nowHpBattleMy = currentHp;
        nowShieldBattleMy = currentShield;
    }

    // Hi·ªáu ·ª©ng bay s·ªë
    if (dameSkill <= 0) {

    } else {
        effectHpBarUpdate(effectContainer, dameSkill, effect);
    }
}



// Function t·∫°o hi·ªáu ·ª©ng tr·ª´ m√°u/c·ªông m√°u hi·ªán ra khi b·ªã tr·ª´/c·ªông ·ªü thanh Hp
function effectHpBarUpdate(effectContainer, dameSkill, effect) {
    let effectDiv = document.createElement('div');
    //Th√™m hi·ªáu ·ª©ng v√†o div
    if (effect === "Burn") {
        effectDiv.classList.add('effect', 'burn')
        effectDiv.innerText = `-${dameSkill}`
    } else if (effect === "overTime") {
        effectDiv.classList.add('effect', 'damage')
        effectDiv.innerText = `-${dameSkill}`
    } else if (effect === "Poison") {
        effectDiv.classList.add('effect', 'poison')
        effectDiv.innerText = `-${dameSkill}`
    } else if (effect === "Freeze") {
        effectDiv.classList.add('effect', 'freeze')
        effectDiv.innerText = `‚ùÑ${dameSkill / 1000}s`
    }

    // T·∫°o gi√° tr·ªã ng·∫´u nhi√™n cho v·ªã tr√≠ b√™n trong .effectContainer
    const containerWidth = effectContainer.offsetWidth;
    const containerHeight = effectContainer.offsetHeight;

    // Random top v√† left trong ph·∫°m vi c·ªßa container
    const randomX = Math.random() * containerWidth; // Gi√° tr·ªã ng·∫´u nhi√™n trong ph·∫°m vi width c·ªßa container
    const randomY = Math.random() * containerHeight; // Gi√° tr·ªã ng·∫´u nhi√™n trong ph·∫°m vi height c·ªßa container
    const randomTop = randomY - (effectDiv.offsetHeight / 2); // ƒêi·ªÅu ch·ªânh l·∫°i v·ªã tr√≠ top ƒë·ªÉ cƒÉn gi·ªØa
    const randomLeft = randomX - (effectDiv.offsetWidth / 2); // ƒêi·ªÅu ch·ªânh l·∫°i v·ªã tr√≠ left ƒë·ªÉ cƒÉn gi·ªØa

    // G√°n tr·ª±c ti·∫øp c√°c gi√° tr·ªã random v√†o style c·ªßa effect
    effectDiv.style.top = `${randomTop}px`;
    effectDiv.style.left = `${randomLeft}px`;
    // effectDiv.style.setProperty('animation', 'flyRandom 1s ease-in-out');

    const maxOffset = 60; // T·ªëi ƒëa ¬±30px
    const randomXe = (Math.random() - 0.5) * maxOffset;
    const randomYe = (Math.random() - 0.5) * maxOffset;

    // G√°n gi√° tr·ªã ng·∫´u nhi√™n v√†o style
    effectDiv.style.setProperty('--end-x', `${randomXe}px`);
    effectDiv.style.setProperty('--end-y', `${randomYe}px`);
    effectDiv.style.animation = 'flyRandom 1.5s ease-in-out forwards';

    // Th√™m v√†o container
    effectContainer.appendChild(effectDiv);
    updateHpbar();
    // X√≥a sau 2s
    setTimeout(() => {
        effectDiv.remove();
        effectDiv = null;
    }, 2000);
}


function applyAtkEffect(teamAtk) {
    let teamElement = document.getElementById(teamAtk); // 'TeamA' ho·∫∑c 'TeamB'
    let teamHit = teamAtk === 'TeamA' ? 'TeamB' : 'TeamA';

    //Hi·ªáu ·ª©ng cho b√™n b·ªã t·∫•n c√¥ng
    if (teamHit == 'TeamA') {
        document.getElementById(teamHit).classList.add('hit');
    } else {
        document.getElementById(teamHit).classList.add('hit');
    }

    // Sau m·ªôt kho·∫£ng th·ªùi gian (v√≠ d·ª• 0.3s), lo·∫°i b·ªè hi·ªáu ·ª©ng
    setTimeout(function () {
        if (teamHit == 'TeamA') {
            document.getElementById(teamHit).classList.remove('hit');
        } else {
            document.getElementById(teamHit).classList.remove('hit');
        }
    }, 300);

}

function createInfo5mon() {
    document.querySelectorAll(".skill").forEach((skill) => {
        if (!skill.dataset.hasEvent) {
            skill.addEventListener("click", function (event) {
                // Ng·ª´ng s·ª± ki·ªán click lan r·ªông
                event.stopPropagation();

                // L·∫•y ID skill
                const skillId = skill.parentElement?.id || "";
                const slotSkill = skill.parentElement?.parentElement?.id || "";

                const popup = document.getElementById("popupSTT5MonInBattle");
                const overlay = document.getElementById("popupOverlay");

                let skillInfo = null;
                console.log("skillId:", skillId);
                console.log("slotSkill:", slotSkill);

                if (slotSkill === "battleShop" && typeGameConquest.battlePetInShop?.[skillId]) {
                    skillInfo = typeGameConquest.battlePetInShop[skillId];
                } else if (slotSkill === "battleInventory" && typeGameConquest.battlePetInInventory?.[skillId]) {
                    skillInfo = typeGameConquest.battlePetInInventory[skillId];
                } else if ((slotSkill === "skillBarB" || slotSkill === "skillBarA") && typeGameConquest.skillBattle?.[skillId]) {
                    skillInfo = typeGameConquest.skillBattle[skillId];
                    console.log("v√†o ƒë√¢y:", skillInfo);
                } else if (slotSkill === "skillBarBfn") {
                    skillInfo = skillFinalGame[skillId];
                } else if (slotSkill === "slotGacha") {
                    skillInfo = randomPet[skillId];
                }

                // Hi·ªÉn th·ªã th√¥ng tin skill
                for (let k = 1; k <= 4; k++) {
                    document.getElementById(`popupSTT5MonInBattleLV${k}`).style.background = "firebrick";
                }

                document.getElementById(`popupSTT5MonInBattleLV${skillInfo.LEVEL}`).style.background = "rebeccapurple";

                setupPopupInfo5MonInBattle(skillInfo, skillInfo.LEVEL);

                for (let s = 1; s <= 4; s++) {
                    const el = document.getElementById(`popupSTT5MonInBattleLV${s}`);
                    if (!el) continue;
                    el.onclick = () => {
                        setupPopupInfo5MonInBattle(skillInfo, s);
                        for (let p = 1; p <= 4; p++) {
                            document.getElementById(`popupSTT5MonInBattleLV${p}`).style.background = "firebrick";
                        }
                        
                        el.style.background = "rebeccapurple";

                    };
                }


                // Hi·ªÉn th·ªã popup
                popup.style.display = "flex";
                overlay.style.display = "flex";

                // ƒê√≥ng popup khi b·∫•m n·ªÅn m·ªù (g√°n s·ª± ki·ªán m·ªôt l·∫ßn duy nh·∫•t)
                if (!overlay.dataset.hasEvent) {
                    overlay.addEventListener("click", () => {
                        popup.style.display = "none";
                        overlay.style.display = "none";
                    });
                    overlay.dataset.hasEvent = "true";
                }
            });

            // ƒê√°nh d·∫•u ƒë√£ g√°n s·ª± ki·ªán
            skill.dataset.hasEvent = "true";
        }
    });
}


//T·∫°o popup hi·ªÉn th·ªã th√¥ng tin user/comp
let popupVisible = false; // Bi·∫øn theo d√µi tr·∫°ng th√°i hi·ªÉn th·ªã c·ªßa popup

function showPopupInfo(element, type) {
    const popup = document.getElementById("popupInfoMyOrComp");
    const nameElement = document.getElementById("popupInfoName");
    const desc1Element = document.getElementById("popupInfoDesc1");
    const desc2Element = document.getElementById("popupInfoDesc2");

    // D·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã (C√≥ th·ªÉ l·∫•y t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu kh√°c nhau)
    let name = '';
    let desc1 = '';
    let desc2 = '';

    desc1 += `<span style="color: black; font-weight: bold; font-size: 12px;">Th√¥ng tin nh√¢n v·∫≠t:</span>`


    if (type === "user") {

        for (let i = 0; i < allCharacter.length; i++) {
            if (allCharacter[i].id === typeGameConquest.selectCharacterBattle) {
                if (allCharacter[i].hpMax > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:green">10Hp</a> sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upDame > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:red">${allCharacter[i].upDame} s√°t th∆∞∆°ng</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upHeal > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:lime">${allCharacter[i].upHeal} ch·ªâ s·ªë h·ªìi Hp</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upShield > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:blue">${allCharacter[i].upShield} ch·ªâ s·ªë t·∫°o gi√°p</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upBurn > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:orange">${allCharacter[i].upBurn} s√°t th∆∞∆°ng ƒë·ªët</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upPoison > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:purple">${allCharacter[i].upPoison} g√¢y ƒë·ªôc</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upCrit > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:red">${allCharacter[i].upCrit} ch·ªâ s·ªë ch√≠ m·∫°ng</a> 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upMulti > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:purple">${allCharacter[i].upMulti} li√™n k√≠ch</a> cho m·ªôt 5mon sau m·ªói 3 v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upCooldown > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:blue">${allCharacter[i].upCooldown / 1000}s t·ªëc ƒë·ªô</a> c·ªßa b·∫£n th√¢n sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.upCooldownB / 1000}s)</span>`;
                }
                if (allCharacter[i].slow > 0) {
                    desc1 += `<span style="font-size:10px;">Gi·∫£m <a style="color:blue">${allCharacter[i].slow / 1000}s t·ªëc ƒë·ªô</a> c·ªßa ƒë·ªëi th·ªß sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.slowB / 1000}s)</span>`;
                }
                if (allCharacter[i].dameCrit > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:red">${allCharacter[i].dameCrit}% s√°t th∆∞∆°ng ch√≠ m·∫°ng</a> sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.dameCritB}%)</span>`;
                }
            }
        }

        let pointRankIndex = ""
        if (infoStartGame.typeGame === "Conquest") {
            pointRankIndex = pointRank.typeGameConquest
        } else if (infoStartGame.typeGame === "Solo5Mon") {
            pointRankIndex = pointRank.typeGameSolo5Mon
        } else if (infoStartGame.typeGame === "Guess") {
            pointRankIndex = pointRank.typeGameGuess
        }

        name = `<span style="display: flex; justify-content: space-between; flex-direction: row; align-items: center;">
            <a>${nameUser}</a>
            <a style="font-size:11px;">[ƒêi·ªÉm x·∫øp h·∫°ng: ${pointRankIndex}]<span style="color: red;"> [Top: 1]</span></a>
        </span>
        <span style="color: #4504b3; font-weight: bold; font-size: 12px;">[V√≤ng ƒë·∫•u hi·ªán t·∫°i: <span style="color: red;">${infoStartGame.roundGame}</span>] [ƒêi·ªÉm c·∫£ tr·∫≠n: <span style="color: red;">${typeGameConquest.pointBattle} ƒëi·ªÉm</span>]</span>
        <span style="color: #4504b3; font-weight: bold; font-size: 12px;">
        [N·∫øu th·∫Øng: <span style="color: red;">+${((1 * infoStartGame.roundGame) + infoStartGame.winStreak) * modeGamePoint} ƒëi·ªÉm</span>]
        [N·∫øu thua: <span style="color: red;">-${1 * infoStartGame.roundGame} ƒëi·ªÉm</span>]</span>`;
        desc2 += `<a style="font-size:11px;">(ƒêi·ªÉm c·∫£ tr·∫≠n ch·ªâ ƒë∆∞·ª£c c·ªông v√†o ƒëi·ªÉm x·∫øp h·∫°ng khi b·∫°n tho√°t tr·∫≠n ƒë·∫•u)</a>`;  // N·ªëi th√™m n·ªôi dung v√†o desc2
        //+++
    } else if (type === "comp") {
        for (let i = 0; i < allCharacter.length; i++) {
            if (allCharacter[i].id === typeGameConquest.selectCharacterComp) {
                if (allCharacter[i].hpMax > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:green">10Hp</a> sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upDame > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:red">${allCharacter[i].upDame} s√°t th∆∞∆°ng</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upHeal > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:lime">${allCharacter[i].upHeal} ch·ªâ s·ªë h·ªìi Hp</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upShield > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:blue">${allCharacter[i].upShield} ch·ªâ s·ªë t·∫°o gi√°p</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upBurn > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:orange">${allCharacter[i].upBurn} s√°t th∆∞∆°ng ƒë·ªët</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upPoison > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:purple">${allCharacter[i].upPoison} g√¢y ƒë·ªôc</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upCrit > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:red">${allCharacter[i].upCrit} ch·ªâ s·ªë ch√≠ m·∫°ng</a> 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upMulti > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:purple">${allCharacter[i].upMulti} li√™n k√≠ch</a> cho m·ªôt 5mon sau m·ªói 3 v√≤ng ƒë·∫•u</span>`;
                }
                if (allCharacter[i].upCooldown > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:blue">${allCharacter[i].upCooldown / 1000}s t·ªëc ƒë·ªô</a> c·ªßa b·∫£n th√¢n sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.upCooldownA / 1000}s)</span>`;
                }
                if (allCharacter[i].slow > 0) {
                    desc1 += `<span style="font-size:10px;">Gi·∫£m <a style="color:blue">${allCharacter[i].slow / 1000}s t·ªëc ƒë·ªô</a> c·ªßa ƒë·ªëi th·ªß sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.slowA / 1000}s)</span>`;
                }
                if (allCharacter[i].dameCrit > 0) {
                    desc1 += `<span style="font-size:10px;">TƒÉng <a style="color:red">${allCharacter[i].dameCrit}% s√°t th∆∞∆°ng ch√≠ m·∫°ng</a> sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.dameCritA}%)</span>`;
                }
            }
        }
        name = `<span style="display: flex; justify-content: space-between; flex-direction: row;">
            <a>${typeGameConquest.nameComp}</a>
            <a style="font-size:11px;">[ƒêi·ªÉm x·∫øp h·∫°ng: ${pointRankComp}]<span style="color: red;"> [Rank: 1]</span></a>
        </span>
        <span style="color: #4504b3; font-weight: bold; font-size: 12px;">[V√≤ng ƒë·∫•u hi·ªán t·∫°i: <span style="color: red;">${infoStartGame.roundGame}</span>]</span>
        <span style="color: #4504b3; font-weight: bold; font-size: 12px;">[N·∫øu th·∫Øng: <span style="color: red;">+${((1 * infoStartGame.roundGame) + infoStartGame.winStreak) * modeGamePoint} ƒëi·ªÉm</span>]
        [N·∫øu thua: <span style="color: red;">-${1 * infoStartGame.roundGame} ƒëi·ªÉm</span>]</span>`;

        desc2 += `<a style="font-size:9px;">(ƒêi·ªÉm c·∫£ tr·∫≠n ch·ªâ ƒë∆∞·ª£c c·ªông v√†o ƒëi·ªÉm x·∫øp h·∫°ng khi b·∫°n tho√°t tr·∫≠n ƒë·∫•u)</a>`;  // N·ªëi th√™m n·ªôi dung v√†o desc2
    }


    // C·∫≠p nh·∫≠t th√¥ng tin v√†o popup
    nameElement.innerHTML = name;
    desc1Element.innerHTML = desc1;
    desc2Element.innerHTML = desc2;

    // T√≠nh to√°n v·ªã tr√≠ popup
    const rect = element.getBoundingClientRect();

    // T·∫°m th·ªùi hi·ªÉn th·ªã popup ƒë·ªÉ l·∫•y chi·ªÅu cao ch√≠nh x√°c
    popup.style.display = 'flex';

    // L·∫•y chi·ªÅu cao c·ªßa popup sau khi n√≥ ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã
    const popupHeight = popup.offsetHeight; // ho·∫∑c popup.clientHeight

    // ƒê·∫∑t v·ªã tr√≠ popup d·ª±a tr√™n element ƒë∆∞·ª£c click
    if (type === "user") {
        // N·∫øu click v√†o User, hi·ªÉn th·ªã tr√™n ·∫£nh ng∆∞·ªùi ch∆°i
        popup.style.top = rect.top - popupHeight - 10 + "px";  // ƒê·∫∑t tr√™n element
        popup.style.left = rect.left + "px";  // ƒê·∫∑t b√™n tr√°i c·ªßa element
    } else if (type === "comp") {
        // N·∫øu click v√†o Comp, hi·ªÉn th·ªã d∆∞·ªõi ·∫£nh ƒë·ªëi th·ªß
        popup.style.top = rect.bottom + 10 + "px";  // ƒê·∫∑t d∆∞·ªõi element
        popup.style.left = rect.left + "px";  // ƒê·∫∑t b√™n tr√°i c·ªßa element
    }

    // Sau khi t√≠nh to√°n xong, ·∫©n popup tr·ªü l·∫°i (ƒë·ªÉ kh√¥ng l√†m ·∫£nh h∆∞·ªüng layout)
    popup.style.display = 'none';

    // N·∫øu popup ƒë√£ hi·ªÉn th·ªã, ƒë√≥ng n√≥
    if (popupVisible) {
        popup.style.display = "none";
        popupVisible = false; // ƒê·∫∑t tr·∫°ng th√°i popup v·ªÅ false
    } else {
        // N·∫øu popup ch∆∞a hi·ªÉn th·ªã, hi·ªÉn th·ªã n√≥
        popup.style.display = "flex";
        popupVisible = true; // ƒê·∫∑t tr·∫°ng th√°i popup v·ªÅ true
    }
}

// L·∫Øng nghe s·ª± ki·ªán click tr√™n c√°c th·∫ª
document.getElementById("imageContainerUser").addEventListener("click", function (event) {
    showPopupInfo(this, "user");  // Hi·ªÉn th·ªã th√¥ng tin cho ng∆∞·ªùi ch∆°i
    event.stopPropagation(); // Ng·ª´ng s·ª± ki·ªán truy·ªÅn l√™n parent ƒë·ªÉ tr√°nh ƒë√≥ng popup khi click v√†o c√°c ph·∫ßn t·ª≠ con
});

document.getElementById("imageContainerComp").addEventListener("click", function (event) {
    showPopupInfo(this, "comp");  // Hi·ªÉn th·ªã th√¥ng tin cho ƒë·ªëi th·ªß
    event.stopPropagation(); // Ng·ª´ng s·ª± ki·ªán truy·ªÅn l√™n parent ƒë·ªÉ tr√°nh ƒë√≥ng popup khi click v√†o c√°c ph·∫ßn t·ª≠ con
});

// L·∫Øng nghe s·ª± ki·ªán click b·∫•t k·ª≥ ƒë·ªÉ ƒë√≥ng popup
document.addEventListener('click', function () {
    const popup = document.getElementById('popupInfoMyOrComp');
    if (popup.style.display === 'flex') {
        popup.style.display = 'none';
    }
});

// L·∫Øng nghe s·ª± ki·ªán click to√†n b·ªô trang ƒë·ªÉ ·∫©n popup khi click ·ªü b·∫•t k·ª≥ ƒë√¢u ngo√†i popup
document.addEventListener('click', function () {
    const popup = document.getElementById('popupSTT');
    if (popup.style.display === 'flex') {
        popup.style.display = 'none';
    }
});

//T·∫°o hi·ªáu ·ª©ng skill theo level
function highlightSkillLevel() {
    document.querySelectorAll('.skill').forEach(skillElement => {
        let skillData;
        let skillKey = skillElement.parentElement.id;

        console.log("skillKey l√† ", skillKey)

        if (skillElement.parentElement.parentElement.id === 'battleShop') {

        }

        if (skillElement.parentElement.parentElement.id === 'battleInventory') {
            skillData = typeGameConquest.battlePetInInventory[skillKey];
        }

        if (skillElement.parentElement.parentElement.id === 'skillBarB') {
            skillData = typeGameConquest.skillBattle[skillKey];
        }

        console.log("skillData l√† ", skillData)

        // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c d·ªØ li·ªáu => b·ªè qua
        if (!skillData) return;

        // T√¨m div con c√≥ class levelSkillText v√† starSkillText
        const levelTextDiv = skillElement.querySelector('.levelSkillText');
        const starTextDiv = skillElement.querySelector('.starSkillText');

        levelTextDiv.innerText = skillData.LEVEL;
        starTextDiv.innerText = skillData.PRICESELL + skillData.PRICE; // ∆Øu ti√™n PRICESELL n·∫øu c√≥

        // T√¥ m√†u theo level
        const levelSkillColorDiv = skillElement.querySelector('.levelSkillColor');

        if (levelSkillColorDiv) {
            switch (skillData.LEVEL) {
                case 1:
                    levelSkillColorDiv.style.color = "#531515";
                    break;
                case 2:
                    levelSkillColorDiv.style.color = "#8c0b0b";
                    break;
                case 3:
                    levelSkillColorDiv.style.color = "#c00d0d";
                    break;
                case 4:
                    levelSkillColorDiv.style.color = "red";
                    break;
            }
        }
    });
}

//H√†m ki·ªÉm tra c√°c th·∫ª trong battle c√≥ th·ªÉ update level ƒë∆∞·ª£c kh√¥ng
function checkUpdateLevel() {
    const allSkillDivs = document.querySelectorAll('.skill');

    // üîÅ RESET: Xo√° t·∫•t c·∫£ hi·ªáu ·ª©ng c≈© v√† icon n√¢ng c·∫•p
    document.querySelectorAll('.updateSkillLevel').forEach(div => {
        div.classList.remove('updateSkillLevel');
    });

    document.querySelectorAll('.upgrade-icon').forEach(icon => {
        icon.remove();
    });

    // üß≠ Ngu·ªìn d·ªØ li·ªáu
    let allSources = [
        { dom: document.getElementById('skillBarB'), data: typeGameConquest.battlePetUseSlotRound },
        { dom: document.getElementById('battleInventory'), data: typeGameConquest.battlePetInInventory },
        { dom: document.getElementById('battleShop'), data: typeGameConquest.battlePetInShop }
    ];

    if (infoStartGame.stepGame > 1) {
        allSources = [
            { dom: document.getElementById('skillBarB'), data: typeGameConquest.battlePetUseSlotRound },
            { dom: document.getElementById('battleInventory'), data: typeGameConquest.battlePetInInventory },
        ];
    } else {
        allSources = [
            { dom: document.getElementById('skillBarB'), data: typeGameConquest.battlePetUseSlotRound },
            { dom: document.getElementById('battleInventory'), data: typeGameConquest.battlePetInInventory },
            { dom: document.getElementById('battleShop'), data: typeGameConquest.battlePetInShop }
        ];
    }


    allSkillDivs.forEach(skillDiv => {
        const parentWithId = skillDiv.parentElement;
        const thisSkill = skillDiv
        if (!parentWithId) return;
        const parentId = parentWithId.id;

        // T√¨m ngu·ªìn ch·ª©a skill n√†y
        let currentData = null;
        for (const source of allSources) {
            if (source.dom.contains(skillDiv)) {
                currentData = source.data;
                break;
            }
        }

        if (!currentData || !currentData[parentId]) return;

        const currentSkill = currentData[parentId];
        if (!currentSkill || currentSkill.ID === "") return;

        // So s√°nh v·ªõi t·∫•t c·∫£ ngu·ªìn c√≤n l·∫°i
        for (const otherSource of allSources) {

            for (const [otherKey, otherSkill] of Object.entries(otherSource.data)) {
                if (!otherSkill || otherSkill.ID === "") continue;

                //B·ªè qua ch√≠nh m√¨nh
                if (currentData === otherSource.data && parentId === otherKey) continue;

                if (
                    otherSkill.ID === currentSkill.ID &&
                    otherSkill.LEVEL === currentSkill.LEVEL &&
                    otherSkill !== currentSkill
                ) {

                    // ‚úÖ Th√™m hi·ªáu ·ª©ng v√†o div cha
                    thisSkill.classList.add('updateSkillLevel');

                    if (!parentWithId.querySelector('.upgrade-icon')) {
                        const upgradeIcon = document.createElement('span');
                        upgradeIcon.className = 'upgrade-icon';
                        upgradeIcon.textContent = '^';
                        parentWithId.appendChild(upgradeIcon);
                    }
                }
            }
        }
    });
}


//Load event cho skill
function loadEventSkillBattle() {
    const skills = document.querySelectorAll(".skill");
    const slots = document.querySelectorAll(".slotSkill");
    const shopSell = document.getElementById("shopSell"); // ID c·ªßa v√πng b√°n skill

    let dragImage; // Khai b√°o dragImage ·ªü ph·∫°m vi r·ªông h∆°n

    skills.forEach(skill => {
        skill.addEventListener("dragstart", (e) => {
            e.dataTransfer.setData("text/plain", skill.id);
            skill.classList.add("dragging");

            // T·∫°o drag image t·∫°m th·ªùi
            dragImage = skill.cloneNode(true); // Sao ch√©p ph·∫ßn t·ª≠ skill
            dragImage.style.position = "absolute";
            dragImage.style.top = "-9999px"; // ƒê·∫©y ra kh·ªèi m√†n h√¨nh
            dragImage.style.left = "-9999px";
            dragImage.style.width = "80px";
            dragImage.style.height = "105px";
            dragImage.style.opacity = "1"; // L√†m m·ªù h√¨nh ·∫£nh k√©o


            document.body.appendChild(dragImage); // Th√™m v√†o body ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng b·ªë c·ª•c

            // G√°n drag image v√†o s·ª± ki·ªán
            e.dataTransfer.setDragImage(dragImage, skill.offsetWidth / 2, skill.offsetHeight / 2);

            const popup = document.getElementById('popupSTT');
            popup.style.display = 'none';

            // slots.forEach(slot => {
            //   if (!slot.classList.contains("occupied")) {
            //     slot.classList.add("highlight");
            //   }
            // });

            if (skill.parentElement.parentElement.id !== "battleShop") {
                shopSell.style.background = "#fd1239"
            }

            //T·∫°o highligt n√¢ng c·∫•p
            if (skill.parentElement.parentElement.id === "battleShop") { // N·∫±m trong shop
                // Ph√°t s√°ng ·ªü trong t·ªß ƒë·ªì
                for (let o in typeGameConquest.battlePetInInventory) {
                    let element = document.getElementById(o); // T√¨m ph·∫ßn t·ª≠ v·ªõi ID l√† o
                    if (element && o !== skill.parentElement.id) {
                        if (
                            typeGameConquest.battlePetInShop[skill.parentElement.id].ID === typeGameConquest.battlePetInInventory[o].ID &&
                            typeGameConquest.battlePetInShop[skill.parentElement.id].LEVEL === typeGameConquest.battlePetInInventory[o].LEVEL
                            && typeGameConquest.battlePetInInventory[o].LEVEL < 4) {
                            element.classList.add("updateSkill");
                        } else if (!element.classList.contains("occupied")) {
                            element.classList.add("highlight");
                        }
                    }
                }
                // //Ph√°t s√°ng ·ªü trong slot
                for (let o in typeGameConquest.battlePetUseSlotRound) {
                    let element = document.getElementById(o); // T√¨m ph·∫ßn t·ª≠ v·ªõi ID l√† o
                    if (element && o !== skill.parentElement.id) {
                        if (
                            typeGameConquest.battlePetInShop[skill.parentElement.id].ID === typeGameConquest.battlePetUseSlotRound[o].ID &&
                            typeGameConquest.battlePetInShop[skill.parentElement.id].LEVEL === typeGameConquest.battlePetUseSlotRound[o].LEVEL
                            && typeGameConquest.battlePetUseSlotRound[o].LEVEL < 4) {
                            element.classList.add("updateSkill");
                        } else if (!element.classList.contains("occupied")) {
                            element.classList.add("highlight");
                        }
                    }
                }
            } else if (skill.parentElement.parentElement.id === "battleInventory") { //N·∫±m trong t·ªß ƒë·ªì
                //Ph√°t s√°ng ·ªü trong t·ªß ƒë·ªì 
                for (let o in typeGameConquest.battlePetInInventory) {
                    let element = document.getElementById(o); // T√¨m ph·∫ßn t·ª≠ v·ªõi ID l√† o
                    if (element && o !== skill.parentElement.id) {
                        if (
                            typeGameConquest.battlePetInInventory[skill.parentElement.id].ID === typeGameConquest.battlePetInInventory[o].ID &&
                            typeGameConquest.battlePetInInventory[skill.parentElement.id].LEVEL === typeGameConquest.battlePetInInventory[o].LEVEL
                            && typeGameConquest.battlePetInInventory[o].LEVEL < 4) {
                            element.classList.add("updateSkill");
                        } else if (!element.classList.contains("occupied")) {
                            element.classList.add("highlight");
                        }
                    }
                }
                // //Ph√°t s√°ng ·ªü trong slot
                for (let o in typeGameConquest.battlePetUseSlotRound) {
                    let element = document.getElementById(o); // T√¨m ph·∫ßn t·ª≠ v·ªõi ID l√† o
                    if (element && o !== skill.parentElement.id) {
                        if (
                            typeGameConquest.battlePetInInventory[skill.parentElement.id].ID === typeGameConquest.battlePetUseSlotRound[o].ID &&
                            typeGameConquest.battlePetInInventory[skill.parentElement.id].LEVEL === typeGameConquest.battlePetUseSlotRound[o].LEVEL
                            && typeGameConquest.battlePetUseSlotRound[o].LEVEL < 4) {
                            element.classList.add("updateSkill");
                        } else if (!element.classList.contains("occupied")) {
                            element.classList.add("highlight");
                        }
                    }
                }


            } else if (skill.parentElement.parentElement.id === "skillBarB") {//N·∫±m trong slotskill
                //Ph√°t s√°ng ·ªü trong t·ªß ƒë·ªì 
                for (let o in typeGameConquest.battlePetInInventory) {
                    let element = document.getElementById(o); // T√¨m ph·∫ßn t·ª≠ v·ªõi ID l√† o
                    if (element && o !== skill.parentElement.id) {
                        if (
                            typeGameConquest.battlePetUseSlotRound[skill.parentElement.id].ID === typeGameConquest.battlePetInInventory[o].ID &&
                            typeGameConquest.battlePetUseSlotRound[skill.parentElement.id].LEVEL === typeGameConquest.battlePetInInventory[o].LEVEL
                            && typeGameConquest.battlePetInInventory[o].LEVEL < 4) {
                            element.classList.add("updateSkill");
                        } else if (!element.classList.contains("occupied")) {
                            element.classList.add("highlight");
                        }
                    }
                }
                // //Ph√°t s√°ng ·ªü trong slot
                for (let o in typeGameConquest.battlePetUseSlotRound) {
                    let element = document.getElementById(o); // T√¨m ph·∫ßn t·ª≠ v·ªõi ID l√† o
                    if (element && o !== skill.parentElement.id) {
                        if (
                            typeGameConquest.battlePetUseSlotRound[skill.parentElement.id].ID === typeGameConquest.battlePetUseSlotRound[o].ID &&
                            typeGameConquest.battlePetUseSlotRound[skill.parentElement.id].LEVEL === typeGameConquest.battlePetUseSlotRound[o].LEVEL
                            && typeGameConquest.battlePetUseSlotRound[o].LEVEL < 4) {
                            element.classList.add("updateSkill");
                        } else if (!element.classList.contains("occupied")) {
                            element.classList.add("highlight");
                        }
                    }
                }
            }

        });

        skill.addEventListener("dragend", () => {
            // X√≥a drag image kh·ªèi DOM
            if (dragImage) {
                document.body.removeChild(dragImage);
                dragImage = null; // Reset bi·∫øn ƒë·ªÉ tr√°nh l·ªói
            }
            skill.classList.remove("dragging");
            slots.forEach(slot => slot.classList.remove("highlight"));
            slots.forEach(slot => slot.classList.remove("updateSkill"));
            shopSell.style.background = "#f86e85"
        });
    });
}

//Load event cho c√°c slot trong game
function loadEventSlotBattle() {
    const slots = document.querySelectorAll(".slotSkill");
    const shopSell = document.getElementById("shopSell"); // ID c·ªßa v√πng b√°n skill

    //S·ª± ki·ªán k√©o skill v√†o slot skill
    const allSlotSkillsB = [
        ...document.querySelectorAll("#skill1B"),
        ...document.querySelectorAll("#skill2B"),
        ...document.querySelectorAll("#skill3B"),
        ...document.querySelectorAll("#skill4B"),
        ...document.querySelectorAll("#skill5B"),
        ...document.querySelectorAll("#skill6B"),
        ...document.querySelectorAll("#skill7B"),
        ...document.querySelectorAll("#skill8B"),
        ...document.querySelectorAll("#skill9B"),
    ];

    // S·ª≠ d·ª•ng forEach tr√™n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ ƒë√£ g·ªôp
    allSlotSkillsB.forEach(slot => {
        slot.addEventListener("dragover", (e) => {
            e.preventDefault(); // Cho ph√©p k√©o v√†o
        });

        slot.addEventListener("dragenter", () => {
            if (!slot.classList.contains("occupied")) {
                slot.style.backgroundColor = "#e8f5e9"; // L√†m n·ªïi b·∫≠t slot
            }
        });

        slot.addEventListener("dragleave", () => {
            if (!slot.classList.contains("occupied")) {
                slot.style.backgroundColor = ""; // ƒê·∫∑t l·∫°i m√†u n·ªÅn khi r·ªùi kh·ªèi slot
            }
        });


        slot.addEventListener("drop", (e) => {
            e.preventDefault();
            const skillId = e.dataTransfer.getData("text/plain");
            let skill = document.getElementById(skillId);


            const parentSlot = skill.parentElement;
            //L·∫•y th√¥ng tin c·ªßa skill target ƒë·ªÉ n√¢ng c·∫•p

            // Ki·ªÉm tra n·∫øu skill ƒë∆∞·ª£c k√©o v√† th·∫£ l·∫°i ƒë√∫ng slot c≈©
            if (slot === parentSlot) {
                return;
            }

            // K√©o t·ª´ shop xu·ªëng
            if (parentSlot.parentElement.id == "battleShop") {
                //Ki·ªÉm tra n·∫øu kh√¥ng ƒë·ªß star
                if (typeGameConquest.starUser < typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE) {
                    messageOpen(`Kh√¥ng ƒë·ªß <i class="fa-solid fa-splotch"></i>, c·∫ßn c√≥ ${typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE} <i class="fa-solid fa-splotch"></i>`)
                    slot.style.backgroundColor = ""
                    return;
                }

                if (slot.classList.contains("occupied")) { // Ki·ªÉm tra slot c√≥ skill ch∆∞a
                    //Ki·ªÉm tra xem c√≥ ph·∫£i l√† ƒë√° c∆∞·ªùng h√≥a kh√¥ng
                    if (typeGameConquest.battlePetInShop[skill.parentElement.id].EFFECT.includes("stoneUpMulti")) {
                        typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[2] += 1
                        typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE
                        typeGameConquest.skillBattle[slot.id].PRICESELL = typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL

                        typeGameConquest.starUser -= typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInShop
                        typeGameConquest.battlePetInShop[skill.parentElement.id] = defaultSTT5Mon;
                        let index = skill.parentElement.id.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
                        let skillLock = `LockBattleShop${index}`;
                        LockBattleShop[skillLock] = false;
                        document.getElementById(skillLock).style.color = 'rgb(255 161 115)'

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        //N√¢ng data-skill LEVEL l√™n ƒë·ªÉ t·∫°o highlight
                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill

                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                        typeGameConquest.selectSkillShop += 1
                        document.getElementById("starUser").innerText = typeGameConquest.starUser;
                    } else if (
                        (typeGameConquest.battlePetInShop[skill.parentElement.id].ID === typeGameConquest.skillBattle[slot.id].ID 
                        && Number(typeGameConquest.battlePetInShop[skill.parentElement.id].LEVEL) === Number(typeGameConquest.skillBattle[slot.id].LEVEL) 
                        && Number(typeGameConquest.skillBattle[slot.id].LEVEL) < 4)
                        ||
                        typeGameConquest.battlePetInShop[skill.parentElement.id].EFFECT.includes("stoneUpLevel")
                        ) {

                        //N√¢ng c·∫•p
                        typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL += 1
                        
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.STR += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.STR)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.DEF += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.DEF)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.INT += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.INT)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.AGI += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.AGI)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.LUK += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.LUK)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.HP += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.HP)
                        
                        let power5MonUpdate = update5MonBattle(typeGameConquest.battlePetUseSlotRound[slot.id])

                        typeGameConquest.battlePetUseSlotRound[slot.id].DAME[0] = power5MonUpdate.dame
                        typeGameConquest.battlePetUseSlotRound[slot.id].DEF[0] = power5MonUpdate.def
                        typeGameConquest.battlePetUseSlotRound[slot.id].HEAL[0] = power5MonUpdate.heal
                        typeGameConquest.battlePetUseSlotRound[slot.id].SHIELD[0] = power5MonUpdate.shield
                        typeGameConquest.battlePetUseSlotRound[slot.id].BURN[0] = power5MonUpdate.burn
                        typeGameConquest.battlePetUseSlotRound[slot.id].POISON[0] = power5MonUpdate.poison
                        typeGameConquest.battlePetUseSlotRound[slot.id].CRIT[0] = power5MonUpdate.crit
                        typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[0] = power5MonUpdate.cooldown
                        typeGameConquest.skillBattle[slot.id].LEVEL = typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL
                        typeGameConquest.skillBattle[slot.id].DAME[0] = typeGameConquest.battlePetUseSlotRound[slot.id].DAME[0]
                        typeGameConquest.skillBattle[slot.id].DEF[0] = typeGameConquest.battlePetUseSlotRound[slot.id].DEF[0]
                        typeGameConquest.skillBattle[slot.id].HEAL[0] = typeGameConquest.battlePetUseSlotRound[slot.id].HEAL[0]
                        typeGameConquest.skillBattle[slot.id].SHIELD[0] = typeGameConquest.battlePetUseSlotRound[slot.id].SHIELD[0]
                        typeGameConquest.skillBattle[slot.id].BURN[0] = typeGameConquest.battlePetUseSlotRound[slot.id].BURN[0]
                        typeGameConquest.skillBattle[slot.id].POISON[0] = typeGameConquest.battlePetUseSlotRound[slot.id].POISON[0]
                        typeGameConquest.skillBattle[slot.id].CRIT[0] = typeGameConquest.battlePetUseSlotRound[slot.id].CRIT[0]
                        typeGameConquest.skillBattle[slot.id].COOLDOWN[0] = typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[0]

                        typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE
                        typeGameConquest.skillBattle[slot.id].PRICESELL = typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL

                        typeGameConquest.starUser -= typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInShop
                        typeGameConquest.battlePetInShop[skill.parentElement.id] = defaultSTT5Mon;
                        let index = skill.parentElement.id.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
                        let skillLock = `LockBattleShop${index}`;
                        LockBattleShop[skillLock] = false;
                        document.getElementById(skillLock).style.color = 'rgb(255 161 115)'

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        //N√¢ng data-skill LEVEL l√™n ƒë·ªÉ t·∫°o highlight
                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill

                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                        typeGameConquest.selectSkillShop += 1
                        document.getElementById("starUser").innerText = typeGameConquest.starUser;
                    } else {

                    }

                } else {

                    if (typeGameConquest.battlePetInShop[skill.parentElement.id].ID.startsWith("S")) {
                        //N·∫øu l√† ƒë√° c∆∞·ªùng h√≥a
                        return;
                    }

                    // L·∫•y ID c·ªßa pet chu·∫©n b·ªã th√™m v√†o
                    const newPetID = typeGameConquest.battlePetInShop[skill.parentElement.id].ID;

                    // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i pet c√≥ c√πng ID trong skillBattle ch∆∞a
                    let isDuplicate = false;

                    //Ki·ªÉm tra slot 1 -> 9 xem ƒë√£ c√≥ pet n√†o tr√πng ID ch∆∞a
                    for (const key of Object.keys(typeGameConquest.skillBattle)) {
                        if (key.endsWith("B") && typeGameConquest.skillBattle[key].ID === newPetID) {
                            isDuplicate = true;
                            break;
                        }
                    }

                    // N·∫øu kh√¥ng b·ªã tr√πng ID th√¨ cho th√™m
                    if (!isDuplicate) {
                        typeGameConquest.starUser -= typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE
                        typeGameConquest.battlePetUseSlotRound[slot.id] = typeGameConquest.battlePetInShop[skill.parentElement.id];
                        typeGameConquest.battlePetUseSlotRound[slot.id].PRICE = 0
                        
                        typeGameConquest.skillBattle[slot.id] = typeGameConquest.battlePetUseSlotRound[slot.id]

                        typeGameConquest.battlePetInShop[skill.parentElement.id] = defaultSTT5Mon;
                        let index = skill.parentElement.id.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
                        let skillLock = `LockBattleShop${index}`;
                        LockBattleShop[skillLock] = false;
                        document.getElementById(skillLock).style.color = 'rgb(255 161 115)'

                        slot.prepend(skill);
                        slot.classList.add("occupied");
                        slot.style.backgroundColor = "";
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                        typeGameConquest.selectSkillShop += 1;
                        document.getElementById("starUser").innerText = typeGameConquest.starUser;
                    } else {
                        // N·∫øu tr√πng th√¨ ch·ªâ reset m√†u slot
                        slot.style.backgroundColor = "";
                    }
                }
            } else if (parentSlot.parentElement.id == "battleInventory") {//K√©o t·ª´ t·ªß ƒë·ªì xu·ªëng
                console.log("K√©o t·ª´ t·ªß ƒë·ªì 1")
                if (slot.classList.contains("occupied")) { // Ki·ªÉm tra slot c√≥ skill ch∆∞a
                    if (typeGameConquest.battlePetInInventory[skill.parentElement.id].EFFECT.includes("stoneUpMulti")) {
                        typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[2] += 1
                        typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE
                        typeGameConquest.skillBattle[slot.id].PRICESELL = typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL

                        typeGameConquest.starUser -= typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICE

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInInventory
                        typeGameConquest.battlePetInInventory[skill.parentElement.id] = defaultSTT5Mon;

                        //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                        parentSlot.classList.remove("occupied")

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill

                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();
                    } else if (
                        (typeGameConquest.battlePetInInventory[skill.parentElement.id].ID === typeGameConquest.skillBattle[slot.id].ID && 
                        Number(typeGameConquest.battlePetInInventory[skill.parentElement.id].LEVEL) === Number(typeGameConquest.skillBattle[slot.id].LEVEL) && 
                        Number(typeGameConquest.skillBattle[slot.id].LEVEL) < 4)
                        ||
                        typeGameConquest.battlePetInInventory[skill.parentElement.id].EFFECT.includes("stoneUpLevel")
                        ) {
                        console.log("K√©o t·ª´ t·ªß ƒë·ªì 2 - n√¢ng c·∫•p")

                        //N√¢ng c·∫•p
                        typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL += 1
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.STR += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.STR)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.DEF += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.DEF)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.INT += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.INT)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.AGI += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.AGI)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.LUK += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.LUK)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.HP += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.HP)

                        let power5MonUpdate = update5MonBattle(typeGameConquest.battlePetUseSlotRound[slot.id])

                        typeGameConquest.battlePetUseSlotRound[slot.id].DAME[0] = power5MonUpdate.dame
                        typeGameConquest.battlePetUseSlotRound[slot.id].DEF[0] = power5MonUpdate.def
                        typeGameConquest.battlePetUseSlotRound[slot.id].HEAL[0] = power5MonUpdate.heal
                        typeGameConquest.battlePetUseSlotRound[slot.id].SHIELD[0] = power5MonUpdate.shield
                        typeGameConquest.battlePetUseSlotRound[slot.id].BURN[0] = power5MonUpdate.burn
                        typeGameConquest.battlePetUseSlotRound[slot.id].POISON[0] = power5MonUpdate.poison
                        typeGameConquest.battlePetUseSlotRound[slot.id].CRIT[0] = power5MonUpdate.crit
                        typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[0] = power5MonUpdate.cooldown
                        typeGameConquest.skillBattle[slot.id].LEVEL = typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL
                        typeGameConquest.skillBattle[slot.id].DAME[0] = typeGameConquest.battlePetUseSlotRound[slot.id].DAME[0]
                        typeGameConquest.skillBattle[slot.id].DEF[0] = typeGameConquest.battlePetUseSlotRound[slot.id].DEF[0]
                        typeGameConquest.skillBattle[slot.id].HEAL[0] = typeGameConquest.battlePetUseSlotRound[slot.id].HEAL[0]
                        typeGameConquest.skillBattle[slot.id].SHIELD[0] = typeGameConquest.battlePetUseSlotRound[slot.id].SHIELD[0]
                        typeGameConquest.skillBattle[slot.id].BURN[0] = typeGameConquest.battlePetUseSlotRound[slot.id].BURN[0]
                        typeGameConquest.skillBattle[slot.id].POISON[0] = typeGameConquest.battlePetUseSlotRound[slot.id].POISON[0]
                        typeGameConquest.skillBattle[slot.id].CRIT[0] = typeGameConquest.battlePetUseSlotRound[slot.id].CRIT[0]
                        typeGameConquest.skillBattle[slot.id].COOLDOWN[0] = typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[0]

                        if (typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL === 2) {
                            typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICE
                        } else {
                            typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICESELL + typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICE
                        }
                        typeGameConquest.skillBattle[slot.id].PRICESELL = typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInInventory
                        typeGameConquest.battlePetInInventory[skill.parentElement.id] = defaultSTT5Mon;

                        //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                        parentSlot.classList.remove("occupied")

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill

                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                    } else {
                        // ƒê·ªïi ch·ªó d·ªØ li·ªáu trong typeGameConquest.skillBattle v√† battlePetInInventory 
                        const tempSkill = typeGameConquest.battlePetInInventory[skill.parentElement.id];
                        const targetSkill = typeGameConquest.skillBattle[slot.id];
                        // Ki·ªÉm tra xem skill n√†y ƒë√£ c√≥ trong skillBattle ch∆∞a (ch·ªâ ki·ªÉm c√°c key k·∫øt th√∫c b·∫±ng "B")
                        let existsInBattle = false;
                        for (const key in typeGameConquest.skillBattle) {
                            console.log()
                            if (key.endsWith("B") && typeGameConquest.skillBattle[key].ID === tempSkill.ID && key !== slot.id) {
                                existsInBattle = true;
                                break;
                            }
                        }

                        if (existsInBattle) {
                            console.warn("Skill ƒë√£ t·ªìn t·∫°i trong skillBattle, kh√¥ng th·ªÉ ho√°n ƒë·ªïi.");
                            return; // D·ª´ng thao t√°c ƒë·ªïi ch·ªó
                        } else {
                            typeGameConquest.battlePetInInventory[skill.parentElement.id] = targetSkill;
                            typeGameConquest.skillBattle[slot.id] = tempSkill;
                            typeGameConquest.battlePetUseSlotRound[slot.id] = typeGameConquest.skillBattle[slot.id]

                            // ƒê·ªïi ch·ªó skill trong HTML
                            const currentSkill = slot.querySelector(".skill") // Skill hi·ªán t·∫°i trong slot
                            const parentSkill = skill; // Skill t·ª´ parentSlot

                            if (currentSkill && parentSkill) {
                                const parentSlot = parentSkill.parentElement;
                                parentSlot.appendChild(currentSkill); // ƒê∆∞a skill t·ª´ slot v√†o parentSlot
                                slot.appendChild(parentSkill); // ƒê∆∞a skill t·ª´ parentSlot v√†o slot
                                console.warn("ƒê√£ ho√°n ƒë·ªïi 2.");
                            }
                            console.log("K√©o t·ª´ t·ªß ƒë·ªì 5 - ƒë·ªïi ch·ªó", typeGameConquest.battlePetInInventory, typeGameConquest.skillBattle);
                            highlightSkillLevel();
                            resetMaxHpBattle();
                            updateSttForSkillAffter();
                            checkUpdateLevel();
                        }

                    }

                } else {
                    if (typeGameConquest.battlePetInInventory[skill.parentElement.id].ID.startsWith("S")) {
                        //Ki·ªÉm tra xem c√≥ ph·∫£i ƒë√° n√¢ng c·∫•p kh√¥ng
                        return;
                    }
                    
                    console.log("K√©o t·ª´ t·ªß ƒë·ªì 4")
                    // L·∫•y ID c·ªßa pet chu·∫©n b·ªã th√™m v√†o
                    const newPetID = typeGameConquest.battlePetInInventory[skill.parentElement.id].ID;

                    // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i pet c√≥ c√πng ID trong skillBattle ch∆∞a
                    let isDuplicate = false;

                    //Ki·ªÉm tra slot 1 -> 9 xem ƒë√£ c√≥ pet n√†o tr√πng ID ch∆∞a
                    for (const key of Object.keys(typeGameConquest.skillBattle)) {
                        if (key.endsWith("B") && typeGameConquest.skillBattle[key].ID === newPetID) {
                            isDuplicate = true;
                            break;
                        }
                    }

                    // N·∫øu kh√¥ng b·ªã tr√πng ID th√¨ cho th√™m
                    if (!isDuplicate) {
                        typeGameConquest.battlePetUseSlotRound[slot.id] = typeGameConquest.battlePetInInventory[skill.parentElement.id];
                        typeGameConquest.skillBattle[slot.id] = typeGameConquest.battlePetInInventory[skill.parentElement.id];

                        typeGameConquest.battlePetInInventory[skill.parentElement.id] = defaultSTT5Mon;
                        parentSlot.classList.remove("occupied")

                        slot.prepend(skill);

                        slot.classList.add("occupied");
                        slot.style.backgroundColor = "";
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();
                    } else {
                        // N·∫øu tr√πng th√¨ ch·ªâ reset m√†u slot
                        slot.style.backgroundColor = "";
                    }
                }

            } else if (parentSlot.parentElement.id == "skillBarB") {

                if (slot.classList.contains("occupied")) { // Ki·ªÉm tra slot c√≥ skill ch∆∞a

                    if (typeGameConquest.skillBattle[skill.parentElement.id].ID === typeGameConquest.skillBattle[slot.id].ID && Number(typeGameConquest.skillBattle[skill.parentElement.id].LEVEL) === Number(typeGameConquest.skillBattle[slot.id].LEVEL) && Number(typeGameConquest.skillBattle[slot.id].LEVEL) < 4) {

                        //N√¢ng c·∫•p
                        typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL += 1
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.STR += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.STR)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.DEF += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.DEF)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.INT += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.INT)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.AGI += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.AGI)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.LUK += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.LUK)
                        typeGameConquest.battlePetUseSlotRound[slot.id].POWER.HP += Math.round(50 * typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL * typeGameConquest.battlePetUseSlotRound[slot.id].LVUPSCALE.HP)
                        let power5MonUpdate = update5MonBattle(typeGameConquest.battlePetUseSlotRound[slot.id])

                        typeGameConquest.battlePetUseSlotRound[slot.id].DAME[0] = power5MonUpdate.dame
                        typeGameConquest.battlePetUseSlotRound[slot.id].DEF[0] = power5MonUpdate.def
                        typeGameConquest.battlePetUseSlotRound[slot.id].HEAL[0] = power5MonUpdate.heal
                        typeGameConquest.battlePetUseSlotRound[slot.id].SHIELD[0] = power5MonUpdate.shield
                        typeGameConquest.battlePetUseSlotRound[slot.id].BURN[0] = power5MonUpdate.burn
                        typeGameConquest.battlePetUseSlotRound[slot.id].POISON[0] = power5MonUpdate.poison
                        typeGameConquest.battlePetUseSlotRound[slot.id].CRIT[0] = power5MonUpdate.crit
                        typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[0] = power5MonUpdate.cooldown
                        typeGameConquest.skillBattle[slot.id].LEVEL = typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL
                        typeGameConquest.skillBattle[slot.id].DAME[0] = typeGameConquest.battlePetUseSlotRound[slot.id].DAME[0]
                        typeGameConquest.skillBattle[slot.id].DEF[0] = typeGameConquest.battlePetUseSlotRound[slot.id].DEF[0]
                        typeGameConquest.skillBattle[slot.id].HEAL[0] = typeGameConquest.battlePetUseSlotRound[slot.id].HEAL[0]
                        typeGameConquest.skillBattle[slot.id].SHIELD[0] = typeGameConquest.battlePetUseSlotRound[slot.id].SHIELD[0]
                        typeGameConquest.skillBattle[slot.id].BURN[0] = typeGameConquest.battlePetUseSlotRound[slot.id].BURN[0]
                        typeGameConquest.skillBattle[slot.id].POISON[0] = typeGameConquest.battlePetUseSlotRound[slot.id].POISON[0]
                        typeGameConquest.skillBattle[slot.id].CRIT[0] = typeGameConquest.battlePetUseSlotRound[slot.id].CRIT[0]
                        typeGameConquest.skillBattle[slot.id].COOLDOWN[0] = typeGameConquest.battlePetUseSlotRound[slot.id].COOLDOWN[0]

                        if (typeGameConquest.battlePetUseSlotRound[slot.id].LEVEL === 2) {
                            typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.skillBattle[skill.parentElement.id].PRICE
                        } else {
                            typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL += typeGameConquest.skillBattle[skill.parentElement.id].PRICESELL + typeGameConquest.skillBattle[skill.parentElement.id].PRICE
                        }
                        typeGameConquest.skillBattle[slot.id].PRICESELL = typeGameConquest.battlePetUseSlotRound[slot.id].PRICESELL

                        // X√≥a k·ªπ nƒÉng kh·ªèi typeGameConquest.skillBattle
                        typeGameConquest.skillBattle[skill.parentElement.id] = defaultSTT5Mon;
                        typeGameConquest.battlePetUseSlotRound[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetUseSlotRound


                        //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                        parentSlot.classList.remove("occupied")

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill

                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                    } else {

                        // ƒê·ªïi ch·ªó d·ªØ li·ªáu trong typeGameConquest.skillBattle v√† battlePetInInventory
                        const tempSkill1 = typeGameConquest.skillBattle[skill.parentElement.id];
                        const tempSkill2 = typeGameConquest.battlePetUseSlotRound[skill.parentElement.id];

                        typeGameConquest.skillBattle[skill.parentElement.id] = typeGameConquest.skillBattle[slot.id];
                        typeGameConquest.skillBattle[slot.id] = tempSkill1;

                        typeGameConquest.battlePetUseSlotRound[skill.parentElement.id] = typeGameConquest.battlePetUseSlotRound[slot.id];
                        typeGameConquest.battlePetUseSlotRound[slot.id] = tempSkill2;

                        // ƒê·ªïi ch·ªó skill trong HTML
                        const currentSkill = slot.querySelector(".skill"); // Skill hi·ªán t·∫°i trong slot
                        const parentSkill = skill; // Skill t·ª´ parentSlot

                        if (currentSkill && parentSkill) {
                            const parentSlot = parentSkill.parentElement;
                            parentSlot.appendChild(currentSkill); // ƒê∆∞a skill t·ª´ slot v√†o parentSlot
                            slot.appendChild(parentSkill); // ƒê∆∞a skill t·ª´ parentSlot v√†o slot
                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();
                        console.log("K√©o t·ª´ t·ªß ƒë·ªì 5 - ƒë·ªïi ch·ªó", typeGameConquest.battlePetInInventory, typeGameConquest.skillBattle);

                    }

                } else {


                    //Th√™m skill v√†o battlePetUseSlotRound
                    typeGameConquest.battlePetUseSlotRound[slot.id] = typeGameConquest.skillBattle[skill.parentElement.id]


                    typeGameConquest.skillBattle[slot.id] = typeGameConquest.skillBattle[skill.parentElement.id]


                    typeGameConquest.skillBattle[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi typeGameConquest.skillBattle
                    typeGameConquest.battlePetUseSlotRound[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetUseSlotRound


                    //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                    parentSlot.classList.remove("occupied")

                    //Chuy·ªÉn slot m·ªõi th√†nh ƒë·∫ßy
                    slot.prepend(skill);
                    slot.classList.add("occupied");
                    slot.style.backgroundColor = "";
                    highlightSkillLevel();
                    resetMaxHpBattle();
                    updateSttForSkillAffter();
                    checkUpdateLevel();
                }
            } else {
                slot.style.backgroundColor = "";
            }
            //C·∫≠p nh·∫≠t ch·ªâ s·ªë tƒÉng t·ª´ b·ªã ƒë·ªông Internal [2]
            internalUp();
            resetHp5Mon();
            updateHpAndRageBar5Mon();
        });
    });

    //S·ª± ki·ªán k√©o v√†o t·ªß ƒë·ªì
    const allSlotSkillInventory = [
        ...document.querySelectorAll("#battleInv1"),
        ...document.querySelectorAll("#battleInv2"),
        ...document.querySelectorAll("#battleInv3"),
        ...document.querySelectorAll("#battleInv4"),
        ...document.querySelectorAll("#battleInv5"),
        ...document.querySelectorAll("#battleInv6"),
        ...document.querySelectorAll("#battleInv7"),
        ...document.querySelectorAll("#battleInv8"),
        ...document.querySelectorAll("#battleInv9"),
        ...document.querySelectorAll("#battleInv10"),
    ];

    // S·ª≠ d·ª•ng forEach tr√™n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ ƒë√£ g·ªôp
    allSlotSkillInventory.forEach(slot => {
        slot.addEventListener("dragover", (e) => {
            e.preventDefault(); // Cho ph√©p k√©o v√†o
        });

        slot.addEventListener("dragenter", () => {
            if (!slot.classList.contains("occupied")) {
                slot.style.backgroundColor = "#e8f5e9"; // L√†m n·ªïi b·∫≠t slot
            }
        });

        slot.addEventListener("dragleave", () => {
            if (!slot.classList.contains("occupied")) {
                slot.style.backgroundColor = ""; // ƒê·∫∑t l·∫°i m√†u n·ªÅn khi r·ªùi kh·ªèi slot
            }
        });

        slot.addEventListener("drop", (e) => {
            e.preventDefault();
            const skillId = e.dataTransfer.getData("text/plain");
            let skill = document.getElementById(skillId);

            const parentSlot = skill.parentElement;
            //L·∫•y th√¥ng tin c·ªßa skill target ƒë·ªÉ n√¢ng c·∫•p

            // Ki·ªÉm tra n·∫øu skill ƒë∆∞·ª£c k√©o v√† th·∫£ l·∫°i ƒë√∫ng slot c≈©
            if (slot === parentSlot) {
                return;
            }

            // K√©o t·ª´ shop xu·ªëng
            if (parentSlot.parentElement.id == "battleShop") {
                //Ki·ªÉm tra n·∫øu kh√¥ng ƒë·ªß star
                if (typeGameConquest.starUser < typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE) {
                    messageOpen(`Kh√¥ng ƒë·ªß <i class="fa-solid fa-splotch"></i>, c·∫ßn c√≥ ${typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE} <i class="fa-solid fa-splotch"></i>`)
                    slot.style.backgroundColor = ""
                    return;
                }

                if (slot.classList.contains("occupied")) { // Ki·ªÉm tra slot c√≥ skill ch∆∞a
                    if (typeGameConquest.battlePetInShop[skill.parentElement.id].EFFECT.includes("stoneUpMulti")) {
                        typeGameConquest.battlePetInInventory[slot.id].COOLDOWN[2] += 1
                        typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                        typeGameConquest.starUser -= typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInShop
                        typeGameConquest.battlePetInShop[skill.parentElement.id] = defaultSTT5Mon;
                        let index = skill.parentElement.id.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
                        let skillLock = `LockBattleShop${index}`;
                        LockBattleShop[skillLock] = false;
                        document.getElementById(skillLock).style.color = 'rgb(255 161 115)'

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill
                        }

                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                        typeGameConquest.selectSkillShop += 1
                        document.getElementById("starUser").innerText = typeGameConquest.starUser;

                    } else if (
                        (typeGameConquest.battlePetInShop[skill.parentElement.id].ID == typeGameConquest.battlePetInInventory[slot.id].ID && 
                        Number(typeGameConquest.battlePetInShop[skill.parentElement.id].LEVEL) === Number(typeGameConquest.battlePetInInventory[slot.id].LEVEL))
                        ||
                        typeGameConquest.battlePetInShop[skill.parentElement.id].EFFECT.includes("stoneUpLevel")
                        ) {

                        //N√¢ng c·∫•p
                        typeGameConquest.battlePetInInventory[slot.id].LEVEL += 1
                        typeGameConquest.battlePetInInventory[slot.id].POWER.STR += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.STR)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.DEF += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.DEF)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.INT += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.INT)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.AGI += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.AGI)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.LUK += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.LUK)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.HP += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.HP)

                        let power5MonUpdate = update5MonBattle(typeGameConquest.battlePetInInventory[slot.id])

                        typeGameConquest.battlePetInInventory[slot.id].DAME[0] = power5MonUpdate.dame
                        typeGameConquest.battlePetInInventory[slot.id].DEF[0] = power5MonUpdate.def
                        typeGameConquest.battlePetInInventory[slot.id].HEAL[0] = power5MonUpdate.heal
                        typeGameConquest.battlePetInInventory[slot.id].SHIELD[0] = power5MonUpdate.shield
                        typeGameConquest.battlePetInInventory[slot.id].BURN[0] = power5MonUpdate.burn
                        typeGameConquest.battlePetInInventory[slot.id].POISON[0] = power5MonUpdate.poison
                        typeGameConquest.battlePetInInventory[slot.id].CRIT[0] = power5MonUpdate.crit
                        typeGameConquest.battlePetInInventory[slot.id].COOLDOWN[0] = power5MonUpdate.cooldown

                        typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                        typeGameConquest.starUser -= typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInShop
                        typeGameConquest.battlePetInShop[skill.parentElement.id] = defaultSTT5Mon;
                        let index = skill.parentElement.id.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
                        let skillLock = `LockBattleShop${index}`;
                        LockBattleShop[skillLock] = false;
                        document.getElementById(skillLock).style.color = 'rgb(255 161 115)'

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill
                        }

                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                        typeGameConquest.selectSkillShop += 1
                        document.getElementById("starUser").innerText = typeGameConquest.starUser;
                    } else {
                    }

                } else {
                    typeGameConquest.starUser -= typeGameConquest.battlePetInShop[skill.parentElement.id].PRICE

                    //Th√™m skill v√†o battlePetUseSlotRound
                    typeGameConquest.battlePetInInventory[slot.id] = typeGameConquest.battlePetInShop[skill.parentElement.id]
                    typeGameConquest.battlePetInInventory[slot.id].PRICE = 0;
                    typeGameConquest.battlePetInShop[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInShop
                    let index = skill.parentElement.id.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
                    let skillLock = `LockBattleShop${index}`;
                    LockBattleShop[skillLock] = false;
                    document.getElementById(skillLock).style.color = 'rgb(255 161 115)'

                    //Chuy·ªÉn slot m·ªõi th√†nh ƒë·∫ßy    
                    slot.prepend(skill);
                    slot.classList.add("occupied");
                    slot.style.backgroundColor = "";
                    highlightSkillLevel();
                    resetMaxHpBattle();
                    updateSttForSkillAffter();
                    checkUpdateLevel();


                    typeGameConquest.selectSkillShop += 1

                    document.getElementById("starUser").innerText = typeGameConquest.starUser;
                }

            } else if (parentSlot.parentElement.id == "battleInventory") {//K√©o t·ª´ t·ªß ƒë·ªì sang
                if (slot.classList.contains("occupied")) { // Ki·ªÉm tra slot c√≥ skill ch∆∞a
                    if (typeGameConquest.battlePetInInventory[skill.parentElement.id].EFFECT.includes("stoneUpMulti")) {
                        typeGameConquest.battlePetInInventory[slot.id].COOLDOWN[2] += 1
                        typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICE

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInInventory
                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInInventory
                        typeGameConquest.battlePetInInventory[skill.parentElement.id] = defaultSTT5Mon;

                        //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                        parentSlot.classList.remove("occupied")

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill
                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                    } else if (
                        (typeGameConquest.battlePetInInventory[skill.parentElement.id].ID == typeGameConquest.battlePetInInventory[slot.id].ID && 
                        Number(typeGameConquest.battlePetInInventory[skill.parentElement.id].LEVEL) === Number(typeGameConquest.battlePetInInventory[slot.id].LEVEL))
                        || typeGameConquest.battlePetInInventory[skill.parentElement.id].EFFECT.includes("stoneUpLevel")
                        ) {

                        //N√¢ng c·∫•p
                        typeGameConquest.battlePetInInventory[slot.id].LEVEL += 1
                        typeGameConquest.battlePetInInventory[slot.id].POWER.STR += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.STR)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.DEF += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.DEF)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.INT += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.INT)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.AGI += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.AGI)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.LUK += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.LUK)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.HP += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.HP)

                        let power5MonUpdate = update5MonBattle(typeGameConquest.battlePetInInventory[slot.id])

                        typeGameConquest.battlePetInInventory[slot.id].DAME[0] = power5MonUpdate.dame
                        typeGameConquest.battlePetInInventory[slot.id].DEF[0] = power5MonUpdate.def
                        typeGameConquest.battlePetInInventory[slot.id].HEAL[0] = power5MonUpdate.heal
                        typeGameConquest.battlePetInInventory[slot.id].SHIELD[0] = power5MonUpdate.shield
                        typeGameConquest.battlePetInInventory[slot.id].BURN[0] = power5MonUpdate.burn
                        typeGameConquest.battlePetInInventory[slot.id].POISON[0] = power5MonUpdate.poison
                        typeGameConquest.battlePetInInventory[slot.id].CRIT[0] = power5MonUpdate.crit
                        typeGameConquest.battlePetInInventory[slot.id].COOLDOWN[0] = power5MonUpdate.cooldown

                        if (typeGameConquest.battlePetInInventory[slot.id].LEVEL === 2) {
                            typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICE
                        } else {
                            typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICESELL + typeGameConquest.battlePetInInventory[skill.parentElement.id].PRICE
                        }

                        // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInInventory
                        typeGameConquest.battlePetInInventory[skill.parentElement.id] = defaultSTT5Mon;

                        //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                        parentSlot.classList.remove("occupied")

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill
                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                    } else {

                        // ƒê·ªïi ch·ªó d·ªØ li·ªáu trong typeGameConquest.skillBattle v√† battlePetInInventory
                        const tempSkill = typeGameConquest.battlePetInInventory[skill.parentElement.id];

                        typeGameConquest.battlePetInInventory[skill.parentElement.id] = typeGameConquest.battlePetInInventory[slot.id];
                        typeGameConquest.battlePetInInventory[slot.id] = tempSkill;

                        // ƒê·ªïi ch·ªó skill trong HTML
                        const currentSkill = slot.querySelector(".skill"); // Skill hi·ªán t·∫°i trong slot
                        const parentSkill = skill; // Skill t·ª´ parentSlot

                        if (currentSkill && parentSkill) {
                            const parentSlot = parentSkill.parentElement;
                            parentSlot.appendChild(currentSkill); // ƒê∆∞a skill t·ª´ slot v√†o parentSlot
                            slot.appendChild(parentSkill); // ƒê∆∞a skill t·ª´ parentSlot v√†o slot
                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();
                        console.log("K√©o t·ª´ t·ªß ƒë·ªì 5 - ƒë·ªïi ch·ªó", typeGameConquest.battlePetInInventory, typeGameConquest.skillBattle);
                    }

                } else {

                    //Th√™m skill v√†o battlePetInInventory
                    typeGameConquest.battlePetInInventory[slot.id] = typeGameConquest.battlePetInInventory[skill.parentElement.id]

                    typeGameConquest.battlePetInInventory[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInInventory
                    //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                    parentSlot.classList.remove("occupied")

                    //Chuy·ªÉn slot m·ªõi th√†nh ƒë·∫ßy
                    slot.prepend(skill);
                    slot.classList.add("occupied");
                    slot.style.backgroundColor = "";
                    highlightSkillLevel();
                    resetMaxHpBattle();
                    updateSttForSkillAffter();
                    checkUpdateLevel();
                }

            } else if (parentSlot.parentElement.id == "skillBarB") {
                if (slot.classList.contains("occupied")) { // Ki·ªÉm tra slot c√≥ skill ch∆∞a
                    if (typeGameConquest.skillBattle[skill.parentElement.id].ID == typeGameConquest.battlePetInInventory[slot.id].ID && Number(typeGameConquest.skillBattle[skill.parentElement.id].LEVEL) === Number(typeGameConquest.battlePetInInventory[slot.id].LEVEL)) {

                        //N√¢ng c·∫•p
                        typeGameConquest.battlePetInInventory[slot.id].LEVEL += 1
                        typeGameConquest.battlePetInInventory[slot.id].POWER.STR += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.STR)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.DEF += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.DEF)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.INT += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.INT)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.AGI += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.AGI)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.LUK += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.LUK)
                        typeGameConquest.battlePetInInventory[slot.id].POWER.HP += Math.round(50 * typeGameConquest.battlePetInInventory[slot.id].LEVEL * typeGameConquest.battlePetInInventory[slot.id].LVUPSCALE.HP)

                        let power5MonUpdate = update5MonBattle(typeGameConquest.battlePetInInventory[slot.id])

                        typeGameConquest.battlePetInInventory[slot.id].DAME[0] = power5MonUpdate.dame
                        typeGameConquest.battlePetInInventory[slot.id].DEF[0] = power5MonUpdate.def
                        typeGameConquest.battlePetInInventory[slot.id].HEAL[0] = power5MonUpdate.heal
                        typeGameConquest.battlePetInInventory[slot.id].SHIELD[0] = power5MonUpdate.shield
                        typeGameConquest.battlePetInInventory[slot.id].BURN[0] = power5MonUpdate.burn
                        typeGameConquest.battlePetInInventory[slot.id].POISON[0] = power5MonUpdate.poison
                        typeGameConquest.battlePetInInventory[slot.id].CRIT[0] = power5MonUpdate.crit
                        typeGameConquest.battlePetInInventory[slot.id].COOLDOWN[0] = power5MonUpdate.cooldown

                        if (typeGameConquest.battlePetInInventory[slot.id].LEVEL === 2) {
                            typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.skillBattle[skill.parentElement.id].PRICE
                        } else {
                            typeGameConquest.battlePetInInventory[slot.id].PRICESELL += typeGameConquest.skillBattle[skill.parentElement.id].PRICESELL + typeGameConquest.skillBattle[skill.parentElement.id].PRICE
                        }

                        // X√≥a k·ªπ nƒÉng kh·ªèi typeGameConquest.skillBattle
                        typeGameConquest.skillBattle[skill.parentElement.id] = defaultSTT5Mon;
                        typeGameConquest.battlePetUseSlotRound[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetUseSlotRound

                        //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                        parentSlot.classList.remove("occupied")

                        // X√≥a k·ªπ nƒÉng html shop (div skill Shop)
                        skill.remove();
                        skill = null;

                        const skillDiv = slot.querySelector(".skill"); // L·∫•y div skill con
                        if (skillDiv) {
                            const skillData = JSON.parse(skillDiv.dataset.skill); // L·∫•y data-skill
                            skillData.LEVEL += 1; // TƒÉng LEVEL l√™n
                            skillDiv.dataset.skill = JSON.stringify(skillData); // C·∫≠p nh·∫≠t l·∫°i data-skill
                        }
                        highlightSkillLevel();
                        resetMaxHpBattle();
                        updateSttForSkillAffter();
                        checkUpdateLevel();

                    } else {
                        // ƒê·ªïi ch·ªó d·ªØ li·ªáu trong typeGameConquest.skillBattle v√† battlePetInInventory
                        const tempSkill = typeGameConquest.skillBattle[skill.parentElement.id];
                        const targetSkill = typeGameConquest.battlePetInInventory[slot.id]
                        // Ki·ªÉm tra xem skill n√†y ƒë√£ c√≥ trong skillBattle ch∆∞a (ch·ªâ ki·ªÉm c√°c key k·∫øt th√∫c b·∫±ng "B")
                        let existsInBattle = false;
                        for (const key in typeGameConquest.skillBattle) {
                            if (key.endsWith("B") && typeGameConquest.skillBattle[key].ID === targetSkill.ID && key !== skill.parentElement.id) {
                                existsInBattle = true;
                                break;
                            }
                        }

                        if (existsInBattle) {
                            console.warn("Skill ƒë√£ t·ªìn t·∫°i trong skillBattle, kh√¥ng th·ªÉ ho√°n ƒë·ªïi.");
                            return; // D·ª´ng thao t√°c ƒë·ªïi ch·ªó
                        } else {
                            typeGameConquest.skillBattle[skill.parentElement.id] = targetSkill
                            typeGameConquest.battlePetUseSlotRound[skill.parentElement.id] = targetSkill
                            typeGameConquest.battlePetInInventory[slot.id] = tempSkill;

                            // ƒê·ªïi ch·ªó skill trong HTML
                            const currentSkill = slot.querySelector(".skill"); // Skill hi·ªán t·∫°i trong slot
                            const parentSkill = skill; // Skill t·ª´ parentSlot

                            if (currentSkill && parentSkill) {
                                const parentSlot = parentSkill.parentElement;
                                parentSlot.appendChild(currentSkill); // ƒê∆∞a skill t·ª´ slot v√†o parentSlot
                                slot.appendChild(parentSkill); // ƒê∆∞a skill t·ª´ parentSlot v√†o slot
                                console.warn("ƒê√£ ho√°n ƒë·ªïi1.");
                            }
                            highlightSkillLevel();
                            resetMaxHpBattle();
                            updateSttForSkillAffter();
                            checkUpdateLevel();
                            console.log("K√©o t·ª´ t·ªß ƒë·ªì 5 - ƒë·ªïi ch·ªó", typeGameConquest.battlePetInInventory, typeGameConquest.skillBattle);
                        }
                    }


                } else {

                    //Th√™m skill v√†o battlePetInInventory
                    typeGameConquest.battlePetInInventory[slot.id] = typeGameConquest.skillBattle[skill.parentElement.id]

                    typeGameConquest.skillBattle[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi typeGameConquest.skillBattle
                    typeGameConquest.battlePetUseSlotRound[skill.parentElement.id] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetUseSlotRound

                    //Chuy·ªÉn slot c≈© th√†nh tr·ªëng
                    parentSlot.classList.remove("occupied")

                    //Chuy·ªÉn slot m·ªõi th√†nh ƒë·∫ßy
                    slot.prepend(skill);
                    slot.classList.add("occupied");
                    slot.style.backgroundColor = "";
                    highlightSkillLevel();
                    resetMaxHpBattle();
                    updateSttForSkillAffter();
                    checkUpdateLevel();
                }
                internalUp();
                resetHp5Mon();
                updateHpAndRageBar5Mon();
            } else {
                slot.style.backgroundColor = "";
            }
        });
    });

    //B√°n skill
    shopSell.addEventListener('dragover', (event) => {
        event.preventDefault(); // Cho ph√©p th·∫£
    });

    shopSell.addEventListener('drop', (event) => {
        event.preventDefault(); // NgƒÉn h√†nh vi m·∫∑c ƒë·ªãnh
        const skillId = event.dataTransfer.getData("text/plain"); // L·∫•y ID k·ªπ nƒÉng
        let skillElement = document.getElementById(skillId);

        if (skillElement) {
            if (skillElement.parentElement.parentElement.id !== "battleShop") {

                //X√≥a ·ªü trong m·∫£ng
                //Skill b√°n ·ªü trong t·ªß ƒë·ªì
                if (skillElement.parentElement.parentElement.id === "battleInventory") {
                    let skillSell = typeGameConquest.battlePetInInventory[skillElement.parentElement.id]
                    typeGameConquest.battlePetInInventory[skillElement.parentElement.id] = defaultSTT5Mon;
                    //C·ªông atk/heal/shield/burn/poison khi b√°n skill
                    skillSell.SELLUP.forEach(sellUpEffect => {
                        sellUpSkill(skillSell, sellUpEffect);
                    });
                    typeGameConquest.starUser += skillSell.PRICE + skillSell.PRICESELL
                }

                //Skill b√°n ·ªü slot skill
                if (skillElement.parentElement.parentElement.id === "skillBarB") {
                    let skillSell = typeGameConquest.battlePetUseSlotRound[skillElement.parentElement.id]
                    typeGameConquest.battlePetUseSlotRound[skillElement.parentElement.id] = defaultSTT5Mon;

                    typeGameConquest.skillBattle[skillElement.parentElement.id] = typeGameConquest.battlePetUseSlotRound[skillElement.parentElement.id]
                    //C·ªông atk/heal/shield/burn/poison khi b√°n skill

                    typeGameConquest.starUser += skillSell.PRICE + skillSell.PRICESELL

                    skillSell.SELLUP.forEach(sellUpEffect => {
                        sellUpSkill(skillSell, sellUpEffect);
                    });
                    internalUp();
                }

                //X·ª≠ l√Ω c√°c 5Mon c√≥ sellUpPrice
                Object.keys(typeGameConquest.battlePetUseSlotRound).forEach((key) => {
                    if (typeGameConquest.battlePetUseSlotRound[key].INTERNAL.includes("sellUpPrice")) {
                        typeGameConquest.battlePetUseSlotRound[key].PRICESELL += 1;
                        typeGameConquest.skillBattle[key].PRICESELL = typeGameConquest.battlePetUseSlotRound[key].PRICESELL;      
                    }
                });
                
                Object.keys(typeGameConquest.battlePetInInventory).forEach((key) => {
                    if (typeGameConquest.battlePetInInventory[key].INTERNAL.includes("sellUpPrice")) {
                        typeGameConquest.battlePetInInventory[key].PRICESELL += 1;
                    }
                });

                // X·ª≠ l√Ω logic b√°n k·ªπ nƒÉng
                skillElement.parentElement.classList.remove("occupied")
                skillElement.remove(); // X√≥a skill kh·ªèi giao di·ªán
                skillElement = null;

            }
            slots.forEach(slot => slot.classList.remove("highlight"));
            slots.forEach(slot => slot.classList.remove("updateSkill"));

            shopSell.style.background = "#f86e85"
            document.getElementById('starUser').innerText = typeGameConquest.starUser;
        }
        highlightSkillLevel();
        resetMaxHpBattle();
        updateSttForSkillAffter();
        checkUpdateLevel(); 
        internalUp();
        resetHp5Mon();
        updateHpAndRageBar5Mon();
    });
};

//H√†m update 5Mon trong battle
function update5MonBattle(skill) {

    let powerINT = scalePower5Mon(skill.POWER.INT);

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0;

    // √Åp d·ª•ng scaleSTR v√†o c√°c ph√©p t√≠nh hi·ªáu ·ª©ng
    if (skill.EFFECT.includes("Attacking")) {
        dame = Math.round(powerINT.dame * skill.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skill.EFFECT.includes("Healing")) {
        heal = Math.round(powerINT.heal * skill.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skill.EFFECT.includes("Shield")) {
        shield = Math.round(powerINT.shield * skill.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skill.EFFECT.includes("Burn")) {
        burn = Math.round(powerINT.burn * skill.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skill.EFFECT.includes("Poison")) {
        poison = Math.round(powerINT.poison * skill.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }

    //T√≠nh cooldown
    let agi = skill.POWER.AGI;
    let minC = 8;
    let maxC = 20;

    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5

    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - skill.POWER.SCALE);


    //t√≠nh crit
    let luk = skill.POWER.LUK;
    let maxCrit = 60;
    let scaleCrit = 1500; // t√πy ch·ªânh
    let valueCrit = maxCrit * luk / (luk + scaleCrit);
    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
    valueCrit = Math.round(valueCrit * skill.POWER.SCALE);

    //t√≠nh def
    let def = skill.POWER.DEF;
    let maxDef = 90;
    let scaleDef = 475; // t√πy ch·ªânh
    let valueDef = maxDef * def / (def + scaleDef);
    valueDef = Math.min(maxDef, Math.max(0, valueDef));
    valueDef = Math.round(valueDef * skill.POWER.SCALE);

    return {
        dame: dame,
        heal: heal,
        shield: shield,
        burn: burn,
        poison: poison,
        crit: valueCrit,
        def: Math.round(valueDef * 100) / 100,
        cooldown: Math.ceil(valueC)
    }
}


//H√†m tƒÉng ƒëi·ªÉm khi b√°n skill +++
function sellUpSkill(skill, sellUpEffect) {
    const sellUpDame = eval(effectsSellUp[sellUpEffect].dameSellUp)

    if (sellUpEffect === "SUpHp") {
        typeGameConquest.maxHpBattle += sellUpDame
        nowHpBattleMy = (typeGameConquest.maxHpBattle + maxHpUp);
        updateHpbar();
    }

    if (sellUpEffect === "SUpDameAll") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Attacking")) {
                data.DAME[1] += sellUpDame
                updateSttForSkillAffter();
            }
        }
    }

    if (sellUpEffect === "SUpDameLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Attacking") && data.ID !== "") {
                data.DAME[1] += sellUpDame
                updateSttForSkillAffter();
                break;
            }
        }
    }

    if (sellUpEffect === "SUpHealAll") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Healing")) {
                data.HEAL[1] += sellUpDame
                updateSttForSkillAffter();
            }
        }
    }

    if (sellUpEffect === "SUpHealLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Healing") && data.ID !== "") {
                data.HEAL[1] += sellUpDame
                updateSttForSkillAffter();
                break;
            }
        }
    }
    if (sellUpEffect === "SUpShieldAll") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Shield")) {
                data.SHIELD[1] += sellUpDame
                updateSttForSkillAffter();
            }
        }
    }

    if (sellUpEffect === "SUpShieldLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Shield") && data.ID !== "") {
                data.SHIELD[1] += sellUpDame
                updateSttForSkillAffter();
                break;
            }
        }
    }
    if (sellUpEffect === "SUpBurnAll") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Burn")) {
                data.BURN[1] += sellUpDame
                updateSttForSkillAffter();
            }
        }
    }

    if (sellUpEffect === "SUpBurnLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Burn") && data.ID !== "") {
                data.BURN[1] += sellUpDame
                updateSttForSkillAffter();
                break;
            }
        }
    }
    if (sellUpEffect === "SUpPoisonAll") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Poison")) {
                data.POISON[1] += sellUpDame
                updateSttForSkillAffter();
            }
        }
    }

    if (sellUpEffect === "SUpPoisonLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.EFFECT.includes("Poison") && data.ID !== "") {
                data.POISON[1] += sellUpDame
                updateSttForSkillAffter();
                break;
            }
        }
    }
    if (sellUpEffect === "SUpCritAll") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            data.CRIT[1] += sellUpDame
        }
    }

    if (sellUpEffect === "SUpCritLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.ID !== "") {
                data.CRIT[1] += sellUpDame
                break;
            }
        }
    }
    if (sellUpEffect === "SUpMutilLeft") {
        for (let i in typeGameConquest.battlePetUseSlotRound) {
            const data = typeGameConquest.battlePetUseSlotRound[i];
            if (data.ID !== "") {
                data.COOLDOWN[2] += Number(sellUpDame)
                updateSttForSkillAffter();
                break;
            }
        }
    }
    console.log("battlePetUseSlotRound", typeGameConquest.battlePetUseSlotRound)
}

//H√†m tƒÉng ch·ªâ s·ªë d·ª±a v√†o n·ªôi t·∫°i Internal
function internalUp() {

    maxHpUp = 0;
    nowHpBattleMy = (typeGameConquest.maxHpBattle + maxHpUp);
    updateHpbar();
    document.querySelector('#hpBarB').querySelector('.hpText').textContent = (typeGameConquest.maxHpBattle + maxHpUp)

    //Cho t·∫•t c·∫£ c√°c ch·ªâ s·ªë trong skillbattle v√† battleinventory [2] v·ªÅ 0 h·∫øt
    Object.keys(typeGameConquest.skillBattle).forEach((key) => {
        if (key.endsWith("B") &&
            typeGameConquest.skillBattle[key].ID !== "") {
            typeGameConquest.skillBattle[key].DAME[2] = 0;
            typeGameConquest.skillBattle[key].HEAL[2] = 0;
            typeGameConquest.skillBattle[key].SHIELD[2] = 0;
            typeGameConquest.skillBattle[key].BURN[2] = 0;
            typeGameConquest.skillBattle[key].POISON[2] = 0;
            typeGameConquest.skillBattle[key].CRIT[2] = 0;
            typeGameConquest.skillBattle[key].COOLDOWN[3] = 0;
        }
    });

    Object.keys(typeGameConquest.battlePetInInventory).forEach((key) => {
        if (typeGameConquest.battlePetInInventory[key].ID !== "") {
            typeGameConquest.battlePetInInventory[key].DAME[2] = 0;
            typeGameConquest.battlePetInInventory[key].HEAL[2] = 0;
            typeGameConquest.battlePetInInventory[key].SHIELD[2] = 0;
            typeGameConquest.battlePetInInventory[key].BURN[2] = 0;
            typeGameConquest.battlePetInInventory[key].POISON[2] = 0;
            typeGameConquest.battlePetInInventory[key].CRIT[2] = 0;
            typeGameConquest.battlePetInInventory[key].COOLDOWN[3] = 0;
        }
    });

    //TƒÉng ch·ªâ s·ªë d·ª±a theo slot
    Object.keys(typeGameConquest.skillBattle).forEach((key) => {
        //chuy·ªÉn th√†nh skill
        let skill = typeGameConquest.skillBattle[key]
        if (key.endsWith("B") &&
            typeGameConquest.skillBattle[key].ID !== "") {

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMaxHeal")) {
                const internalUpDame = eval(effectsInternal["IntUpMaxHeal"].dameInternal)
                maxHpUp += internalUpDame
                nowHpBattleMy = (typeGameConquest.maxHpBattle + maxHpUp);
                updateHpbar();
                document.querySelector('#hpBarB').querySelector('.hpText').textContent = (typeGameConquest.maxHpBattle + maxHpUp)
            }

            //////////////////Attacking
            /////////////////////

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameAll")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpDameAll"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame
                    };
                });
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameLeft")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpDameLeft"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey - 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameLeftMost")) {
                const internalUpDame = eval(effectsInternal["IntUpDameLeftMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame
                        break;
                    };
                };
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameLeftAll")) {
                const internalUpDame = eval(effectsInternal["IntUpDameLeftAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame;
                        // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameRight")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpDameRight"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey + 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameRightMost")) {
                const internalUpDame = eval(effectsInternal["IntUpDameRightMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));

                // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
                for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey
                    ) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame;
                        break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameRightAll")) {
                const internalUpDame = eval(effectsInternal["IntUpDameRightAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame;
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameLeftRight")) {
                const internalUpDame = eval(effectsInternal["IntUpDameLeftRight"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key
                    ) {
                        const currentSlot = parseInt(skill.replace(/\D/g, ""));
                        // TƒÉng ch·ªâ s·ªë DAME[2] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                        if (
                            (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                            (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                        ) {
                            typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame;
                        }
                    }
                }
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpDameType")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpDameType"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Attacking") &&
                        skill !== key &&
                        typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                    ) {
                        typeGameConquest.skillBattle[skill].DAME[2] += internalUpDame
                    };
                });
            }

            //////////////////Heal
            /////////////////////

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealAll")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpHealAll"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame
                    };
                });
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealLeft")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpHealLeft"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey - 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealLeftMost")) {
                const internalUpDame = eval(effectsInternal["IntUpHealLeftMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame
                        break;
                    };
                };
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealLeftAll")) {
                const internalUpDame = eval(effectsInternal["IntUpHealLeftAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame;
                        // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealRight")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpHealRight"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey + 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealRightMost")) {
                const internalUpDame = eval(effectsInternal["IntUpHealRightMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));

                // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
                for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey
                    ) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame;
                        break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealRightAll")) {
                const internalUpDame = eval(effectsInternal["IntUpHealRightAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame;
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealLeftRight")) {
                const internalUpDame = eval(effectsInternal["IntUpHealLeftRight"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key
                    ) {
                        const currentSlot = parseInt(skill.replace(/\D/g, ""));
                        // TƒÉng ch·ªâ s·ªë HEAL[2] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                        if (
                            (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                            (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                        ) {
                            typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame;
                        }
                    }
                }
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpHealType")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpHealType"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Healing") &&
                        skill !== key &&
                        typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                    ) {
                        typeGameConquest.skillBattle[skill].HEAL[2] += internalUpDame
                    };
                });
            }

            ////////////Shield
            /////////////////
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldAll")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpShieldAll"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame
                    };
                });
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldLeft")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpShieldLeft"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey - 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldLeftMost")) {
                const internalUpDame = eval(effectsInternal["IntUpShieldLeftMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame
                        break;
                    };
                };
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldLeftAll")) {
                const internalUpDame = eval(effectsInternal["IntUpShieldLeftAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame;
                        // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldRight")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpShieldRight"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey + 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldRightMost")) {
                const internalUpDame = eval(effectsInternal["IntUpShieldRightMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));

                // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
                for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey
                    ) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame;
                        break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldRightAll")) {
                const internalUpDame = eval(effectsInternal["IntUpShieldRightAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame;
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldLeftRight")) {
                const internalUpDame = eval(effectsInternal["IntUpShieldLeftRight"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key
                    ) {
                        const currentSlot = parseInt(skill.replace(/\D/g, ""));
                        // TƒÉng ch·ªâ s·ªë SHIELD[2] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                        if (
                            (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                            (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                        ) {
                            typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame;
                        }
                    }
                }
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpShieldType")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpShieldType"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Shield") &&
                        skill !== key &&
                        typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                    ) {
                        typeGameConquest.skillBattle[skill].SHIELD[2] += internalUpDame
                    };
                });
            }

            /////////////Burn
            ////////////////
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnAll")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpBurnAll"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame
                    };
                });
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnLeft")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpBurnLeft"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey - 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnLeftMost")) {
                const internalUpDame = eval(effectsInternal["IntUpBurnLeftMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame
                        break;
                    };
                };
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnLeftAll")) {
                const internalUpDame = eval(effectsInternal["IntUpBurnLeftAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame;
                        // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnRight")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpBurnRight"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey + 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnRightMost")) {
                const internalUpDame = eval(effectsInternal["IntUpBurnRightMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));

                // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
                for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey
                    ) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame;
                        break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnRightAll")) {
                const internalUpDame = eval(effectsInternal["IntUpBurnRightAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame;
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnLeftRight")) {
                const internalUpDame = eval(effectsInternal["IntUpBurnLeftRight"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key
                    ) {
                        const currentSlot = parseInt(skill.replace(/\D/g, ""));
                        // TƒÉng ch·ªâ s·ªë BURN[2] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                        if (
                            (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                            (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                        ) {
                            typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame;
                        }
                    }
                }
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpBurnType")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpBurnType"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Burn") &&
                        skill !== key &&
                        typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                    ) {
                        typeGameConquest.skillBattle[skill].BURN[2] += internalUpDame
                    };
                });
            }

            /////////Poison
            ///////////////

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonAll")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpPoisonAll"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame
                    };
                });
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonLeft")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpPoisonLeft"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey - 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonLeftMost")) {
                const internalUpDame = eval(effectsInternal["IntUpPoisonLeftMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame
                        break;
                    };
                };
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonLeftAll")) {
                const internalUpDame = eval(effectsInternal["IntUpPoisonLeftAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame;
                        // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonRight")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpPoisonRight"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey + 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonRightMost")) {
                const internalUpDame = eval(effectsInternal["IntUpPoisonRightMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));

                // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
                for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey
                    ) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame;
                        break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonRightAll")) {
                const internalUpDame = eval(effectsInternal["IntUpPoisonRightAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame;
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonLeftRight")) {
                const internalUpDame = eval(effectsInternal["IntUpPoisonLeftRight"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key
                    ) {
                        const currentSlot = parseInt(skill.replace(/\D/g, ""));
                        // TƒÉng ch·ªâ s·ªë POISON[2] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                        if (
                            (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                            (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                        ) {
                            typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame;
                        }
                    }
                }
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpPoisonType")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpPoisonType"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        typeGameConquest.skillBattle[skill].EFFECT.includes("Poison") &&
                        skill !== key &&
                        typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                    ) {
                        typeGameConquest.skillBattle[skill].POISON[2] += internalUpDame
                    };
                });
            }

            ///////////Crit
            ///////////////
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritAll")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpCritAll"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame
                    };
                });
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritLeft")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpCritLeft"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey - 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritLeftMost")) {
                const internalUpDame = eval(effectsInternal["IntUpCritLeftMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame
                        break;
                    };
                };
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritLeftAll")) {
                const internalUpDame = eval(effectsInternal["IntUpCritLeftAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) < slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame;
                        // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritRight")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpCritRight"].dameInternal)
                const slotKey = parseInt(key.replace(/\D/g, ""));
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        skill.startsWith(`skill${slotKey + 1}`) &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame
                    };
                });
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritRightMost")) {
                const internalUpDame = eval(effectsInternal["IntUpCritRightMost"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));

                // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
                for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey
                    ) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame;
                        break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritRightAll")) {
                const internalUpDame = eval(effectsInternal["IntUpCritRightAll"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        parseInt(skill.replace(/\D/g, "")) > slotKey &&
                        skill !== key
                    ) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame;
                    }
                }
            }

            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritLeftRight")) {
                const internalUpDame = eval(effectsInternal["IntUpCritLeftRight"].dameInternal);
                const slotKey = parseInt(key.replace(/\D/g, ""));
                for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                    if (
                        skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key
                    ) {
                        const currentSlot = parseInt(skill.replace(/\D/g, ""));
                        // TƒÉng ch·ªâ s·ªë CRIT[2] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                        if (
                            (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                            (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                        ) {
                            typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame;
                        }
                    }
                }
            }
            if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpCritType")) {
                //t√≠nh Dame c·ªông th√™m
                const internalUpDame = eval(effectsInternal["IntUpCritType"].dameInternal)
                Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                    if (skill.endsWith("B") &&
                        key.endsWith("B") &&
                        typeGameConquest.skillBattle[skill].ID !== "" &&
                        skill !== key &&
                        typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                    ) {
                        typeGameConquest.skillBattle[skill].CRIT[2] += internalUpDame
                    };
                });
            }
        }

        ///////////Multi cast
        /////////////////////
        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiAll")) {
            //t√≠nh Dame c·ªông th√™m
            const internalUpDame = eval(effectsInternal["IntUpMultiAll"].dameInternal)
            Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                if (skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame
                };
            });
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiLeft")) {
            //t√≠nh Dame c·ªông th√™m
            const internalUpDame = eval(effectsInternal["IntUpMultiLeft"].dameInternal)
            const slotKey = parseInt(key.replace(/\D/g, ""));
            Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                if (skill.endsWith("B") &&
                    key.endsWith("B") &&
                    skill.startsWith(`skill${slotKey - 1}`) &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame
                };
            });
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiLeftMost")) {
            const internalUpDame = eval(effectsInternal["IntUpMultiLeftMost"].dameInternal);
            const slotKey = parseInt(key.replace(/\D/g, ""));
            for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                if (skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key &&
                    parseInt(skill.replace(/\D/g, "")) < slotKey) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame
                    break;
                };
            };
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiLeftAll")) {
            const internalUpDame = eval(effectsInternal["IntUpMultiLeftAll"].dameInternal);
            const slotKey = parseInt(key.replace(/\D/g, ""));
            for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                if (
                    skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    parseInt(skill.replace(/\D/g, "")) < slotKey &&
                    skill !== key
                ) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame;
                    // Tho√°t v√≤ng l·∫∑p khi ƒë·∫°t ƒë·∫øn `slotKey`
                }
            }
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiRight")) {
            //t√≠nh Dame c·ªông th√™m
            const internalUpDame = eval(effectsInternal["IntUpMultiRight"].dameInternal)
            const slotKey = parseInt(key.replace(/\D/g, ""));
            Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                if (skill.endsWith("B") &&
                    key.endsWith("B") &&
                    skill.startsWith(`skill${slotKey + 1}`) &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame
                };
            });
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiRightMost")) {
            const internalUpDame = eval(effectsInternal["IntUpMultiRightMost"].dameInternal);
            const slotKey = parseInt(key.replace(/\D/g, ""));

            // Duy·ªát qua c√°c skill v√† t√¨m skill b√™n ph·∫£i nh·∫•t
            for (const skill of Object.keys(typeGameConquest.skillBattle).reverse()) {
                if (
                    skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key &&
                    parseInt(skill.replace(/\D/g, "")) > slotKey
                ) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame;
                    break; // Tho√°t v√≤ng l·∫∑p ngay khi t√¨m th·∫•y skill h·ª£p l·ªá
                }
            }
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiRightAll")) {
            const internalUpDame = eval(effectsInternal["IntUpMultiRightAll"].dameInternal);
            const slotKey = parseInt(key.replace(/\D/g, ""));
            for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                if (
                    skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    parseInt(skill.replace(/\D/g, "")) > slotKey &&
                    skill !== key
                ) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame;
                }
            }
        }

        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiLeftRight")) {
            const internalUpDame = eval(effectsInternal["IntUpMultiLeftRight"].dameInternal);
            const slotKey = parseInt(key.replace(/\D/g, ""));
            for (const skill of Object.keys(typeGameConquest.skillBattle)) {
                if (
                    skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key
                ) {
                    const currentSlot = parseInt(skill.replace(/\D/g, ""));
                    // TƒÉng ch·ªâ s·ªë COOLDOWN[3] cho slot b√™n tr√°i ho·∫∑c b√™n ph·∫£i (v·ªõi ƒëi·ªÅu ki·ªán h·ª£p l·ªá)
                    if (
                        (currentSlot === slotKey - 1 && slotKey > 1) || // B√™n tr√°i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 1
                        (currentSlot === slotKey + 1 && slotKey < 9)    // B√™n ph·∫£i, tr·ª´ tr∆∞·ªùng h·ª£p slotKey l√† 9
                    ) {
                        typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame;
                    }
                }
            }
        }
        if (typeGameConquest.skillBattle[key].INTERNAL.includes("IntUpMultiType")) {
            //t√≠nh Dame c·ªông th√™m
            const internalUpDame = eval(effectsInternal["IntUpMultiType"].dameInternal)
            Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
                if (skill.endsWith("B") &&
                    key.endsWith("B") &&
                    typeGameConquest.skillBattle[skill].ID !== "" &&
                    skill !== key &&
                    typeGameConquest.skillBattle[skill].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))
                ) {
                    typeGameConquest.skillBattle[skill].COOLDOWN[3] += internalUpDame
                };
            });
        }
        //++++
    });
    updateSttForSkillAffter();
}

//h√†m m·ªü ƒë√≥ng c√°c n√∫t trong giao di·ªán ch√≠nh
function showOrHiddenDiv(idDiv) {
    const allDivs = {
        menuStartGame: [document.getElementById("menuStartGame"), "Right"],
        bagInventory: [document.getElementById("bagInventory"), "Right"],
        rankBoard: [document.getElementById("rankBoard"), "Left"],
        popupQuestBoard: [document.getElementById("popupQuestBoard"), "Right"],
        menuContainer: [document.getElementById("menuContainer"), "Right"],
        hunterBoard: [document.getElementById("hunterBoard"), "Right"],
        popupBag: [document.getElementById("popupBag"), "Right"],
        popupShop: [document.getElementById("popupShop"), "Left"],
        popupSelectHunt: [document.getElementById("popupSelectHunt"), "Left"],
    };

    const mainDiv = allDivs[idDiv] ? allDivs[idDiv][0] : "";

    const direction = allDivs[idDiv] ? allDivs[idDiv][1] : "";
    let newTranslateX = direction === "Left" ? "-1200px" : "1200px";

    // ·∫®n t·∫•t c·∫£ div kh√°c theo h∆∞·ªõng ƒë√£ ƒë·ªãnh
    Object.entries(allDivs).forEach(([key, [div, dir]]) => {
        if (div && div !== mainDiv) {
            div.classList.remove("showDiv");
            div.classList.add("hiddenDiv");
            div.style.setProperty("--translateX", dir === "Left" ? "-1200px" : "1200px");
        }
    });

    // Ki·ªÉm tra n·∫øu idDiv kh√¥ng t·ªìn t·∫°i trong allDivs th√¨ b√°o l·ªói v√† tho√°t
    if (!allDivs[idDiv] || mainDiv === "") {
        console.error(`Kh√¥ng t√¨m th·∫•y ID: ${idDiv}`);
        return;
    }

    // Toggle tr·∫°ng th√°i c·ªßa mainDiv
    if (mainDiv.classList.contains("showDiv")) {
        mainDiv.classList.remove("showDiv");
        mainDiv.classList.add("hiddenDiv");
        mainDiv.style.setProperty("--translateX", newTranslateX);
    } else {
        mainDiv.classList.add("showDiv");
        mainDiv.classList.remove("hiddenDiv");
        mainDiv.style.setProperty("--translateX", "0px");
    }

    if (idDiv === "popupShop") {
        switchTabShop('gacha');
    }
}

//V√†o game
//Logic:
//Kh·ªüi ƒë·∫ßu -> hi·ªán shop + t·ªß ƒë·ªì -> l·∫•y ƒë·ªì -> s·∫Øp x·∫øp
//B·∫Øt ƒë·∫ßu tr·∫≠n -> b·∫•m n√∫t b·∫Øt ƒë·∫ßu ƒë·∫•u -> ƒë√≥ng t·ªß ƒë·ªì + shop + hi·ªán thanh ƒë·∫øm + hi·ªán ƒë·ªëi th·ªß
//ƒê√°nh xong -> Th·∫Øng -> ·∫©n ƒë·ªëi th·ªß + ·∫©n thanh ƒë·∫øm + hi·ªán shop + hi·ªán t·ªß ƒë·ªì -> l·∫•y ƒë·ªì s·∫Øp x·∫øp -> Ti·∫øp t·ª•c/Tho√°t tr·∫≠n
//Thua/tho√°t tr·∫≠n -> tho√°t game + hi·ªán b·∫£ng th√†nh t√≠ch -> c·ªông/tr·ª´ ƒëi·ªÉm x·∫øp h·∫°ng c·ªßa user
//B·∫•m ti·∫øp t·ª•c -> ·∫®n shop + hi·ªán ƒë·ªëi th·ªß (·∫©n 1 n·ª≠a b√†i) -> s·∫Øp x·∫øp b√†i -> Ti·∫øp t·ª•c/Tho√°t tr·∫≠n
//Tho√°t tr·∫≠n -> tho√°t game + hi·ªán b·∫£ng th√†nh t√≠ch -> c·ªông tr·ª´/ƒëi·ªÉm x·∫øp h·∫°ng c·ªßa user
//B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u -> ·∫®n t·ªß ƒë·ªì + ·∫®n shop + Hi·ªán thanh ƒë·∫øm + hi·ªán ƒë·ªëi th·ªß -> Th·∫Øng l·∫°i ti·∫øp t·ª•c...

//M·ªü menu ch·ªçn ch·∫ø ƒë·ªô ch∆°i

function openMenuStartGame() {

    if (onGame !== 0) { //M·ªü menu ƒë·ªÉ hi·ªÉn th·ªã ti·∫øp t·ª•c game
        openPopupContinueGame();
        return;
    } else {
        changeButtonMenuStartGame();
        showOrHiddenDiv("menuStartGame");
    }
}

function openPopupContinueGame() {
    document.getElementById("popupContinueGame").style.display = "flex";
    document.getElementById("popupOverlay").style.display = "block";

    const descPopupContinueGame = document.getElementById("descPopupContinueGame");

    let typeGameDesc, modeGameDesc, difficultyGameDesc;

    // X√°c ƒë·ªãnh ch·∫ø ƒë·ªô ch∆°i
    switch (infoStartGame.typeGame) {
        case "Conquest": typeGameDesc = "Chinh ph·ª•c"; break;
        case "Solo5Mon": typeGameDesc = "ƒê·ªëi kh√°ng"; break;
        case "Guess": typeGameDesc = "D·ª± ƒëo√°n"; break;
        default: typeGameDesc = "Kh√¥ng x√°c ƒë·ªãnh";
    }

    // X√°c ƒë·ªãnh ki·ªÉu ch∆°i
    switch (infoStartGame.modeGame) {
        case "Guide": modeGameDesc = "T·∫≠p luy·ªán"; break;
        case "Normal": modeGameDesc = "ƒê√°nh th∆∞·ªùng"; break;
        case "Rank": modeGameDesc = "X·∫øp h·∫°ng"; break;
        default: modeGameDesc = "Kh√¥ng x√°c ƒë·ªãnh";
    }

    // X√°c ƒë·ªãnh ƒë·ªô kh√≥
    switch (infoStartGame.difficultyGame) {
        case "Easy": difficultyGameDesc = "D·ªÖ"; break;
        case "Normal": difficultyGameDesc = "Th∆∞·ªùng"; break;
        case "Hard": difficultyGameDesc = "Kh√≥"; break;
        case "Very Hard": difficultyGameDesc = "Si√™u kh√≥"; break;
        case "Hell": difficultyGameDesc = "ƒê·ªãa ng·ª•c"; break;
        default: difficultyGameDesc = "Kh√¥ng x√°c ƒë·ªãnh";
    }

    let descOutGameRound1 = ""
    if (infoStartGame.roundGame <= 1 && infoStartGame.typeGame === "Conquest" && infoStartGame.modeGame === "Rank") {
        descOutGameRound1 = "N·∫øu b·ªè cu·ªôc ngay t·∫°i v√≤ng 1, b·∫°n s·∫Ω b·ªã tr·ª´ 10 ƒëi·ªÉm x·∫øp h·∫°ng"
    } else {
        descOutGameRound1 = ""
    }

    // Hi·ªÉn th·ªã th√¥ng tin trong popup
    let desc = `
<span>Hi·ªán t·∫°i b·∫°n ƒëang ·ªü trong m·ªôt tr·∫≠n ƒë·∫•u:</span><br>
<span>‚öîÔ∏è Ch·∫ø ƒë·ªô: <a style="color:rebeccapurple">${typeGameDesc} (${modeGameDesc})</a></span><br>
<span>‚öîÔ∏è ƒê·ªô kh√≥: <a style="color:rebeccapurple">${difficultyGameDesc}</a></span><br>
<span>‚öîÔ∏è V√≤ng ƒë·∫•u hi·ªán t·∫°i: <a style="color:rebeccapurple">${infoStartGame.roundGame} (Th·∫Øng: ${typeGameConquest.winBattle} / Thua ${typeGameConquest.loseBattle})</a></span><br>
<span>‚öîÔ∏è Ph·∫ßn th∆∞·ªüng hi·ªán c√≥:</span><br>
<span style="display: flex; flex-direction: row; justify-content: center; gap: 5px; font-weight: bold; width: 100%; color: rebeccapurple;">
<span> <i class="fa-solid fa-medal"></i>: <a>${typeGameConquest.pointBattle}</a> </span>
<span> <i class="fa-solid fa-gem"></i>: <a>0</a> </span>
<span> <i class="fa-solid fa-coins"></i>: <a>0</a> </span>
</span><br>
<span style="color:red">${descOutGameRound1}</span>

`;

    descPopupContinueGame.innerHTML = desc;

    if (infoStartGame.typeGame === "Conquest") {
        document.getElementById("continueGameButton").onclick = () => openGameRank();
        document.getElementById("exitGameButton").onclick = () => outGameRank();
    }

}

function closePopupContinueGame() {
    document.getElementById("popupContinueGame").style.display = "none";
    document.getElementById("popupOverlay").style.display = "none";
}


function changeButtonMenuStartGame() {

    document.getElementById("valueButtonTypeGame1").style.background = "#c25c5c";
    document.getElementById("valueButtonTypeGame2").style.background = "#c25c5c";
    document.getElementById("valueButtonTypeGame3").style.background = "#c25c5c";
    document.getElementById("valueButtonModeGame1").style.background = "#c25c5c";
    document.getElementById("valueButtonModeGame2").style.background = "#c25c5c";
    document.getElementById("valueButtonModeGame3").style.background = "#c25c5c";
    document.getElementById("valueButtonDifficultyGame1").style.background = "#c25c5c";
    document.getElementById("valueButtonDifficultyGame2").style.background = "#c25c5c";
    document.getElementById("valueButtonDifficultyGame3").style.background = "#c25c5c";
    document.getElementById("valueButtonDifficultyGame4").style.background = "#c25c5c";
    document.getElementById("valueButtonDifficultyGame5").style.background = "#c25c5c";

    document.getElementById("valueButtonTypeGame1").style.border = "0px solid";
    document.getElementById("valueButtonTypeGame2").style.border = "0px solid";
    document.getElementById("valueButtonTypeGame3").style.border = "0px solid";
    document.getElementById("valueButtonModeGame1").style.border = "0px solid";
    document.getElementById("valueButtonModeGame2").style.border = "0px solid";
    document.getElementById("valueButtonModeGame3").style.border = "0px solid";
    document.getElementById("valueButtonDifficultyGame1").style.border = "0px solid";
    document.getElementById("valueButtonDifficultyGame2").style.border = "0px solid";
    document.getElementById("valueButtonDifficultyGame3").style.border = "0px solid";
    document.getElementById("valueButtonDifficultyGame4").style.border = "0px solid";
    document.getElementById("valueButtonDifficultyGame5").style.border = "0px solid";

    let descGameRankTypeGame = ""
    let descGameRankModeGame = ""
    let descGameRankdifficultyGame = ""

    let descGameRank = ""
    document.getElementById("descGameRank").innerHTML = "";

    if (infoStartGame.typeGame === "Conquest") {
        document.getElementById("valueButtonTypeGame1").style.border = "2px solid";
        document.getElementById("valueButtonTypeGame1").style.background = "firebrick";
        descGameRankTypeGame = `<span>Ch·∫ø ƒë·ªô: Chinh ph·ª•c (Hi·ªán t·∫°i ch·ªâ m·ªü ƒë·∫•u x·∫øp h·∫°ng)</span>`;
    } else {
        document.getElementById("valueButtonTypeGame1").style.border = "0px solid";
        document.getElementById("valueButtonTypeGame1").style.background = "#c25c5c";
    }

    if (infoStartGame.typeGame === "Solo5Mon") {
        document.getElementById("valueButtonTypeGame2").style.border = "2px solid";
        document.getElementById("valueButtonTypeGame2").style.background = "firebrick";
        descGameRankTypeGame = `<span>Ch·∫ø ƒë·ªô: ƒê·ªëi kh√°ng (Ch∆∞a m·ªü)</span>`;
    } else {
        document.getElementById("valueButtonTypeGame2").style.border = "0px solid";
        document.getElementById("valueButtonTypeGame2").style.background = "#c25c5c";
    }

    if (infoStartGame.typeGame === "Guess") {
        document.getElementById("valueButtonTypeGame3").style.border = "2px solid";
        document.getElementById("valueButtonTypeGame3").style.background = "firebrick";
        descGameRankTypeGame = `<span>Ch·∫ø ƒë·ªô: D·ª± ƒëo√°n (Ch∆∞a m·ªü)</span>`;
    } else {
        document.getElementById("valueButtonTypeGame3").style.border = "0px solid";
        document.getElementById("valueButtonTypeGame3").style.background = "#c25c5c";
    }

    if (infoStartGame.modeGame === "Guide") {
        document.getElementById("valueButtonModeGame1").style.border = "2px solid";
        document.getElementById("valueButtonModeGame1").style.background = "firebrick";
        descGameRankModeGame = `<span>Lo·∫°i: ƒê·∫•u t·∫≠p</span>`;
    } else {
        document.getElementById("valueButtonModeGame1").style.border = "0px solid";
        document.getElementById("valueButtonModeGame1").style.background = "#c25c5c";
    }

    if (infoStartGame.modeGame === "Normal") {
        document.getElementById("valueButtonModeGame2").style.border = "2px solid";
        document.getElementById("valueButtonModeGame2").style.background = "firebrick";
        descGameRankModeGame = `<span>Lo·∫°i: ƒê·∫•u th∆∞·ªùng</span>`;
    } else {
        document.getElementById("valueButtonModeGame2").style.border = "0px solid";
        document.getElementById("valueButtonModeGame2").style.background = "#c25c5c";
    }

    if (infoStartGame.modeGame === "Rank") {
        document.getElementById("valueButtonModeGame3").style.border = "2px solid";
        document.getElementById("valueButtonModeGame3").style.background = "firebrick";
        descGameRankModeGame = `<span>Lo·∫°i: ƒê·∫•u x·∫øp h·∫°ng (y√™u c·∫ßu c√≥ 20 5Mon tr·ªü l√™n)</span>`;
        descGameRank = `ƒê·∫•u x·∫øp h·∫°ng ƒë·ªÉ nh·∫≠n ƒëi·ªÉm x·∫øp h·∫°ng (<i class="fa-solid fa-medal"></i>), ng∆∞·ªùi c√≥ th·ª© h·∫°ng cao m·ªói m√πa s·∫Ω nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng`;
    } else {
        document.getElementById("valueButtonModeGame3").style.border = "0px solid";
        document.getElementById("valueButtonModeGame3").style.background = "#c25c5c";
    }

    if (infoStartGame.difficultyGame === "Easy") {
        document.getElementById("valueButtonDifficultyGame1").style.border = "1px solid";
        document.getElementById("valueButtonDifficultyGame1").style.background = "firebrick";
        descGameRankdifficultyGame = `<span>ƒê·ªô kh√≥: D·ªÖ (x1 ƒëi·ªÉm <i class="fa-solid fa-medal"></i> khi ƒë·∫•u x·∫øp h·∫°ng)</span>`;
    } else {
        document.getElementById("valueButtonDifficultyGame1").style.border = "0px solid";
        document.getElementById("valueButtonDifficultyGame1").style.background = "#c25c5c";
    }

    if (infoStartGame.difficultyGame === "Normal") {
        document.getElementById("valueButtonDifficultyGame2").style.border = "1px solid";
        document.getElementById("valueButtonDifficultyGame2").style.background = "firebrick";
        descGameRankdifficultyGame = `<span>ƒê·ªô kh√≥: Th∆∞·ªùng (x1.2 ƒëi·ªÉm <i class="fa-solid fa-medal"></i> khi ƒë·∫•u x·∫øp h·∫°ng)</span>`;
    } else {
        document.getElementById("valueButtonDifficultyGame2").style.border = "0px solid";
        document.getElementById("valueButtonDifficultyGame2").style.background = "#c25c5c";
    }

    if (infoStartGame.difficultyGame === "Hard") {
        document.getElementById("valueButtonDifficultyGame3").style.border = "1px solid";
        document.getElementById("valueButtonDifficultyGame3").style.background = "firebrick";
        descGameRankdifficultyGame = `<span>ƒê·ªô kh√≥: Kh√≥ (x1.5 ƒëi·ªÉm <i class="fa-solid fa-medal"></i> khi ƒë·∫•u x·∫øp h·∫°ng)</span>`;
    } else {
        document.getElementById("valueButtonDifficultyGame3").style.border = "0px solid";
        document.getElementById("valueButtonDifficultyGame3").style.background = "#c25c5c";
    }

    if (infoStartGame.difficultyGame === "Very Hard") {
        document.getElementById("valueButtonDifficultyGame4").style.border = "1px solid";
        document.getElementById("valueButtonDifficultyGame4").style.background = "firebrick";
        descGameRankdifficultyGame = `<span>ƒê·ªô kh√≥: Si√™u kh√≥ (x2 ƒëi·ªÉm <i class="fa-solid fa-medal"></i> khi ƒë·∫•u x·∫øp h·∫°ng)</span>`;
    } else {
        document.getElementById("valueButtonDifficultyGame4").style.border = "0px solid";
        document.getElementById("valueButtonDifficultyGame4").style.background = "#c25c5c";
    }

    if (infoStartGame.difficultyGame === "Hell") {
        document.getElementById("valueButtonDifficultyGame5").style.border = "1px solid";
        document.getElementById("valueButtonDifficultyGame5").style.background = "firebrick";
        descGameRankdifficultyGame = `<span>ƒê·ªô kh√≥: ƒê·ªãa ng·ª•c (x3 ƒëi·ªÉm <i class="fa-solid fa-medal"></i> khi ƒë·∫•u x·∫øp h·∫°ng)</span>`;

    } else {
        document.getElementById("valueButtonDifficultyGame5").style.border = "0px solid";
        document.getElementById("valueButtonDifficultyGame5").style.background = "#c25c5c";
    }

    document.getElementById("descGameRank").innerHTML = `
<div>${descGameRankTypeGame}</div>
<div>${descGameRankModeGame}</div>
<div>${descGameRankdifficultyGame}</div>
<div>${descGameRank}</div>
`;

}

function checkButtonTypeGame(value) {
    infoStartGame.typeGame = value
    infoStartGame.modeGame = "No"
    infoStartGame.difficultyGame = "No"
    changeButtonMenuStartGame();
}

function checkButtonModeGame(value) {
    infoStartGame.modeGame = value
    changeButtonMenuStartGame();
}

function checkButtonDifficultyGame(value) {
    infoStartGame.difficultyGame = value
    changeButtonMenuStartGame();
}

function startGame() {
    closeMap();
    if (infoStartGame.typeGame === "Conquest") {
        if (infoStartGame.modeGame === "Guide") {

        } else if (infoStartGame.modeGame === "Normal") {

        } else if (infoStartGame.modeGame === "Rank") {
            if (infoStartGame.difficultyGame === "No") {
                messageOpen("Vui l√≤ng l·ª±a ch·ªçn ƒë·ªô kh√≥")
                return;
            }
            openGameRank();
        } else {
            messageOpen("H√£y l·ª±a ch·ªçn t·∫≠p luy·ªán ho·∫∑c ƒë√°nh th∆∞·ªùng ho·∫∑c x·∫øp h·∫°ng")
        }
    } else if (infoStartGame.typeGame === "Solo5Mon") {
        if (infoStartGame.modeGame === "Guide") {

        } else if (infoStartGame.modeGame === "Normal") {

        } else if (infoStartGame.modeGame === "Rank") {

        } else {
            messageOpen("H√£y l·ª±a ch·ªçn t·∫≠p luy·ªán ho·∫∑c ƒë√°nh th∆∞·ªùng ho·∫∑c x·∫øp h·∫°ng")
        }
    } else if (infoStartGame.typeGame === "Guess") {
        if (infoStartGame.modeGame === "Guide") {

        } else if (infoStartGame.modeGame === "Normal") {

        } else if (infoStartGame.modeGame === "Rank") {

        } else {
            messageOpen("H√£y l·ª±a ch·ªçn t·∫≠p luy·ªán ho·∫∑c ƒë√°nh th∆∞·ªùng ho·∫∑c x·∫øp h·∫°ng")
        }
    } else {
        messageOpen("H√£y l·ª±a ch·ªçn ch·∫ø ƒë·ªô ch∆°i")
    }

}


function openGameRank() {
    closePopupContinueGame();

    if (Object.entries(typeGameConquest.battleUserPet).length < 20 && onGame === 0) {
        messageOpen("5Mon b·∫°n mang theo kh√¥ng ƒë·ªß, vui l√≤ng ch·ªçn ƒë·ªß 20 5Mon ƒë·ªÉ ti·∫øn h√†nh chi·∫øn ƒë·∫•u!")
        showOrHiddenDiv("Close")
        openBag();
        return;
    }
    showOrHiddenDiv("Close")

    console.log("Open Game executed");
    startLoading();


    setTimeout(() => {
        //·∫®n trang ch·ªß
        document.getElementById('mainScreen').style.display = "none";
        document.getElementById('battleScreen').style.display = "flex";

        const shopZone = document.getElementById('shopZone');
        const compZone = document.getElementById('compZone');
        const timeZone = document.getElementById('timeZone');
        const inventoryZone = document.getElementById('inventoryZone');
        //Hi·ªán shop
        shopZone.style.display = "flex";
        //Hi·ªán t·ªß ƒë·ªì
        inventoryZone.style.display = "flex";
        //·∫®n ƒë·ªëi th·ªß
        compZone.style.display = "none";
        //·∫®n timeZone 
        timeZone.style.display = "none";

        // Th·ª±c hi·ªán logic c·ªßa openGame ·ªü ƒë√¢y
        const buttonNextStep = document.getElementById('nextStepGame');

        //Ch·∫ø ƒë·ªô d·ªÖ/b√¨nh th∆∞·ªùng/kh√≥
        if (infoStartGame.modeGame === "Normal") {
            modeGamePoint = 1.2;
        } else if (infoStartGame.modeGame === "Hard") {
            modeGamePoint = 1.5;
        } else if (infoStartGame.modeGame === "Very Hard") {
            modeGamePoint = 2;
        } else if (infoStartGame.modeGame === "Hell") {
            modeGamePoint = 3;
        } else {
            modeGamePoint = 1;
        }

        //Reset Lock shop
        for (let k = 1; k <= 5; k++) {
            LockBattleShop[`LockBattleShop${k}`] = false;
            document.getElementById(`LockBattleShop${k}`).style.color = 'rgb(255 161 115)'
        }

        //Tr∆∞·ªùng h·ª£p onGame c·ªßa ng∆∞·ªùi ch∆°i = 0
        if (onGame === 0 && infoStartGame.stepGame === 0) {

            //Reset Hp 
            resetMaxHpBattle();

            typeGameConquest.reRoll = 0;
            typeGameConquest.reRollPrice = 0
            typeGameConquest.starUser = 2;

            //G√°n HP
            nowHpBattleMy = (typeGameConquest.maxHpBattle + maxHpUp);
            document.querySelector('#hpBarB').querySelector('.hpText').textContent = (typeGameConquest.maxHpBattle + maxHpUp);

            typeGameConquest.battleUserPetRound = typeGameConquest.battleUserPet
            console.log("So s√°nh onGame === 0?")

            //Ch·ªçn nh√¢n v·∫≠t
            typeGameConquest.selectCharacterBattle = characterUser;

            //T·∫°o ra 4 skill
            randomSkillinShop();

            //Load th√¥ng tin ƒë·ªëi th·ªß => random ƒë·ªëi th·ªß
            //L·ªçc l·∫•y t·∫•t c·∫£ c√°c ƒë·ªëi th·ªß c√≥ s·ªë round = 1
            const roundCompRef = ref(db, `allCompsRound/round${infoStartGame.roundGame}`);
            get(roundCompRef).then(snapshot => {
                let candidates = (snapshot.val() || []).filter(comp => comp !== null);

                console.log("C√°c ƒë·ªëi th·ªß c√≥ th·ªÉ random", candidates);
                if (candidates.length > 0) {
                    // Random m·ªôt ƒë·ªëi th·ªß t·ª´ danh s√°ch ƒë√£ l·ªçc
                    let randomIndex = Math.floor(Math.random() * candidates.length);
                    let selectedComp = candidates[randomIndex];

                    typeGameConquest.usernameComp = selectedComp.usernameComp;
                    typeGameConquest.idComp = selectedComp.idComp;
                    typeGameConquest.nameComp = selectedComp.nameComp;
                    typeGameConquest.winComp = selectedComp.winComp;
                    typeGameConquest.loseComp = selectedComp.loseComp;
                    typeGameConquest.selectCharacterComp = selectedComp.selectCharacterComp;
                    typeGameConquest.dameCritA = selectedComp.dameCritA;
                    typeGameConquest.slowA = selectedComp.slowA;
                    typeGameConquest.upCooldownA = selectedComp.upCooldownA;
                    typeGameConquest.maxHpBattleComp = selectedComp.maxHpBattleComp;
                    
                    document.getElementById("textNameComp").innerText = typeGameConquest.nameComp;  
                    // G√°n th√¥ng tin k·ªπ nƒÉng c·ªßa ƒë·ªëi th·ªß v√†o typeGameConquest.skillBattle
                    for (let i = 1; i <= 9; i++) {
                        const skillKey = `skill${i}A`;
                        if (selectedComp.slotSkillComp[skillKey]) {

                            if (selectedComp.slotSkillComp[skillKey].ID) {
                                let sLvUpSTR, sLvUpDEF, sLvUpINT, sLvUpAGI, sLvUpLUK, sLvUpHP
                                sLvUpSTR = getScaleLevelUp(selectedComp.slotSkillComp[skillKey].POWER.STR);
                                sLvUpDEF = getScaleLevelUp(selectedComp.slotSkillComp[skillKey].POWER.DEF);
                                sLvUpINT = getScaleLevelUp(selectedComp.slotSkillComp[skillKey].POWER.INT);
                                sLvUpAGI = getScaleLevelUp(selectedComp.slotSkillComp[skillKey].POWER.AGI);
                                sLvUpLUK = getScaleLevelUp(selectedComp.slotSkillComp[skillKey].POWER.LUK);
                                sLvUpHP = getScaleLevelUp(selectedComp.slotSkillComp[skillKey].POWER.HP);
                                
                                selectedComp.slotSkillComp[skillKey].LVUPSCALE = {STR: sLvUpSTR, DEF: sLvUpDEF, INT: sLvUpINT, AGI: sLvUpAGI, LUK: sLvUpLUK, HP: sLvUpHP}
                            }

                            typeGameConquest.skillBattle[skillKey] = { ...selectedComp.slotSkillComp[skillKey] };
                        }
                    }

                    //pointrank cho comp
                    Object.keys(rankGame).forEach((key) => {
                        if (key === typeGameConquest.usernameComp) {
                            pointRankComp = rankGame[key].rankPoint.typeGameConquest;
                        }
                    });

                    console.log("ƒê·ªëi th·ªß ƒë√£ ch·ªçn:", selectedComp);
                    console.log("K·ªπ nƒÉng ƒë√£ g√°n v√†o typeGameConquest.skillBattle:", typeGameConquest.skillBattle);
                } else {
                    console.log("Kh√¥ng t√¨m th·∫•y ƒë·ªëi th·ªß c√≥ c√πng roundComp v·ªõi roundGame.");
                }

                //Kh·ªüi t·∫°o skill cho c√°c slot skill1A -> 9A
                createSkill("skillComp");
                onGame = 1;
                infoStartGame.stepGame = 1;

                //ƒê·ªïi n√∫t ti·∫øp t·ª•c th√†nh => onclick="nextStepGame1()"
                buttonNextStep.onclick = () => nextStepGame1();
                buttonNextStep.innerText = "Ti·∫øp t·ª•c"

                
            });
        } else {
            //Tr∆∞·ªùng h·ª£p round c·ªßa ng∆∞·ªùi ch∆°i > 0
            nowHpBattleMy = (typeGameConquest.maxHpBattle + maxHpUp);
            document.querySelector('#hpBarB').querySelector('.hpText').textContent = (typeGameConquest.maxHpBattle + maxHpUp);

            //load th√¥ng tin c·ªßa m√¨nh t·ª´ battlePetUseSlotRound sang cho typeGameConquest.skillBattle
            for (let skillKey = 0; skillKey < Object.keys(typeGameConquest.battlePetUseSlotRound).length; skillKey++) {
                let key = Object.keys(typeGameConquest.battlePetUseSlotRound)[skillKey]; // L·∫•y key th·ª±c t·∫ø t·ª´ Object.keys()
                let skill = typeGameConquest.battlePetUseSlotRound[key]; // L·∫•y gi√° tr·ªã skill d·ª±a tr√™n key
                if (skill.ID) {
                    typeGameConquest.skillBattle[key] = typeGameConquest.battlePetUseSlotRound[key]
                }
            }

            //Kh·ªüi t·∫°o skill trong c√°c slot shop
            createSkill("shop");

            //Kh·ªüi t·∫°o skill cho c√°c slot inv1 -> 10
            createSkill("inventory");

            //Load load slot skill
            createSkill("slotSkill");

            //Load th√¥ng tin ƒë·ªëi th·ªß

            //Kh·ªüi t·∫°o skill cho c√°c slot skill1A -> 9A
            createSkill("skillComp");

            if (infoStartGame.stepGame === 1) {
                buttonNextStep.onclick = () => nextStepGame1();
                buttonNextStep.innerText = "Ti·∫øp t·ª•c"
            } else if (infoStartGame.stepGame === 2) {
                nextStepGame1();
                buttonNextStep.onclick = () => startBattle();
                buttonNextStep.innerText = "‚öîÔ∏è Chi·∫øn ƒë·∫•u"
            } else if (infoStartGame.stepGame === 3) {
                nextStepGame1();
                startBattle();
            }

        }

        //Load cho c√°c slot skill
        loadEventSlotBattle();
        internalUp();
        resetHp5Mon();
        updateHpAndRageBar5Mon();
        updateHpbar();

        // loadSlotLock();

        document.getElementById('qtyResetShop').innerText = typeGameConquest.reRollPrice;
        document.getElementById('starUser').innerText = typeGameConquest.starUser;

        //Hi·ªÉn th·ªã s·ªë tr·∫≠n win/lose trong hpUser
        document.getElementById("hpUserWinOrLose").innerHTML = `${typeGameConquest.winBattle}/${typeGameConquest.loseBattle}`;
        // Gi·∫£m hpUser (Gi·ªõi h·∫°n t·ªëi ƒëa 10 l·∫ßn thua)
        let maxLose = 10; // S·ªë l·∫ßn thua t·ªëi ƒëa
        let perWinLose = typeGameConquest.loseBattle <= maxLose ? 100 - (typeGameConquest.loseBattle * 10) : 0; // Tr·ª´ 10% cho m·ªói l·∫ßn thua
        // C·∫≠p nh·∫≠t chi·ªÅu r·ªông thanh HP
        document.getElementById("hpUser").style.width = `${perWinLose}%`;
        // N·∫øu ng∆∞·ªùi ch∆°i h·∫øt HP, b·∫°n c√≥ th·ªÉ th√™m x·ª≠ l√Ω thua cu·ªôc
        if (typeGameConquest.loseBattle >= maxLose) {
            console.log("Game Over! Ng∆∞·ªùi ch∆°i ƒë√£ thua t·ªëi ƒëa 10 l·∫ßn.");
        }
        settingScreenBattle();
    }, 1000);
    endLoading();
}

function resetMaxHpBattle() {
    // let allHP5Mon = 0;
    // Object.values(typeGameConquest.battlePetUseSlotRound).forEach(slot => {
    //     if (slot.POWER && typeof slot.POWER.HP === "number") {
    //         allHP5Mon += slot.POWER.HP;
    //     }
    // });

    typeGameConquest.maxHpBattle = defaultHP + maxHpUp;
}



function nextStepGame1() {
    infoStartGame.stepGame = 2;
    checkUpdateLevel();
    console.log("Next Step Game 1 executed");
    startLoading();
    setTimeout(() => {
        const shopZone = document.getElementById('shopZone');
        const compZone = document.getElementById('compZone');
        const timeZone = document.getElementById('timeZone');
        const inventoryZone = document.getElementById('inventoryZone');
        const buttonNextStep = document.getElementById('nextStepGame');

        //Chuy·ªÉn skill c·ªßa ƒë·ªëi th·ªß kh√¥ng k√©o ƒë∆∞·ª£c
        const skillBattleOn = document.querySelectorAll('.skill');
        skillBattleOn.forEach((skill) => {
            if (skill.parentElement.parentElement.id === "skillBarA") {
                skill.setAttribute('draggable', 'false');
            }
        });

        //·∫®n shop
        shopZone.style.display = "none";
        //Hi·ªán t·ªß ƒë·ªì
        inventoryZone.style.display = "flex";
        //Hi·ªán ƒë·ªëi th·ªß
        compZone.style.display = "flex";
        //·∫®n timeZone 
        timeZone.style.display = "none";

        //X√≥a skill trong shop
        Object.keys(typeGameConquest.battlePetInShop).forEach((skill) => {
            let index = skill.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
            let skillLock = `LockBattleShop${index}`;
            if (LockBattleShop[skillLock] === false) {
                typeGameConquest.battlePetInShop[skill] = defaultSTT5Mon; // X√≥a k·ªπ nƒÉng kh·ªèi battlePetInShop
                LockBattleShop[skillLock] = false;
                document.getElementById(skillLock).style.color = 'rgb(255 161 115)'
            }
        });

        //L·∫•y th√¥ng tin ƒë·ªëi th·ªß
        //L·∫•y ch·ªâ s·ªë
        //HP
        document.querySelector('#hpBarA').querySelector('.hpText').textContent = typeGameConquest.maxHpBattleComp;
        document.querySelector('#hpBarA').querySelector('.hpFill').style.width = "100%";
        nowHpBattleComp = typeGameConquest.maxHpBattleComp;

        //ƒê·ªïi n√∫t ti·∫øp t·ª•c th√†nh => onclick="startBattle()"
        buttonNextStep.onclick = () => startBattle();
        buttonNextStep.innerText = "‚öîÔ∏è Chi·∫øn ƒë·∫•u"
    }, 1000);
    endLoading();
}


let curentHpAll5Mon = {
    skill1A: 0,
    skill2A: 0,
    skill3A: 0,
    skill4A: 0,
    skill5A: 0,
    skill6A: 0,
    skill7A: 0,
    skill8A: 0,
    skill9A: 0,

    skill1B: 0,
    skill2B: 0,
    skill3B: 0,
    skill4B: 0,
    skill5B: 0,
    skill6B: 0,
    skill7B: 0,
    skill8B: 0,
    skill9B: 0,
}

let maxHpAll5Mon = {
    skill1A: 0,
    skill2A: 0,
    skill3A: 0,
    skill4A: 0,
    skill5A: 0,
    skill6A: 0,
    skill7A: 0,
    skill8A: 0,
    skill9A: 0,

    skill1B: 0,
    skill2B: 0,
    skill3B: 0,
    skill4B: 0,
    skill5B: 0,
    skill6B: 0,
    skill7B: 0,
    skill8B: 0,
    skill9B: 0,
}

function resetHp5Mon() {
    Object.keys(maxHpAll5Mon).forEach((skill) => {
        if (
            typeGameConquest.skillBattle[skill] &&
            typeGameConquest.skillBattle[skill].POWER
        ) {
            if (typeGameConquest.skillBattle[skill].POWER.HP <= 0) {
                maxHpAll5Mon[skill] = 0;
            } else {
                const baseScale = 1;
                const scaleHP = baseScale * Math.log10(typeGameConquest.skillBattle[skill].POWER.HP);
                let valuePower = 2 * typeGameConquest.skillBattle[skill].POWER.HP / scaleHP + 100;

                let baseHP = Math.round(valuePower);

                maxHpAll5Mon[skill] = baseHP || 0;
            }
        }
    });

    // ‚úÖ Sao ch√©p k·∫øt qu·∫£ sau khi t√≠nh to√°n
    curentHpAll5Mon = { ...maxHpAll5Mon };

    [typeGameConquest.skillBattle, typeGameConquest.battlePetUseSlotRound].forEach((obj) => {
        Object.values(obj).forEach((skill) => {
            skill.COOLDOWN[4] = 0;
            skill.DAME[3] = 0;
            skill.HEAL[3] = 0;
            skill.SHIELD[3] = 0;
            skill.BURN[3] = 0;
            skill.POISON[3] = 0;
            skill.CRIT[3] = 0;
        });
    });

    updateHpAndRageBar5Mon();
}

function startBattle() {
    startLoading();
    infoStartGame.stepGame = 3;

    setTimeout(() => {
        console.log("Start Battle executed");
        //L∆∞u th√¥ng tin ng∆∞·ªùi d√πng, tr·∫≠n ƒë·∫•u
        //Reset th√¥ng s·ªë shield/burn/poison c·ªßa 2 team
        nowShieldBattleMy = 0;
        nowBurnBattleMy = 0;
        nowPoisonBattleMy = 0;
        nowShieldBattleComp = 0;
        nowBurnBattleComp = 0;
        nowPoisonBattleComp = 0;

        //T√≠nh HP cho t·∫•t c·∫£ c√°c 5Mon 2 b√™n
        resetHp5Mon();

        //Chuy·ªÉn t·∫•t c·∫£ skill kh√¥ng k√©o ƒë∆∞·ª£c
        const skillBattleOn = document.querySelectorAll('.skill');
        skillBattleOn.forEach((skill) => {
            skill.setAttribute('draggable', 'false');
            console.log("Chuy·ªÉn v·ªÅ kh√¥ng k√©o ƒë∆∞·ª£c")
        });
        const slotBattleOn = document.querySelectorAll('.slotSkill');
        slotBattleOn.forEach((slot) => {
            slot.classList.add("occupied")
            console.log("Chuy·ªÉn v·ªÅ slot kh√¥ng ƒë∆∞a skill v√†o ƒë∆∞·ª£c")
        });

        //X√≥a t·∫•t c·∫£ c√°c hi·ªáu ·ª©ng uplevel
        document.querySelectorAll('.updateSkillLevel').forEach(div => {
            div.classList.remove('updateSkillLevel');
        });

        document.querySelectorAll('.upgrade-icon').forEach(icon => {
            icon.remove();
        });

        updateHpbar();
        setTimeout(() => {
            battleStartTime(true);
            // cooldownSkillBattleB();
            // cooldownSkillBattleA();
        }, 3000);
        const shopZone = document.getElementById('shopZone');
        const compZone = document.getElementById('compZone');
        const timeZone = document.getElementById('timeZone');
        const inventoryZone = document.getElementById('inventoryZone');

        endGame = false;

        //·∫®n shop
        shopZone.style.display = "none";
        //·∫®n t·ªß ƒë·ªì
        inventoryZone.style.display = "none";
        //Hi·ªán ƒë·ªëi th·ªß
        compZone.style.display = "flex";
        //Hi·ªán timeZone 
        timeZone.style.display = "flex";

        // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p cooldown skill
        for (let s = 1; s <= 9; s++) {
            const skillB = typeGameConquest.skillBattle[`skill${s}B`];
            if (skillB.COOLDOWN[0] > 0) {
                baseAttack(`skill${s}B`, false);
            }

            const skillA = typeGameConquest.skillBattle[`skill${s}A`];
            if (skillA.COOLDOWN[0] > 0) {
                baseAttack(`skill${s}A`, true);
            }
        }

        //ƒë·∫°t ƒëi·ªÅu ki·ªán th√¨ chi·∫øn th·∫Øng v√† g·ªçi endBattle() => d·ª´ng t·∫•t c·∫£ cooldown v√† tr·ª´ m√°u

        //ƒê·ªïi n√∫t ti·∫øp t·ª•c th√†nh => onclick="startBattle()"

    }, 2000);
    endLoading();
}



let intervalID = null;
let intervalIdOverTime = null;

function endBattle(whoWin, pointsThisRound) {
    const shopZone = document.getElementById('shopZone');
    const compZone = document.getElementById('compZone');
    const timeZone = document.getElementById('timeZone');
    const inventoryZone = document.getElementById('inventoryZone');
    const buttonNextStep = document.getElementById('nextStepGame');

    //C·ªông ƒëi·ªÉm / tr·ª´ ƒëi·ªÉm
    if (whoWin === "Comp") {
        typeGameConquest.loseBattle += 1;
        typeGameConquest.pointBattle -= pointsThisRound;
    } else {
        typeGameConquest.winBattle += 1;
        typeGameConquest.pointBattle += pointsThisRound;
    }

    //T√¨m nh√¢n v·∫≠t ƒë·ªÉ tƒÉng ch·ªâ s·ªë m·ªói round cho ng∆∞·ªùi ch∆°i user
    upSTTRoundWithCharacter();

    //C·ªông star m·ªói round
    const bonusStars = Math.floor(typeGameConquest.starUser / 5);
    typeGameConquest.starUser += infoStartGame.roundGame + 1 + bonusStars;
    document.getElementById("starUser").innerText = typeGameConquest.starUser;
    
    //TƒÉng round
    infoStartGame.roundGame += 1 //TƒÉng round sau khi endBattle
    //Reset Battle time

    clearInterval(intervalID)
    intervalID = null;
    document.getElementById('cooldownBarContainer').classList.remove('comp');
    //Reset hi·ªáu ·ª©ng tr·ª´ m√°u khi over time
    clearInterval(intervalIdOverTime)
    intervalIdOverTime = null
    damageOverTime = 1 //+++++++++

    //Reset th√¥ng s·ªë shield/burn/poison c·ªßa 2 team
    nowShieldBattleMy = 0;
    nowBurnBattleMy = 0;
    nowPoisonBattleMy = 0;
    nowShieldBattleComp = 0;
    nowBurnBattleComp = 0;
    nowPoisonBattleComp = 0;

    skillsSleepA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
    skillsSleepB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };
    skillsDeleteA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
    skillsDeleteB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };
    // limitSkillsA = {skill1A: 0,skill2A: 0,skill3A: 0,skill4A: 0,skill5A: 0,skill6A: 0,skill7A: 0,skill8A: 0,skill9A: 0};
    // limitSkillsB = {skill1B: 0,skill2B: 0,skill3B: 0,skill4B: 0,skill5B: 0,skill6B: 0,skill7B: 0,skill8B: 0,skill9B: 0};
    skillQueueMirror = {};
    skillQueue = {};
    countSkillQueue = 0;
    countSkillQueueMirror = 0;

    skillsSpeedA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
    skillsSpeedB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };

    // X√≥a t·∫•t c·∫£ c√°c th·∫ª div c√≥ class "sleepTimer"
    ['sleepTimer', 'hasteTimer', 'slowTimer'].forEach(timerClass => {
        document.querySelectorAll(`.${timerClass}`).forEach(timerEl => {
            const skillEl = timerEl.parentElement;

            // T√™n bi·∫øn intervalId t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng lo·∫°i
            let intervalKey = '';
            if (timerClass === 'sleepTimer') intervalKey = 'sleepIntervalId';
            else if (timerClass === 'hasteTimer') intervalKey = 'hasteIntervalId';
            else if (timerClass === 'slowTimer') intervalKey = 'slowIntervalId';

            if (skillEl && skillEl[intervalKey]) {
                clearInterval(skillEl[intervalKey]);
                skillEl[intervalKey] = null;
            }

            timerEl.remove();
        });
    });


    //reset Hp5Mon
    resetHp5Mon();

    console.log("skillQueueMirror", skillQueueMirror, skillQueue)
    Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
        const skillElement = document.getElementById(skill);
        if (skillElement) {
            const skillChild = skillElement.querySelector('.skill');
            if (skillChild && skillChild.classList.contains('sleep')) {
                skillChild.classList.remove('sleep');
            }
        }
    });

    Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
        const skillElement = document.getElementById(skill);
        if (skillElement) {
            const skillChild = skillElement.querySelector('.skill');
            if (skillChild && skillChild.classList.contains('delete')) {
                skillChild.classList.remove('delete');
            }
        }
    });

    //Reset th·ªùi gian chi·∫øn ƒë·∫•u
    cooldownDuration = 90; //++++++++
    decrementPercent = 100;
    cooldownRemaining = cooldownDuration; // Th·ªùi gian c√≤n l·∫°i


    endGame = true;
    infoStartGame.stepGame = 1;
    //Th√™m ƒëi·ªÉm win round v√†o bi·∫øn ƒëi·ªÉm cho user + tƒÉng th√™m 1 round l√™n + l∆∞u data ng∆∞·ªùi ch∆°i v√†o data

    //Random ƒë·ªì trong shop
    //3 ƒë·ªì trong bi·∫øn petBattle, 1 ƒë·ªì random t·ª´ compPet

    //X√≥a to√†n b·ªô th√¥ng tin comp round c≈© => load comp round m·ªõi

    //Hi·ªán shop
    shopZone.style.display = "flex";
    //Hi·ªán t·ªß ƒë·ªì
    inventoryZone.style.display = "flex";
    //·∫®n ƒë·ªëi th·ªß
    compZone.style.display = "none";
    //·∫®n timeZone 
    timeZone.style.display = "none";

    //reset Hp ng∆∞·ªùi ch∆°i
    //HP
    document.querySelector('#hpBarB').querySelector('.hpText').textContent = (typeGameConquest.maxHpBattle + maxHpUp);
    document.querySelector('#hpBarB').querySelector('.hpFill').style.width = "100%";
    nowHpBattleMy = (typeGameConquest.maxHpBattle + maxHpUp);
    nowShieldBattleMy = 0;
    document.querySelector('#hpBarB').querySelector('.shieldText').textContent = "";
    document.querySelector('#hpBarB').querySelector('.shieldFill').style.width = "0%";
    console.log("Win - reset Hp c·ªßa ta:", nowHpBattleMy)

    //ƒê·ªïi n√∫t ti·∫øp t·ª•c th√†nh => onclick="nextStepGame1()"
    buttonNextStep.onclick = () => nextStepGame1();
    buttonNextStep.innerText = "Ti·∫øp t·ª•c"

    //Chuy·ªÉn skill v·ªÅ k√©o ƒë∆∞·ª£c
    const skillBattleOn = document.querySelectorAll('.skill');
    skillBattleOn.forEach((skill) => {
        if (skill.parentElement.parentElement.id === "skillBarA") {

        } else {
            skill.setAttribute('draggable', 'true');
            console.log("Chuy·ªÉn v·ªÅ k√©o ƒë∆∞·ª£c")
        }
    });
    const slotBattleOn = document.querySelectorAll('.slotSkill');
    slotBattleOn.forEach((slot) => {
        // Ki·ªÉm tra n·∫øu c√≥ ph·∫ßn t·ª≠ con v·ªõi class 'skill'
        const hasSkill = Array.from(slot.children).some(child => child.classList.contains('skill'));

        if (hasSkill) {
            console.log('Slot n√†y c√≥ ch·ª©a skill!');
            // Th·ª±c hi·ªán logic khi slot c√≥ ph·∫ßn t·ª≠ con l√† skill
        } else {
            console.log('Slot n√†y kh√¥ng c√≥ ch·ª©a skill!');
            slot.classList.remove("occupied")
            // Th·ª±c hi·ªán logic khi slot kh√¥ng c√≥ ph·∫ßn t·ª≠ con l√† skill
        }
    });


    console.log("Th√¥ng tin m·ªõi", typeGameConquest.skillBattle)
    updateSttForSkillAffter();

    //Chuy·ªÉn hi·ªÉn th·ªã n·ªô v·ªÅ 0 h·∫øt
    const overlays = document.querySelectorAll('.skillCooldownOverlay');
    overlays.forEach((overlay) => {
        overlay.style.transitionDuration = '0ms'; // Kh√¥ng c√≥ hi·ªáu ·ª©ng chuy·ªÉn ti·∫øp ban ƒë·∫ßu
        overlay.style.transform = 'scaleY(0)';    // ƒê·∫∑t overlay ƒë·∫ßy (hi·ªán full)
    });

    //Random t√¨m ƒë·ªëi th·ªß m·ªõi
    const roundCompRef = ref(db, `allCompsRound/round${infoStartGame.roundGame}`);
    get(roundCompRef).then(snapshot => {
        let candidates = (snapshot.val() || []).filter(comp => comp !== null);
        
        console.log("C√°c ƒë·ªëi th·ªß c√≥ th·ªÉ random", candidates);
        if (candidates.length > 0) {
            // Random m·ªôt ƒë·ªëi th·ªß t·ª´ danh s√°ch ƒë√£ l·ªçc
            let randomIndex = Math.floor(Math.random() * candidates.length);
            let selectedComp = candidates[randomIndex];
            typeGameConquest.usernameComp = selectedComp.usernameComp;
            typeGameConquest.idComp = selectedComp.idComp;
            typeGameConquest.nameComp = selectedComp.nameComp;
            typeGameConquest.winComp = selectedComp.winComp;
            typeGameConquest.loseComp = selectedComp.loseComp;
            typeGameConquest.maxHpBattleComp = selectedComp.maxHpBattleComp;
            document.getElementById("textNameComp").innerText = typeGameConquest.nameComp;
            // G√°n th√¥ng tin k·ªπ nƒÉng c·ªßa ƒë·ªëi th·ªß v√†o typeGameConquest.skillBattle
            for (let i = 1; i <= 9; i++) {
                const skillKey = `skill${i}A`;
                if (selectedComp.slotSkillComp[skillKey]) {
                    typeGameConquest.skillBattle[skillKey] = { ...selectedComp.slotSkillComp[skillKey] };
                }
            }

            //pointrank cho comp
            Object.keys(rankGame).forEach((key) => {
                if (key === typeGameConquest.usernameComp) {
                    pointRankComp = rankGame[key].rankPoint.typeGameConquest;
                }
            });

            console.log("ƒê·ªëi th·ªß ƒë√£ ch·ªçn:", selectedComp);
            console.log("K·ªπ nƒÉng ƒë√£ g√°n v√†o typeGameConquest.skillBattle:", typeGameConquest.skillBattle);
        } else {
            console.log("Kh√¥ng t√¨m th·∫•y ƒë·ªëi th·ªß c√≥ c√πng roundComp v·ªõi roundGame.");
        }

        for (let s = 1; s <= 9; s++) {
            document.querySelector(`#skill${s}A`).innerHTML = `<div class="skillCooldownOverlay"></div>`
        }

        //Kh·ªüi t·∫°o skill cho c√°c slot skill1A -> 9A
        createSkill("skillComp");
    });

    //T·∫Øt th√¥ng b√°o chi·∫øn th·∫Øng/thua cu·ªôc
    const resultScreen = document.getElementById('resultScreen');
    resultScreen.classList.add('hidden'); // Hi·ªÉn th·ªã m√†n h√¨nh

    //Reset n·ªô v√† dame + th√™m trong tr·∫≠n cho t·∫•t c·∫£
    Object.values(typeGameConquest.skillBattle).forEach((skill) => {
        skill.COOLDOWN[4] = 0;
        skill.DAME[3] = 0;
        skill.HEAL[3] = 0;
        skill.SHIELD[3] = 0;
        skill.BURN[3] = 0;
        skill.POISON[3] = 0;
        skill.CRIT[3] = 0;
    });

    //Hi·ªÉn th·ªã s·ªë tr·∫≠n win/lose trong hpUser
    document.getElementById("hpUserWinOrLose").innerHTML = `${typeGameConquest.winBattle}/${typeGameConquest.loseBattle}`;
    // Gi·∫£m hpUser (Gi·ªõi h·∫°n t·ªëi ƒëa 10 l·∫ßn thua)
    let maxLose = 10; // S·ªë l·∫ßn thua t·ªëi ƒëa
    let perWinLose = typeGameConquest.loseBattle <= maxLose ? 100 - (typeGameConquest.loseBattle * 10) : 0; // Tr·ª´ 10% cho m·ªói l·∫ßn thua
    // C·∫≠p nh·∫≠t chi·ªÅu r·ªông thanh HP
    document.getElementById("hpUser").style.width = `${perWinLose}%`;
    // N·∫øu ng∆∞·ªùi ch∆°i h·∫øt HP, b·∫°n c√≥ th·ªÉ th√™m x·ª≠ l√Ω thua cu·ªôc
    if (typeGameConquest.loseBattle >= maxLose) {
        console.log("Game Over! Ng∆∞·ªùi ch∆°i ƒë√£ thua t·ªëi ƒëa 10 l·∫ßn.");
    }

    updateHpbar();
}

function upSTTRoundWithCharacter() {
    let addMultiFn = 0;
    //+++++
    //Ki·ªÉm tra xem nh√¢n v·∫≠t battle l√† g√¨
    for (let i = 0; i < allCharacter.length; i++) {
        if (allCharacter[i].id === typeGameConquest.selectCharacterBattle) {

            typeGameConquest.maxHpBattle += allCharacter[i].hpMax

            Object.keys(typeGameConquest.skillBattle).forEach((key) => {
                if (typeGameConquest.skillBattle[key].ID !== "" &&
                    key.endsWith("B")) {
                    if (typeGameConquest.skillBattle[key].DAME[0] > 0 && allCharacter[i].upDame > 0) {
                        typeGameConquest.skillBattle[key].DAME[1] += allCharacter[i].upDame
                    }
                    if (typeGameConquest.skillBattle[key].HEAL[0] > 0 && allCharacter[i].upHeal > 0) {
                        typeGameConquest.skillBattle[key].HEAL[1] += allCharacter[i].upHeal
                    }
                    if (typeGameConquest.skillBattle[key].SHIELD[0] > 0 && allCharacter[i].upShield > 0) {
                        typeGameConquest.skillBattle[key].SHIELD[1] += allCharacter[i].upShield
                    }
                    if (typeGameConquest.skillBattle[key].BURN[0] > 0 && allCharacter[i].upBurn > 0) {
                        typeGameConquest.skillBattle[key].BURN[1] += allCharacter[i].upBurn
                    }
                    if (typeGameConquest.skillBattle[key].POISON[0] > 0 && allCharacter[i].upPoison > 0) {
                        typeGameConquest.skillBattle[key].POISON[1] += allCharacter[i].upPoison
                    }
                    if (typeGameConquest.skillBattle[key].CRIT[0] > 0 && allCharacter[i].upCrit > 0) {
                        typeGameConquest.skillBattle[key].CRIT[1] += allCharacter[i].upCrit
                    }
                    //Sau 3 round th√¨ m·ªõi c·ªông multi ng·∫´u nhi√™n 1 5mon

                    // if (typeGameConquest.skillBattle[key].COOLDOWN[1] > 0 && allCharacter[i].upMulti > 0 && infoStartGame.roundGame % 3 === 0 && addMultiFn === 0) {
                    //     // L·ªçc danh s√°ch c√°c skill k·∫øt th√∫c b·∫±ng "B"
                    //     const skillBKeys = Object.keys(typeGameConquest.skillBattle).filter(key1 =>
                    //         typeGameConquest.skillBattle[key1].ID !== "" && key1.endsWith("B")
                    //     );

                    //     if (skillBKeys.length > 0) {
                    //         // Ch·ªçn ng·∫´u nhi√™n m·ªôt skill t·ª´ danh s√°ch
                    //         const randomKey = skillBKeys[Math.floor(Math.random() * skillBKeys.length)];

                    //         // C·∫≠p nh·∫≠t COOLDOWN c·ªßa skill ng·∫´u nhi√™n
                    //         typeGameConquest.skillBattle[randomKey].COOLDOWN[2] += allCharacter[i].upMulti;
                    //         addMultiFn = 1;

                    //         console.log(`Skill "${randomKey}" ƒë∆∞·ª£c random v√† c·∫≠p nh·∫≠t COOLDOWN!`);
                    //     } else {
                    //         console.log("Kh√¥ng c√≥ skill n√†o k·∫øt th√∫c b·∫±ng 'B'.");
                    //     }
                    // }
                }
            });

            if (allCharacter[i].upCooldown > 0) {
                typeGameConquest.upCooldownB += allCharacter[i].upCooldown
            }
            if (allCharacter[i].slow > 0) {
                typeGameConquest.slowB += allCharacter[i].slow
            }
            if (allCharacter[i].dameCrit > 0) {
                typeGameConquest.dameCritB += allCharacter[i].dameCrit
            }

            updateSttForSkillAffter();
            break;
        }
    }
}

function stopSkillGame() {
    // Ch·ªçn t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c√≥ class .skillCooldownOverlay
    const overlays = document.querySelectorAll('.skillCooldownOverlay');

    // Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ v√† thay ƒë·ªïi tr·ª±c ti·∫øp thu·ªôc t√≠nh background
    overlays.forEach((overlay) => {
        overlay.style.transitionDuration = '0ms'; // Kh√¥ng c√≥ hi·ªáu ·ª©ng chuy·ªÉn ti·∫øp ban ƒë·∫ßu
        overlay.style.transform = 'scaleY(0)';    // ƒê·∫∑t overlay ƒë·∫ßy (hi·ªán full)
    });

    // H·ªßy t·∫•t c·∫£ requestAnimationFrame
    animationFrameIds.forEach(frameId => cancelAnimationFrame(frameId));
    animationFrameIds = []; // X√≥a to√†n b·ªô ID ƒë√£ l∆∞u

    console.log("Background changed to none");
}

//Khi tho√°t ho·∫∑c thua tr·∫≠n trong game
function outGameRank() {
    closePopupContinueGame();

    startLoading();
    setTimeout(() => {

        //C·ªông ƒëi·ªÉm rank & reset ƒëi·ªÉm trong game
        if (infoStartGame.roundGame <= 1) {
            pointRank.typeGameConquest -= 10;
        } else {
            pointRank.typeGameConquest += typeGameConquest.pointBattle;
        }

        resetOutGame();

        typeGameConquest.pointBattle = 0;

        // X√≥a h·∫øt skill trong slot
        Object.keys(typeGameConquest.skillBattle).forEach((key) => {
            typeGameConquest.skillBattle[key] = defaultSTT5Mon;
        });

        Object.keys(typeGameConquest.battlePetUseSlotRound).forEach((key) => {
            typeGameConquest.battlePetUseSlotRound[key] = defaultSTT5Mon;
        });

        // X√≥a h·∫øt skill trong inventory
        Object.keys(typeGameConquest.battlePetInInventory).forEach((key) => {
            typeGameConquest.battlePetInInventory[key] = defaultSTT5Mon;
        });

        // X√≥a skill trong shop
        Object.keys(typeGameConquest.battlePetInShop).forEach((key) => {
            typeGameConquest.battlePetInShop[key] = defaultSTT5Mon;
            let index = key.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
            let skillLock = `LockBattleShop${index}`;
            LockBattleShop[skillLock] = false;
            document.getElementById(skillLock).style.color = 'rgb(255 161 115)'
        });

        //X√≥a to√†n b·ªô div skill
        for (let i = 1; i <= 9; i++) {
            const skillCompSlot = `skill${i}A`;
            const skillCompDiv = document.querySelector(`#${skillCompSlot}`);
            skillCompDiv.innerHTML = `<div class="skillCooldownOverlay"></div>`
        }

        for (let i = 1; i <= 9; i++) {
            const skillCompSlot = `skill${i}B`;
            const skillCompDiv = document.querySelector(`#${skillCompSlot}`);
            skillCompDiv.innerHTML = `<div class="skillCooldownOverlay"></div>`

            skillCompDiv.classList.remove("occupied")
        }

        for (let i = 0; i < 9; i++) {
            const skillCompSlot = `battleInv${i + 1}`;
            const skillCompDiv = document.querySelector(`#${skillCompSlot}`);
            skillCompDiv.innerHTML = ""
            skillCompDiv.classList.remove("occupied")
        }

        for (let i = 0; i < 5; i++) {
            const skillCompSlot = `battleShop${i + 1}`;
            const skillCompDiv = document.querySelector(`#${skillCompSlot}`);
            skillCompDiv.innerHTML = ""
        }

        loadAllData();

        //reset bi·∫øn random id skill
        idSkillRND = 0;

        document.getElementById("mainScreen").style.display = "flex";
        document.getElementById("battleScreen").style.display = "none";
        document.getElementById('nextStepGame').onclick = () => nextStepGame1();
        document.getElementById('nextStepGame').innerText = "Ti·∫øp t·ª•c"
        resetGoldAndTicket();
        closePopupSetting();
    }, 1000);
    endLoading();
}

let LockBattleShop = {
    LockBattleShop1: false,
    LockBattleShop2: false,
    LockBattleShop3: false,
    LockBattleShop4: false,
    LockBattleShop5: false,
}
//L·ªçc 5mon shop - kh√≥a 5mon shop
function lock5MonShop(item) {
    let index = item.match(/\d+$/)?.[0]; // l·∫•y s·ªë ·ªü cu·ªëi skill.parentElement.id
    let skill = `battleShop${index}`;

    if (typeGameConquest.battlePetInShop[skill]?.ID) {
        if (LockBattleShop[item] === true) {
            LockBattleShop[item] = false;
            document.getElementById(item).style.color = 'rgb(255 161 115)';
        } else {
            LockBattleShop[item] = true;
            document.getElementById(item).style.color = 'rgb(255 85 0)';
        }
    }
}

function reRollShop() { //++++++++++++++
    const resetButton = document.getElementById("resetShop");

    if (typeGameConquest.starUser >= typeGameConquest.reRollPrice) {
        randomSkillinShop();
        typeGameConquest.starUser -= typeGameConquest.reRollPrice
        typeGameConquest.reRoll += 1
        typeGameConquest.reRollPrice += typeGameConquest.reRoll
        document.getElementById("qtyResetShop").innerText = typeGameConquest.reRollPrice;
        document.getElementById("starUser").innerText = typeGameConquest.starUser;
    } else {
        messageOpen(`Kh√¥ng ƒë·ªß sao ƒë·ªÉ l√†m m·ªõi, c·∫ßn ${typeGameConquest.reRollPrice} <i class="fa-solid fa-splotch"></i>`)
    }
}
//H√†m random skill
function randomSkillinShop() {
    const battleUserPetRound1 = structuredClone(typeGameConquest.battleUserPetRound);

    // Kh·ªüi t·∫°o c√°c slot shop
    for (let i = 0; i < 5; i++) {
        //Ki·ªÉm tra xem c√≥ lock shop kh√¥ng
        if (LockBattleShop[`LockBattleShop${i + 1}`] === false) {
            typeGameConquest.battlePetInShop[`battleShop${i + 1}`] = defaultSTT5Mon
        }
    }

    // L·∫•y to√†n b·ªô danh s√°ch k·ªπ nƒÉng
    const allSkills = Object.values(battleUserPetRound1);

    // L∆∞u tr·ªØ danh s√°ch k·ªπ nƒÉng ƒë√£ ch·ªçn theo ID (ƒë·ªÉ tr√°nh tr√πng)
    let selectedSkillIDs = [];

    for (let i = 0; i < 5; i++) {
        //Ki·ªÉm tra xem c√≥ lock shop kh√¥ng
        if (LockBattleShop[`LockBattleShop${i + 1}`] === true) {
            continue;
        }

        const availableSkills = allSkills.filter(skill => !selectedSkillIDs.includes(skill.ID));

        if (availableSkills.length === 0) {
            console.warn("Kh√¥ng c√≤n k·ªπ nƒÉng n√†o ƒë·ªÉ ch·ªçn!");
            break;
        }

        const randomIndex = Math.floor(Math.random() * availableSkills.length);
        const selectedSkill = availableSkills[randomIndex];

        selectedSkillIDs.push(selectedSkill.ID); // Ghi l·∫°i ID ƒë√£ ch·ªçn

        selectedSkill.PRICESELL = 0;
        let sLvUpSTR, sLvUpDEF, sLvUpINT, sLvUpAGI, sLvUpLUK, sLvUpHP
        sLvUpSTR = getScaleLevelUp(selectedSkill.POWER.STR);
        sLvUpDEF = getScaleLevelUp(selectedSkill.POWER.DEF);
        sLvUpINT = getScaleLevelUp(selectedSkill.POWER.INT);
        sLvUpAGI = getScaleLevelUp(selectedSkill.POWER.AGI);
        sLvUpLUK = getScaleLevelUp(selectedSkill.POWER.LUK);
        sLvUpHP = getScaleLevelUp(selectedSkill.POWER.HP);
        
        selectedSkill.LVUPSCALE = {STR: sLvUpSTR, DEF: sLvUpDEF, INT: sLvUpINT, AGI: sLvUpAGI, LUK: sLvUpLUK, HP: sLvUpHP}
        console.log("selectedSkill", selectedSkill)
        // ƒê·∫∑t v√†o UI
        const shopSlot = `battleShop${i + 1}`;
        const shopDiv = document.querySelector(`#${shopSlot}`);

        let URLimg = selectedSkill.URLimg[`Lv${selectedSkill.LEVEL}`] || selectedSkill.URLimg['Lv1'];
        
        if (shopDiv) {
            shopDiv.innerHTML = `
            <div 
            id="skill${idSkillRND}" 
            class="skill"
            draggable="true"
            style="background-image: url('${URLimg}')"
            data-skill='{"ID": "${selectedSkill.ID}", "LEVEL": ${selectedSkill.LEVEL}}'>
            </div>`;

            let dameSkillText = ``;
            const dameSkillDiv = document.querySelector(`#skill${idSkillRND}`);

            if (dameSkillDiv) {
                if (selectedSkill.DAME[0] > 0) {
                    dameSkillText += `<div class="skill-dame">${Number(selectedSkill.DAME[0])}</div>`;
                }
                if (selectedSkill.HEAL[0] > 0) {
                    dameSkillText += `<div class="skill-heal">${Number(selectedSkill.HEAL[0])}</div>`;
                }
                if (selectedSkill.SHIELD[0] > 0) {
                    dameSkillText += `<div class="skill-shield">${Number(selectedSkill.SHIELD[0])}</div>`;
                }
                if (selectedSkill.BURN[0] > 0) {
                    dameSkillText += `<div class="skill-burn">${Number(selectedSkill.BURN[0])}</div>`;
                }
                if (selectedSkill.POISON[0] > 0) {
                    dameSkillText += `<div class="skill-poison">${Number(selectedSkill.POISON[0])}</div>`;
                }
                if (selectedSkill.EFFECT.includes("Freeze")) {
                    dameSkillText += `<div class="skill-freeze">${Number(selectedSkill.COOLDOWN[0] / 2 / 1000 * selectedSkill.LEVEL)}</div>`;
                }

                dameSkillDiv.innerHTML = `
                <div class="levelSkillColor" style="position: absolute;font-size: 16px;font-weight: bold;color: #d80789;text-shadow: 0px 1px 2px #0000008a;top: -8px;right: -8px;">
                <i class="fa-solid fa-diamond"></i>
                <span class="levelSkillText" style="position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);font-size: 12px;color: white;font-weight: bold;">${selectedSkill.LEVEL}</span>
                </div>

                <div class="dameSkillText" style="display: flex; flex-direction: row; align-items: center;">
                ${dameSkillText}
                </div>

                <div style="position: absolute;font-size: 18px;font-weight: bold;color: rgb(0 88 255);text-shadow: 1px 1px 2px #140a03;
                top: -6px; left: -6px; z-index: 1;">
                    <i class="fa-solid fa-splotch" style="
                        position: absolute;
                    "></i>
                    <span class="starSkillText" style="position: absolute;font-size: 10px;color: #ffffff;
                    font-weight: bold;min-width: 25px;top: 2px;left: -3px;
                    ">
                        ${selectedSkill.PRICESELL + selectedSkill.PRICE || selectedSkill.PRICE}
                    </span>
                </div>`
                    ;


            }
        }

        typeGameConquest.battlePetInShop[shopSlot] = selectedSkill;
        console.log("battlePetInShop2", typeGameConquest.battlePetInShop);

        idSkillRND += 1;
    }

    //T·∫°o highlight cho skill theo level
    highlightSkillLevel();

    //Load event cho c√°c slot
    loadEventSkillBattle();

    //Load event click hi·ªán info cho c√°c skill
    createInfo5mon();

    //Ki·ªÉm tra c√≥ skill n√†o c√≥ th·ªÉ update kh√¥ng
    checkUpdateLevel();
}

function randomSkillinShop1() {
    //Copy t·∫°o ra c√°c skill ƒë·ªÉ random t·ª´ battleUserPetRound
    console.log("battleUserPet", typeGameConquest.battleUserPet)
    console.log("battleUserPetRound", typeGameConquest.battleUserPetRound)


    const battleUserPetRound1 = structuredClone(typeGameConquest.battleUserPetRound);
    // var rareLv1 = [95,90,85,80,70,60,45,25,10,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    // var rareLv2 = [5,10,15,20,25,30,40,49,58,59,54,49,38,29,20,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    // var rareLv3 = [0,0,0,0,5,10,15,25,30,33,38,43,50,55,60,65,70,60,50,40,30,20,10,0,0,0,0,0,0,0];
    // var rareLv4 = [0,0,0,0,0,0,0,1,2,3,4,5,10,15,20,25,30,40,50,60,70,80,90,100,100,100,100,100,100,100];
    var rareLv1 = [100, 100, 100, 100, 95, 94, 93, 92, 91, 90, 88, 86, 84, 82, 79.8, 76.5, 72.9, 69.3, 65.7, 62.1, 57.5, 53.0, 48.5, 44, 43.4, 42.8, 42.3, 41.8, 41.3, 40]
    var rareLv2 = [0, 0, 0, 0, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 23, 26, 29, 32, 35, 39, 43, 47, 51, 51, 51, 51, 51, 51, 51];
    var rareLv3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.2, 3.6, 4, 4.4, 4.8, 5.1, 5.4, 5.7, 6];
    var rareLv4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.2, 1.4, 1.6, 1.8, 2, 3];

    let selectedSkills = [];  // Danh s√°ch l∆∞u tr·ªØ c√°c ID k·ªπ nƒÉng ƒë√£ ch·ªçn
    typeGameConquest.battlePetInShop = {
        battleShop1: defaultSTT5MonInBattle,
        battleShop2: defaultSTT5MonInBattle,
        battleShop3: defaultSTT5MonInBattle,
        battleShop4: defaultSTT5MonInBattle,
        battleShop5: defaultSTT5MonInBattle,
    };

    for (let i = 0; i < 5; i++) {
        // 1. T√≠nh t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa ID
        const idFrequency = {};
        [...Object.values(typeGameConquest.battlePetUseSlotRound), ...Object.values(typeGameConquest.battlePetInInventory)].forEach(pet => {
            idFrequency[pet.ID] = (idFrequency[pet.ID] || 0) + 1;
        });
        // 2. T·∫°o tr·ªçng s·ªë cho t·ª´ng Level
        const levelWeights = [
            { level: 1, weight: rareLv1[Number(infoStartGame.roundGame) - 1] },
            { level: 2, weight: rareLv2[Number(infoStartGame.roundGame) - 1] },
            { level: 3, weight: rareLv3[Number(infoStartGame.roundGame) - 1] },
            { level: 4, weight: rareLv4[Number(infoStartGame.roundGame) - 1] },
        ];
        const totalLevelWeight = levelWeights.reduce((sum, item) => sum + item.weight, 0);

        // 3. Random tr·ªçng s·ªë Level
        const randomLevelWeight = Math.random() * totalLevelWeight;
        let cumulativeLevelWeight = 0;
        let selectedLevel = 1;
        for (let item of levelWeights) {
            cumulativeLevelWeight += item.weight;
            if (randomLevelWeight < cumulativeLevelWeight) {
                selectedLevel = item.level;
                break;
            }
        }

        // 4. L·ªçc k·ªπ nƒÉng theo Level
        const filteredSkillsByLevel = Object.values(battleUserPetRound1).filter(skill => skill.LEVEL === selectedLevel);
        if (filteredSkillsByLevel.length === 0) {
            console.warn(`Kh√¥ng t√¨m th·∫•y k·ªπ nƒÉng n√†o cho Level ${selectedLevel}`);
            continue;
        }

        // 5. T·∫°o tr·ªçng s·ªë ID
        const idWeights = filteredSkillsByLevel.map(skill => {
            const frequency = idFrequency[skill.ID] || 0; // T·∫ßn su·∫•t xu·∫•t hi·ªán
            const idWeight = Math.max(1, 20 / (1 + frequency)); // Tr·ªçng s·ªë ng∆∞·ª£c v·ªõi t·∫ßn su·∫•t
            return { skill, weight: idWeight };
        });

        // 6. T√≠nh t·ªïng tr·ªçng s·ªë ID
        const totalIDWeight = idWeights.reduce((sum, item) => sum + item.weight, 0);

        // 7. Random tr·ªçng s·ªë ID
        const randomIDWeight = Math.random() * totalIDWeight;
        let cumulativeIDWeight = 0;
        let selectedSkill = null;
        for (let item of idWeights) {
            cumulativeIDWeight += item.weight;
            if (randomIDWeight < cumulativeIDWeight) {
                selectedSkill = item.skill;
                break;
            }
        }

        if (!selectedSkill) {
            console.warn(`Kh√¥ng ch·ªçn ƒë∆∞·ª£c k·ªπ nƒÉng ph√π h·ª£p cho Level ${selectedLevel}`);
            continue;
        }

        // 8. Ki·ªÉm tra xem k·ªπ nƒÉng n√†y ƒë√£ ƒë∆∞·ª£c ch·ªçn qu√° 2 l·∫ßn ch∆∞a
        const skillCount = selectedSkills.filter(skill => skill.ID === selectedSkill.ID && skill.LEVEL === selectedSkill.LEVEL).length;
        if (skillCount >= 1) {
            i--; // Gi·∫£m i ƒë·ªÉ th·ª≠ l·∫°i v√≤ng l·∫∑p n√†y
            continue;
        }

        // Th√™m k·ªπ nƒÉng v√†o danh s√°ch ƒë√£ ch·ªçn
        selectedSkills.push(selectedSkill);

        // 9. ƒê·∫∑t k·ªπ nƒÉng v√†o slot shop
        const shopSlot = `battleShop${i + 1}`;
        const shopDiv = document.querySelector(`#${shopSlot}`);

        let URLimg = selectedSkill.URLimg[`Lv${selectedSkill.LEVEL}`] || selectedSkill.URLimg['Lv1'];
        
        if (shopDiv) {
            shopDiv.innerHTML = `
  <div 
    id="skill${idSkillRND}" 
    class="skill"
    draggable="true"
    style="background-image: url('${URLimg}')"
    data-skill='{"ID": "${selectedSkill.ID}", "LEVEL": ${selectedSkill.LEVEL}}'>
  </div>`;

            let dameSkillText = ``; // D√πng let c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c bi·∫øn, c√≤n d√πng const kh√¥ng ƒë∆∞·ª£c

            const dameSkillDiv = document.querySelector(`#skill${idSkillRND}`);
            if (dameSkillDiv) {

                if (selectedSkill.DAME[0] > 0) { //Skill dame
                    dameSkillText += `<div class="skill-dame">${Number(selectedSkill.DAME[0])}</div>`;
                }
                if (selectedSkill.HEAL[0] > 0) { //Skill heal
                    dameSkillText += `<div class="skill-heal">${Number(selectedSkill.HEAL[0])}</div>`;
                }
                if (selectedSkill.SHIELD[0] > 0) { //Skill shield
                    dameSkillText += `<div class="skill-shield">${Number(selectedSkill.SHIELD[0])}</div>`;
                }
                if (selectedSkill.BURN[0] > 0) { //Skill BURN
                    dameSkillText += `<div class="skill-burn">${Number(selectedSkill.BURN[0])}</div>`;
                }
                if (selectedSkill.POISON[0] > 0) { //Skill Poison
                    dameSkillText += `<div class="skill-poison">${Number(selectedSkill.POISON[0])}</div>`;
                }
                if (selectedSkill.EFFECT.includes("Freeze")) { //Skill ƒë√≥ng bƒÉng freeze
                    dameSkillText += `<div class="skill-freeze">${Number(selectedSkill.COOLDOWN[0] / 2 / 1000 * selectedSkill.LEVEL)}</div>`;
                }
            }

            // G·∫Øn n·ªôi dung v√†o dameSkillDiv
            dameSkillDiv.innerHTML =
                `
            <div class="levelSkillColor" style="position: absolute;font-size: 16px;font-weight: bold;color: #d80789;text-shadow: 0px 1px 2px #0000008a;top: -8px;right: -8px;">
            <i class="fa-solid fa-diamond"></i>
            <span class="levelSkillText" style="position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);font-size: 12px;color: white;font-weight: bold;">${selectedSkill.LEVEL}</span>
            </div>
            
            <div class="dameSkillText" style="display: flex; flex-direction: row; align-items: center;">
            ${dameSkillText}
            </div>
            <div style="position: absolute;font-size: 18px;font-weight: bold;color: rgb(0 88 255);text-shadow: 1px 1px 2px #140a03;
            top: -6px; left: -6px; z-index: 1;">
                <i class="fa-solid fa-splotch" style="
                    position: absolute;
                "></i>
                <span class="starSkillText" style="position: absolute;font-size: 10px;color: #ffffff;
                font-weight: bold;min-width: 25px;top: 2px;left: -3px;
                ">
                    ${selectedSkill.PRICESELL + selectedSkill.PRICE || selectedSkill.PRICE}
                </span>
            </div>`;

        }
        // C·∫≠p nh·∫≠t th√¥ng tin v√†o battlePetInShop
        typeGameConquest.battlePetInShop[shopSlot] = selectedSkill;
        console.log("battlePetInShop2", typeGameConquest.battlePetInShop)
        // TƒÉng idSkillRND ƒë·ªÉ t·∫°o ID duy nh·∫•t cho m·ªói skill
        idSkillRND += 1;
    }

    //T·∫°o highlight cho skill theo level
    highlightSkillLevel();

    //Load event cho c√°c slot
    loadEventSkillBattle();

    //Load event click hi·ªán info cho c√°c skill
    createInfo5mon();

    //Ki·ªÉm tra xem c√≥ skill n√†o c√≥ th·ªÉ update kh√¥ng
    checkUpdateLevel();
}

//H√†m t·∫°o comp => t·∫°o skill cho comp skill1A -> 9A
function createSkill(slotDiv) {

    let lengthSlot = 0;
    if (slotDiv === "shop") {
        lengthSlot = 5
    } else {
        lengthSlot = 9
    }

    let skillItem = slotDiv === "shop" ? typeGameConquest.battlePetInShop : slotDiv === "inventory" ? typeGameConquest.battlePetInInventory : slotDiv === "slotSkillFn" ? skillFinalGame : typeGameConquest.skillBattle

    for (let i = 0; i < lengthSlot; i++) {
        console.log("V√†o ƒë√¢y 1")
        const skillCompSlot = slotDiv === "shop" ? `battleShop${i + 1}` : slotDiv === "skillComp" ? `skill${i + 1}A` : slotDiv === "inventory" ? `battleInv${i + 1}` : slotDiv === "slotSkillFn" ? `skill${i + 1}Bfn` : `skill${i + 1}B`;

        let skillCompDiv = document.querySelector(`#${skillCompSlot}`);
        let URLimg = skillItem[skillCompSlot].URLimg[`Lv${skillItem[skillCompSlot].LEVEL}`] || skillItem[skillCompSlot].URLimg['Lv1']; 
        
        if ((skillCompDiv && skillItem[skillCompSlot] && skillItem[skillCompSlot].ID)) {
            console.log("V√†o ƒë√¢y 2")
            skillCompDiv.innerHTML += `
    <div 
      id="skill${idSkillRND}" 
      class="skill"
      draggable="true"
      style="background-image: url('${URLimg}')"
      data-skill='{"ID": "${skillItem[skillCompSlot].ID}", "LEVEL": ${skillItem[skillCompSlot].LEVEL}}'>
    </div>`;
            let dameSkillText = ``; // D√πng let c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c bi·∫øn, c√≤n d√πng const kh√¥ng ƒë∆∞·ª£c

            const dameSkillDiv = document.querySelector(`#skill${idSkillRND}`);
            if (dameSkillDiv) {
                if (skillItem[skillCompSlot]?.DAME?.[0] > 0) { // Skill dame
                    dameSkillText += `<div class="skill-dame">${Number(skillItem[skillCompSlot].DAME.reduce((a, b) => a + b, 0) || 0)}</div>`;
                }
                if (skillItem[skillCompSlot]?.HEAL?.[0] > 0) { // Skill heal
                    dameSkillText += `<div class="skill-heal">${Number(skillItem[skillCompSlot].HEAL.reduce((a, b) => a + b, 0) || 0)}</div>`;
                }
                if (skillItem[skillCompSlot]?.SHIELD?.[0] > 0) { // Skill shield
                    dameSkillText += `<div class="skill-shield">${Number(skillItem[skillCompSlot].SHIELD.reduce((a, b) => a + b, 0) || 0)}</div>`;
                }
                if (skillItem[skillCompSlot]?.BURN?.[0] > 0) { // Skill BURN
                    dameSkillText += `<div class="skill-burn">${Number(skillItem[skillCompSlot].BURN.reduce((a, b) => a + b, 0) || 0)}</div>`;
                }
                if (skillItem[skillCompSlot]?.POISON?.[0] > 0) { // Skill Poison
                    dameSkillText += `<div class="skill-poison">${Number(skillItem[skillCompSlot].POISON.reduce((a, b) => a + b, 0) || 0)}</div>`;
                }
                if (skillItem[skillCompSlot]?.EFFECT?.includes("Freeze")) { // Skill ƒë√≥ng bƒÉng freeze
                    dameSkillText += `<div class="skill-freeze">${Number(skillItem[skillCompSlot].COOLDOWN?.[0] / 2 / 1000 * skillItem[skillCompSlot].LEVEL)}</div>`;
                }
            }

            let levelSkillColor = "#531515"

            if (skillItem[skillCompSlot].LEVEL === 4) {
                levelSkillColor = "red"
            } else if (skillItem[skillCompSlot].LEVEL === 3) {
                levelSkillColor = "#c00d0d"
            } else if (skillItem[skillCompSlot].LEVEL === 2) {
                levelSkillColor = "#8c0b0b"
            } else {
                levelSkillColor = "#531515"
            }

            // G·∫Øn n·ªôi dung v√†o dameSkillDiv
            dameSkillDiv.innerHTML =
                `
            <div class="levelSkillColor" style="position: absolute;font-size: 16px;font-weight: bold;color: ${levelSkillColor};text-shadow: 0px 1px 2px #0000008a;top: -8px;right: -8px;">
            <i class="fa-solid fa-diamond"></i>
            <span class="levelSkillText" style="position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);font-size: 12px;color: white;font-weight: bold;">${skillItem[skillCompSlot].LEVEL}</span>
            </div>
            
            <div class="dameSkillText" style="display: flex; flex-direction: row; align-items: center;">
            ${dameSkillText}
            </div>
            <div style="position: absolute;font-size: 18px;font-weight: bold;color: rgb(0 88 255);text-shadow: 1px 1px 2px #140a03;
            top: -6px; left: -6px; z-index: 1;">
                <i class="fa-solid fa-splotch" style="
                    position: absolute;
                "></i>
                <span class="starSkillText" style="position: absolute;font-size: 10px;color: #ffffff;
                font-weight: bold;min-width: 25px;top: 2px;left: -3px;
                ">
                    ${skillItem[skillCompSlot].PRICESELL + skillItem[skillCompSlot].PRICE || skillItem[skillCompSlot].PRICE}
                </span>
            </div>`;


            //G·∫Øn cho div cha tr·∫°ng th√°i ƒë√£ l·∫•p ƒë·∫ßy
            skillCompDiv.classList.add("occupied");
        }
        // TƒÉng idSkillRND ƒë·ªÉ t·∫°o ID duy nh·∫•t cho m·ªói skill
        idSkillRND += 1;
    }
    //T·∫°o highlight cho skill theo level
    highlightSkillLevel();

    //Load event cho c√°c slot
    loadEventSkillBattle();

    //Load event click hi·ªán info cho c√°c skill
    createInfo5mon();

    //Ki·ªÉm tra xem c√≥ skill n√†o c√≥ th·ªÉ update kh√¥ng
    checkUpdateLevel();
}

//C·∫≠p nh·∫≠t th√¥ng tin skill khi ·ªü t·ªß ƒë·ªì v√† ·ªü slot skill khi di chuy·ªÉn skill
//update hi·ªÉn th·ªã ch·ªâ s·ªë skill
function updateSttForSkillAffter() {

    const divSkillDameTexts = document.querySelectorAll(".dameSkillText");

    if (!divSkillDameTexts || divSkillDameTexts.length === 0) {
        console.warn("Kh√¥ng t√¨m th·∫•y div n√†o v·ªõi class 'dameSkillText'.");
        return;
    }

    divSkillDameTexts.forEach((divSkillDameText) => {
        const idDivParent = divSkillDameText.parentElement?.parentElement?.id;
        const idDivParentOfParent = divSkillDameText.parentElement?.parentElement?.parentElement?.id;

        if (!idDivParent) {
            return;
        }

        let matchingSlot = null;

        if (idDivParentOfParent === "skillBarB" || idDivParentOfParent === "skillBarA") {
            matchingSlot = typeGameConquest.skillBattle[idDivParent];

            if (!matchingSlot) {
                console.warn(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho: ${idDivParent} t·∫°i slot skill`);
                return;
            }

            let dameSkill, healSkill, shieldSkill, burnSkill, poisonSkill, freezeSkill, multiSkill;

            if (endGame === false) { // Trong tr·∫≠n ƒë·∫•u
                dameSkill = (matchingSlot.DAME.reduce((a, b) => a + b, 0) || 0);
                healSkill = (matchingSlot.HEAL.reduce((a, b) => a + b, 0) || 0);
                shieldSkill = (matchingSlot.SHIELD.reduce((a, b) => a + b, 0) || 0);
                burnSkill = (matchingSlot.BURN.reduce((a, b) => a + b, 0) || 0);
                poisonSkill = (matchingSlot.POISON.reduce((a, b) => a + b, 0) || 0);
                freezeSkill = ((matchingSlot.COOLDOWN[0] / 2 / 1000 || 0) + (matchingSlot.COOLDOWN[4] / 1000 || 0)) * matchingSlot.LEVEL
                multiSkill = (matchingSlot.COOLDOWN[1] || 0) + (matchingSlot.COOLDOWN[2] || 0) + (matchingSlot.COOLDOWN[3] || 0);
            } else { // Ngo√†i tr·∫≠n ƒë·∫•u
                dameSkill = (matchingSlot.DAME[0] || 0) + (matchingSlot.DAME[1] || 0) + (matchingSlot.DAME[2] || 0);
                healSkill = (matchingSlot.HEAL[0] || 0) + (matchingSlot.HEAL[1] || 0) + (matchingSlot.HEAL[2] || 0);
                shieldSkill = (matchingSlot.SHIELD[0] || 0) + (matchingSlot.SHIELD[1] || 0) + (matchingSlot.SHIELD[2] || 0);
                burnSkill = (matchingSlot.BURN[0] || 0) + (matchingSlot.BURN[1] || 0) + (matchingSlot.BURN[2] || 0);
                poisonSkill = (matchingSlot.POISON[0] || 0) + (matchingSlot.POISON[1] || 0) + (matchingSlot.POISON[2] || 0);
                freezeSkill = (matchingSlot.COOLDOWN[0] / 2 / 1000 || 0) * matchingSlot.LEVEL
                multiSkill = (matchingSlot.COOLDOWN[1] || 0) + (matchingSlot.COOLDOWN[2] || 0) + (matchingSlot.COOLDOWN[3] || 0)
            }

            if (!dameSkill && !healSkill && !shieldSkill && !burnSkill && !poisonSkill && !freezeSkill) {
                console.warn(`Kh√¥ng t√¨m th·∫•y ch·ªâ s·ªë dame/heal/shield/burn/poison cho: ${idDivParent}`);
                return;
            }

            const idDivDame = divSkillDameText.children;

            Array.from(idDivDame).forEach((child) => {
                const updateWithFlash = (newValue, className) => {
                    if (child.classList.contains(className)) {
                        if (child.innerText != newValue) {
                            child.innerText = newValue;
                            child.classList.add("hit");
                            setTimeout(() => child.classList.remove("hit"), 800); // X√≥a class sau 0.8 gi√¢y
                        }
                    }
                };

                updateWithFlash(dameSkill, "skill-dame");
                updateWithFlash(healSkill, "skill-heal");
                updateWithFlash(shieldSkill, "skill-shield");
                updateWithFlash(burnSkill, "skill-burn");
                updateWithFlash(poisonSkill, "skill-poison");
                updateWithFlash(freezeSkill, "skill-freeze");
            });

        } else if (idDivParentOfParent === "battleInventory") {
            matchingSlot = typeGameConquest.battlePetInInventory[idDivParent];

            if (!matchingSlot) {
                console.warn(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho: ${idDivParent} t·∫°i slot skill`);
                return;
            }

            const dameSkill = (matchingSlot.DAME[0] || 0) + (matchingSlot.DAME[1] || 0);
            const healSkill = (matchingSlot.HEAL[0] || 0) + (matchingSlot.HEAL[1] || 0);
            const shieldSkill = (matchingSlot.SHIELD[0] || 0) + (matchingSlot.SHIELD[1] || 0);
            const burnSkill = (matchingSlot.BURN[0] || 0) + (matchingSlot.BURN[1] || 0);
            const poisonSkill = (matchingSlot.POISON[0] || 0) + (matchingSlot.POISON[1] || 0);
            const freezeSkill = (matchingSlot.COOLDOWN[0] / 2 / 1000 || 0) * matchingSlot.LEVEL
            const multiSkill = (matchingSlot.COOLDOWN[1] || 0) + (matchingSlot.COOLDOWN[2] || 0) + (matchingSlot.COOLDOWN[3] || 0);
            if (!dameSkill && !healSkill && !shieldSkill && !burnSkill && !poisonSkill && !freezeSkill) {
                console.warn(`Kh√¥ng t√¨m th·∫•y ch·ªâ s·ªë dame/heal/shield/burn/poison cho: ${idDivParent}`);
                return;
            }

            const idDivDame = divSkillDameText.children;

            Array.from(idDivDame).forEach((child) => {
                const updateWithFlash = (newValue, className) => {
                    if (child.classList.contains(className)) {
                        if (child.innerText != newValue) {
                            child.innerText = newValue;
                            child.classList.add("hit");
                            setTimeout(() => child.classList.remove("hit"), 800); // X√≥a class sau 0.8 gi√¢y
                        }
                    }
                };

                updateWithFlash(dameSkill, "skill-dame");
                updateWithFlash(healSkill, "skill-heal");
                updateWithFlash(shieldSkill, "skill-shield");
                updateWithFlash(burnSkill, "skill-burn");
                updateWithFlash(poisonSkill, "skill-poison");
                updateWithFlash(freezeSkill, "skill-freeze");
                updateWithFlash(multiSkill, "skill-multi");
            });
        }
    });
    createInfo5mon();
}



let cooldownDuration = 90; // S·ªë gi√¢y thanh s·∫Ω gi·∫£m t·ª´ ƒë·∫ßy ƒë·∫øn h·∫øt //++++++++++
let decrementPercent = 100;
let cooldownRemaining = cooldownDuration; // Th·ªùi gian c√≤n l·∫°i
let damageOverTime = 1; // S√°t th∆∞∆°ng ban ƒë·∫ßu


// L·∫•y c√°c th√†nh ph·∫ßn DOM
const cooldownBar = document.getElementById('cooldownBar');
const cooldownTime = document.getElementById('cooldownTime');

// Kh·ªüi ƒë·ªông thanh cooldown
let intervalIDBurnOrPoison;
function battleStartTime(init = true) {
    const interval = 100; // C·∫≠p nh·∫≠t thanh m·ªói 100ms

    // N·∫øu l√† kh·ªüi t·∫°o, ƒë·∫∑t c√°c gi√° tr·ªã ban ƒë·∫ßu
    if (init) {
        decrementPercent = 100; // Thanh b·∫Øt ƒë·∫ßu t·ª´ 100%
        cooldownRemaining = cooldownDuration; // ƒê·∫∑t th·ªùi gian c√≤n l·∫°i v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
        cooldownBar.style.width = '100%'; // ƒê·∫∑t thanh v·ªÅ ƒë·∫ßy ƒë·ªß
    }

    // B·∫Øt ƒë·∫ßu interval
    intervalID = setInterval(() => {
        if (pauseBattle) return; // D·ª´ng logic n·∫øu game ƒëang pause

        cooldownRemaining -= interval / 1000; // Gi·∫£m th·ªùi gian c√≤n l·∫°i
        decrementPercent -= 100 / (cooldownDuration * (1000 / interval)); // T√≠nh % gi·∫£m m·ªói l·∫ßn

        // C·∫≠p nh·∫≠t UI
        cooldownBar.style.width = `${Math.max(decrementPercent, 0)}%`; // Gi·∫£m chi·ªÅu r·ªông
        cooldownTime.textContent = `${Math.ceil(cooldownRemaining)}`; // Hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i

        // D·ª´ng khi h·∫øt th·ªùi gian ho·∫∑c game k·∫øt th√∫c
        if (cooldownRemaining <= 0 || endGame === true) {
            clearInterval(intervalID); // D·ª´ng c·∫≠p nh·∫≠t
            intervalID = null;
            cooldownTime.textContent = 'H·∫øt th·ªùi gian!';
            document.getElementById('cooldownBarContainer').classList.add('comp');
            overTimeBattle();
        }
        if (nowHpBattleComp < 100 || nowHpBattleMy < 100) {
            checkWinOrLose();
        }
    }, interval);

    intervalIDBurnOrPoison = setInterval(() => {
        if (pauseBattle) return; // D·ª´ng logic n·∫øu game ƒëang pause

        if (nowPoisonBattleComp > 0) {
            applyPoison("hpBarA");
        }
        if (nowBurnBattleComp > 0) {
            applyBurn("hpBarA");
        }
        if (nowPoisonBattleMy > 0) {
            applyPoison("hpBarB");
        }
        if (nowBurnBattleMy > 0) {
            applyBurn("hpBarB");
        }

        //TƒÉng n·ªô cho 5Mon 2 b√™n
        Object.keys(typeGameConquest.skillBattle).forEach((skillKey) => {
            const skill = typeGameConquest.skillBattle[skillKey];

            if (skill.ID && skill.IDcreate) {
                const cooldown0 = skill.COOLDOWN?.[0] || 0;

                // D√πng sqrt-based scale, t·ªëi ƒëa c·ªông 10
                const scaledGain = Math.max(1, Math.floor(10 * Math.sqrt(cooldown0) / Math.sqrt(20000)));

                skill.COOLDOWN[4] += scaledGain;
            }
        });

        updateHpAndRageBar5Mon();



        if (endGame === true) {
            clearInterval(intervalIDBurnOrPoison); // D·ª´ng c·∫≠p nh·∫≠t
            intervalIDBurnOrPoison = null;
        }
    }, 1500);
}

//Khi h·∫øt th·ªùi gian battle => tr·ª´ m√°u d·∫ßn c·ªßa c·∫£ 2 team
function overTimeBattle() {
    const hpBarA = document.querySelector('#hpBarA .hpFill');
    const shieldBarA = document.querySelector('#hpBarA .shieldFill');
    const hpBarB = document.querySelector('#hpBarB .hpFill');
    const shieldBarB = document.querySelector('#hpBarB .shieldFill');

    // L·∫•y `effectContainer`
    const effectContainerA = document.querySelector(`#effectContainerA`);
    const effectContainerB = document.querySelector(`#effectContainerB`);

    intervalIdOverTime = setInterval(() => {
        if (pauseBattle === true) {
            return;
        }
        if (endGame === true) {
            clearInterval(intervalIdOverTime);
            intervalIdOverTime = null;
            return;
        }

        //Tr·ª´ Hp comp tr∆∞·ªõc (A)
        applyDamage('hpBarA', damageOverTime, "overTime");
        applyDamage('hpBarB', damageOverTime, "overTime");

        // TƒÉng s√°t th∆∞∆°ng
        damageOverTime += 2;

        if (nowHpBattleComp < 100 || nowHpBattleMy < 100) {
            checkWinOrLose();
        }

    }, 500); // M·ªói 0,5 gi√¢y
}

//C·∫≠p nh·∫≠t hi·ªÉn th·ªã hpBar c·ªßa 2 team 
function updateHpbar() {
    // L·∫•y team A
    const targetSideA = document.querySelector('#hpBarA');
    if (targetSideA) {
        const hpBarA = targetSideA.querySelector('.hpFill');
        const hpTextA = targetSideA.querySelector('.hpText');
        const shieldBarA = targetSideA.querySelector('.shieldFill');
        const shieldTextA = targetSideA.querySelector('.shieldText');
        const burnTextA = targetSideA.querySelector('.burnText');
        const poisonTextA = targetSideA.querySelector('.poisonText');

        // T√≠nh % HP v√† Shield
        const hpPercentageA = (nowHpBattleComp / typeGameConquest.maxHpBattleComp) * 100;
        const shieldPercentageA = Math.min((nowShieldBattleComp / typeGameConquest.maxHpBattleComp) * 100, 100);

        // C·∫≠p nh·∫≠t thanh HP v√† Shield cho team A
        hpBarA.style.width = `${hpPercentageA}%`;
        hpTextA.textContent = nowHpBattleComp;

        shieldBarA.style.width = `${shieldPercentageA}%`;
        shieldTextA.textContent = nowShieldBattleComp > 0 ? nowShieldBattleComp : "";
        if (nowShieldBattleComp > 0) {
            targetSideA.style.background = "linear-gradient(to bottom, #60caff, rgb(0 0 0 / 35%), rgb(0 0 0 / 35%), rgb(0 0 0 / 35%), #81edff)"
        } else {
            targetSideA.style.background = "rgb(0 0 0 / 35%)"
        }

        burnTextA.textContent = nowBurnBattleComp > 0 ? nowBurnBattleComp : "";
        if (nowBurnBattleComp > 0) {
            targetSideA.classList.add("hpBarBurnEffect")
        } else {
            targetSideA.classList.remove("hpBarBurnEffect")
        }

        poisonTextA.textContent = nowPoisonBattleComp > 0 ? nowPoisonBattleComp : "";
        if (nowPoisonBattleComp > 0) {
            hpBarA.style.background = "linear-gradient(to right, #96077d, #dd04f7)"
        } else {
            hpBarA.style.background = "linear-gradient(to right, #0ba227, #87ff04)"
        }

        //Skill tƒÉng ch·ªâ s·ªë shield b·∫±ng s·ªë shield ƒë∆∞·ª£c t·∫°o
        const updateShieldChange = (newValue) => {
            if (hpTextA.textContent != newValue) {
                skillUpShieldWithNowShield(true);
            }
        };
        updateShieldChange(nowShieldBattleComp)
        updateSttForSkillAffter();
    }

    // L·∫•y team B
    const targetSideB = document.querySelector('#hpBarB');
    if (targetSideB) {
        const hpBarB = targetSideB.querySelector('.hpFill');
        const hpTextB = targetSideB.querySelector('.hpText');
        const shieldBarB = targetSideB.querySelector('.shieldFill');
        const shieldTextB = targetSideB.querySelector('.shieldText');
        const burnTextB = targetSideB.querySelector('.burnText');
        const poisonTextB = targetSideB.querySelector('.poisonText');

        // T√≠nh % HP v√† Shield
        const hpPercentageB = (nowHpBattleMy / (typeGameConquest.maxHpBattle + maxHpUp)) * 100;
        const shieldPercentageB = Math.min((nowShieldBattleMy / (typeGameConquest.maxHpBattle + maxHpUp)) * 100, 100);

        // C·∫≠p nh·∫≠t thanh HP v√† Shield cho team B
        hpBarB.style.width = `${hpPercentageB}%`;
        hpTextB.textContent = nowHpBattleMy;

        shieldBarB.style.width = `${shieldPercentageB}%`;
        shieldTextB.textContent = nowShieldBattleMy > 0 ? nowShieldBattleMy : "";
        if (nowShieldBattleMy > 0) {
            targetSideB.style.background = "linear-gradient(to bottom, #60caff, rgb(0 0 0 / 35%), rgb(0 0 0 / 35%), rgb(0 0 0 / 35%), #81edff)"
        } else {
            targetSideB.style.background = "rgb(0 0 0 / 35%)"
        }

        burnTextB.textContent = nowBurnBattleMy > 0 ? nowBurnBattleMy : "";
        if (nowBurnBattleMy > 0) {
            targetSideB.classList.add("hpBarBurnEffect")
        } else {
            targetSideB.classList.remove("hpBarBurnEffect")
        }

        poisonTextB.textContent = nowPoisonBattleMy > 0 ? nowPoisonBattleMy : "";
        if (nowPoisonBattleMy > 0) {
            hpBarB.style.background = "linear-gradient(to right, #96077d, #dd04f7)"
        } else {
            hpBarB.style.background = "linear-gradient(to right, #0ba227, #87ff04)"
        }

        //Skill tƒÉng ch·ªâ s·ªë shield b·∫±ng s·ªë shield ƒë∆∞·ª£c t·∫°o
        const updateShieldChange = (newValue) => {
            if (hpTextB.textContent != newValue) {
                skillUpShieldWithNowShield(false);
            }
        };
        updateShieldChange(nowShieldBattleMy)
        updateSttForSkillAffter();
    }
}

function applyBurn(hpBar) {
    let dameBurn = hpBar === "hpBarA" ? nowBurnBattleComp : nowBurnBattleMy;
    if (hpBar === "hpBarA") {
        dameBurn = nowBurnBattleComp;
        applyDamage(hpBar, dameBurn, "Burn");
        nowBurnBattleComp = Math.max(0, nowBurnBattleComp - 1);
    } else {
        dameBurn = nowBurnBattleMy;
        applyDamage(hpBar, dameBurn, "Burn");
        nowBurnBattleMy = Math.max(0, nowBurnBattleMy - 1);
    }

    updateHpbar();
}

function applyPoison(hpBar) {
    let damePoison = hpBar === "hpBarA" ? nowPoisonBattleComp : nowPoisonBattleMy;
    if (hpBar === "hpBarA") {
        damePoison = nowPoisonBattleComp;
        applyDamage(hpBar, damePoison, "Poison");
        nowPoisonBattleComp = Math.max(0, nowPoisonBattleComp - 1);
    } else {
        damePoison = nowPoisonBattleMy;
        applyDamage(hpBar, damePoison, "Poison");
        nowPoisonBattleMy = Math.max(0, nowPoisonBattleMy - 1);
    }
    updateHpbar();
    if (endGame === true || pauseBattle === true) {
        clearInterval(intervalId);
        intervalId = null;
    }
}

var winLoseDefault = 10;
function checkWinOrLose() {
    // S·ª≠ d·ª•ng setInterval ƒë·ªÉ ki·ªÉm tra HP c·ªßa hai b√™n m·ªói 100ms
    // Ki·ªÉm tra n·∫øu HP c·ªßa m√°y b·∫±ng ho·∫∑c d∆∞·ªõi 0 (ng∆∞·ªùi ch∆°i th·∫Øng)
    if (nowHpBattleComp <= 0 && endGame === false) {
        console.log("Ng∆∞·ªùi ch∆°i th·∫Øng!");
        clearInterval(intervalID)
        intervalID = null;
        clearInterval(intervalIdOverTime)
        intervalID = null;
        clearInterval(intervalIDBurnOrPoison)
        intervalIDBurnOrPoison = null;
        endGame = true;

        updateHpbar();
        resetHp5Mon();
        updateSttForSkillAffter();

        if (typeGameConquest.winBattle < winLoseDefault) {
            randomSkillinShop();
        }
        showResultScreen(true)
    }
    // Ki·ªÉm tra n·∫øu HP c·ªßa ng∆∞·ªùi ch∆°i b·∫±ng ho·∫∑c d∆∞·ªõi 0 (ng∆∞·ªùi ch∆°i thua)
    else if (nowHpBattleMy <= 0 && endGame === false) {
        console.log("Ng∆∞·ªùi ch∆°i thua!");
        clearInterval(intervalID)
        intervalID = null;
        clearInterval(intervalIdOverTime)
        intervalID = null;
        clearInterval(intervalIDBurnOrPoison)
        intervalIDBurnOrPoison = null;
        endGame = true;
        infoStartGame.winStreak = 0;

        updateHpbar();
        resetHp5Mon();
        updateSttForSkillAffter();
        if (typeGameConquest.loseBattle < winLoseDefault) {
            randomSkillinShop();
        }
        showResultScreen(false)
    }
}

let skillQueueMirror = {}; // H√†ng ƒë·ª£i cho m·ªói skill ph·∫£n ƒë√≤n
let countSkillQueueMirror = 0;
function startSkillMirror(skillKey, isComp, effect) {

    // let limitSkills = isComp ? limitSkillsB : limitSkillsA;
    let skillsSleep = isComp ? skillsSleepB : skillsSleepA
    let skillsDelete = isComp ? skillsDeleteB : skillsDeleteA
    let isRound = infoStartGame.roundGame
    const effectPairs = [
        { mirrorEffect: "MirrorAttacking", baseEffect: "Attacking" },
        { mirrorEffect: "MirrorHealing", baseEffect: "Healing" },
        { mirrorEffect: "MirrorShield", baseEffect: "Shield" },
        { mirrorEffect: "MirrorBurn", baseEffect: "Burn" },
        { mirrorEffect: "MirrorPoison", baseEffect: "Poison" },
        { mirrorEffect: "MirrorFreeze", baseEffect: "Freeze" },
        { mirrorEffect: "MirrorSleepSkills", baseEffect: "SleepSkill1" },
        { mirrorEffect: "MirrorSleepSkills", baseEffect: "SleepSkill2" },
        { mirrorEffect: "MirrorSleepSkills", baseEffect: "SleepSkill3" },
        { mirrorEffect: "MirrorSleepSkills", baseEffect: "SleepSkill4" },
        { mirrorEffect: "MirrorSpeedUp", baseEffect: "SpeedUp1" },
        { mirrorEffect: "MirrorSpeedUp", baseEffect: "SpeedUp2" },
        { mirrorEffect: "MirrorSpeedUp", baseEffect: "SpeedUp3" },
        { mirrorEffect: "MirrorSpeedUp", baseEffect: "SpeedUp4" },
        { mirrorEffect: "MirrorSlowSkill", baseEffect: "SlowSkill1" },
        { mirrorEffect: "MirrorSlowSkill", baseEffect: "SlowSkill2" },
        { mirrorEffect: "MirrorSlowSkill", baseEffect: "SlowSkill3" },
        { mirrorEffect: "MirrorSlowSkill", baseEffect: "SlowSkill4" },
    ];

    if (!effectPairs.some(({ baseEffect }) => baseEffect === effect)) {
        console.warn(`Effect ${effect} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong danh s√°ch baseEffect.`);
        return; // Tho√°t ra n·∫øu kh√¥ng c√≥ baseEffect n√†o tr√πng
    }

    Object.keys(typeGameConquest.skillBattle).forEach((key) => {
        if ((isComp ? key.endsWith("B") : key.endsWith("A"))) {
            for (const { mirrorEffect, baseEffect } of effectPairs) {
                if (
                    typeGameConquest.skillBattle[key].EFFECT.some((effect) => effect === mirrorEffect) &&
                    typeGameConquest.skillBattle[skillKey].EFFECT.some((effect) => effect === baseEffect)
                    // && limitSkills[key] <= 10
                ) {
                    // limitSkills[key] += 1;

                    if (!skillQueueMirror[key]) {
                        skillQueueMirror[key] = Promise.resolve(); // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
                    }
                    if (countSkillQueueMirror >= 300) {
                        console.log("ƒë√£ l·ªõn h∆°n 100", countSkillQueueMirror)
                        countSkillQueueMirror -= 1;
                        return;
                    }
                    skillQueueMirror[key] = skillQueueMirror[key]
                        .then(() => new Promise((resolve) => setTimeout(resolve, 350)))
                        .then(() => {
                            if (endGame || skillsSleep[key] === 1 || skillsDelete[key] === 1) {
                                Object.keys(skillQueueMirror).forEach((key) => {
                                    skillQueueMirror = Promise.resolve(); // Reset h√†ng ƒë·ª£i

                                });
                                return; // Ki·ªÉm tra l·∫°i sau delay
                            }

                            if (isRound === infoStartGame.roundGame && skillsSleep[key] === 0 && skillsDelete[key] === 0 && countSkillQueueMirror < 300) {
                                isComp
                                    ? userSkillA(key, false)
                                    : userSkillA(key, true);
                                countSkillQueueMirror += 1;
                                console.log(`K√≠ch ho·∫°t skill ph·∫£n ƒë√≤n: ${key}`);
                            }

                        });
                    break;
                }
            }
        }
    });
}

let skillQueue = {}; // H√†ng ƒë·ª£i cho m·ªói skill
let countSkillQueue = 0;
function startSkillResonance(skillKey, isComp, effect) {

    // const limitSkills = isComp ? limitSkillsA : limitSkillsB;
    let skillsSleep = isComp ? skillsSleepA : skillsSleepB
    let skillsDelete = isComp ? skillsDeleteA : skillsDeleteB
    let isRound = 0;
    const effectPairs = [
        { reEffect: "ReAttacking", baseEffect: "Attacking" },
        { reEffect: "ReHealing", baseEffect: "Healing" },
        { reEffect: "ReShield", baseEffect: "Shield" },
        { reEffect: "ReBurn", baseEffect: "Burn" },
        { reEffect: "RePoison", baseEffect: "Poison" },
        { reEffect: "ReFreeze", baseEffect: "Freeze" },
        { reEffect: "ReBeforeSkill", baseEffect: "BeforeSkill" },
        { reEffect: "ReAfterSkill", baseEffect: "AfterSkill" },
        { reEffect: "ReBeforeAfterSkill", baseEffect: "BeforeAfterSkill" },
        { reEffect: "ReType", baseEffect: "TypeSkill" },
        { reEffect: "ReSpeedUp", baseEffect: "SpeedUp1" },
        { reEffect: "ReSpeedUp", baseEffect: "SpeedUp2" },
        { reEffect: "ReSpeedUp", baseEffect: "SpeedUp3" },
        { reEffect: "ReSpeedUp", baseEffect: "SpeedUp4" },
        { reEffect: "ReSlowSkill", baseEffect: "SlowSkill1" },
        { reEffect: "ReSlowSkill", baseEffect: "SlowSkill2" },
        { reEffect: "ReSlowSkill", baseEffect: "SlowSkill3" },
        { reEffect: "ReSlowSkill", baseEffect: "SlowSkill4" },
    ];

    Object.keys(typeGameConquest.skillBattle).forEach((key) => {
        if (key !== skillKey && ((isComp ? key.endsWith("A") : key.endsWith("B")))) {
            for (const { reEffect, baseEffect } of effectPairs) {

                // Logic x·ª≠ l√Ω n·∫øu hi·ªáu ·ª©ng c√≥ m·∫∑t trong skillKey
                if (reEffect === "ReBeforeSkill" || reEffect === "ReAfterSkill" || reEffect === "ReBeforeAfterSkill" || reEffect === "ReType") {
                    let slotSkillKey = parseInt(skillKey.match(/\d+/)[0], 10);  // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë
                    let slotKey = parseInt(key.match(/\d+/)[0], 10);  // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë

                    // X·ª≠ l√Ω hi·ªáu ·ª©ng ReBeforeSkill
                    if (reEffect === "ReBeforeAfterSkill" && typeGameConquest.skillBattle[key].EFFECT.includes("ReBeforeAfterSkill")) {
                        // Ki·ªÉm tra n·∫øu slotSkillKey nh·ªè h∆°n slotKey (t·ª©c l√† skill n√†y l√† tr∆∞·ªõc skill hi·ªán t·∫°i)
                        if (slotSkillKey === slotKey - 1 || slotSkillKey === slotKey + 1) {
                            console.log("V√†o ƒë√¢y 1 l·∫ßn")

                            // Khi skill c√≥ ReBeforeSkill, k√≠ch ho·∫°t k·ªπ nƒÉng n·∫øu slotSkillKey < slotKey
                            if (!skillQueue[key]) {
                                skillQueue[key] = Promise.resolve(); // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
                            }

                            if (countSkillQueue >= 300) {
                                countSkillQueue -= 1
                                console.log("V∆∞·ª£t gi·ªõi h·∫°n h√†ng ch·ªù countSkillQueue")
                                return;
                            }

                            isRound = infoStartGame.roundGame;
                            skillQueue[key] = skillQueue[key]
                                .then(() => new Promise((resolve) => setTimeout(resolve, 350))) // Th√™m delay gi·ªØa c√°c skill
                                .then(() => {
                                    if (endGame || skillsSleep[key] === 1 || skillsDelete[key] === 1) {
                                        Object.keys(skillQueue).forEach((key) => {
                                            skillQueue[key] = Promise.resolve(); // Reset h√†ng ƒë·ª£i
                                        });
                                        return;
                                    }

                                    // N·∫øu c√≥ overlayDivComp th√¨ k√≠ch ho·∫°t k·ªπ nƒÉng
                                    if (isRound === infoStartGame.roundGame && skillsSleep[key] === 0 && skillsDelete[key] === 0 && countSkillQueue < 300) {
                                        userSkillA(key, isComp);
                                        countSkillQueue += 1
                                    }
                                });
                        }
                    }

                    // X·ª≠ l√Ω hi·ªáu ·ª©ng ReBeforeSkill
                    if (reEffect === "ReBeforeSkill" && typeGameConquest.skillBattle[key].EFFECT.includes("ReBeforeSkill")) {
                        // Ki·ªÉm tra n·∫øu slotSkillKey nh·ªè h∆°n slotKey (t·ª©c l√† skill n√†y l√† tr∆∞·ªõc skill hi·ªán t·∫°i)
                        if (slotSkillKey === slotKey - 1) {
                            // Khi skill c√≥ ReBeforeSkill, k√≠ch ho·∫°t k·ªπ nƒÉng n·∫øu slotSkillKey < slotKey
                            if (!skillQueue[key]) {
                                skillQueue[key] = Promise.resolve(); // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
                            }
                            if (countSkillQueue >= 300) {
                                countSkillQueue -= 1
                                console.log("V∆∞·ª£t gi·ªõi h·∫°n h√†ng ch·ªù countSkillQueue")
                                return;
                            }
                            isRound = infoStartGame.roundGame;
                            skillQueue[key] = skillQueue[key]
                                .then(() => new Promise((resolve) => setTimeout(resolve, 350))) // Th√™m delay gi·ªØa c√°c skill
                                .then(() => {
                                    if (endGame || skillsSleep[key] === 1 || skillsDelete[key] === 1) {
                                        Object.keys(skillQueue).forEach((key) => {
                                            skillQueue[key] = Promise.resolve(); // Reset h√†ng ƒë·ª£i
                                        });
                                        return;
                                    }

                                    // N·∫øu c√≥ overlayDivComp th√¨ k√≠ch ho·∫°t k·ªπ nƒÉng
                                    if (isRound === infoStartGame.roundGame && skillsSleep[key] === 0 && skillsDelete[key] === 0 && countSkillQueue < 300) {
                                        userSkillA(key, isComp);
                                        countSkillQueue += 1
                                    }
                                });
                        }
                    }

                    // X·ª≠ l√Ω hi·ªáu ·ª©ng ReAfterSkill
                    if (reEffect === "ReAfterSkill" && typeGameConquest.skillBattle[key].EFFECT.includes("ReAfterSkill")) {
                        // Ki·ªÉm tra n·∫øu slotSkillKey l·ªõn h∆°n slotKey (t·ª©c l√† skill n√†y l√† sau skill hi·ªán t·∫°i)
                        if (slotSkillKey === (slotKey + 1)) {
                            // Khi skill c√≥ ReAfterSkill, k√≠ch ho·∫°t k·ªπ nƒÉng n·∫øu slotSkillKey > slotKey
                            if (!skillQueue[key]) {
                                skillQueue[key] = Promise.resolve(); // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
                            }
                            if (countSkillQueue >= 300) {
                                countSkillQueue -= 1
                                console.log("V∆∞·ª£t gi·ªõi h·∫°n h√†ng ch·ªù countSkillQueue")
                                return;
                            }
                            isRound = infoStartGame.roundGame;
                            skillQueue[key] = skillQueue[key]
                                .then(() => new Promise((resolve) => setTimeout(resolve, 350))) // Th√™m delay gi·ªØa c√°c skill
                                .then(() => {
                                    if (endGame || skillsSleep[key] === 1 || skillsDelete[key] === 1) {
                                        Object.keys(skillQueue).forEach((key) => {
                                            skillQueue[key] = Promise.resolve(); // Reset h√†ng ƒë·ª£i
                                        });
                                        return;
                                    }

                                    // N·∫øu c√≥ overlayDivComp th√¨ k√≠ch ho·∫°t k·ªπ nƒÉng
                                    if (isRound === infoStartGame.roundGame && skillsSleep[key] === 0 && skillsDelete[key] === 0 && countSkillQueue < 300) {
                                        userSkillA(key, isComp);
                                        countSkillQueue += 1
                                    }
                                });
                        }
                    }
                    if (reEffect === "ReType" && typeGameConquest.skillBattle[key].EFFECT.includes("ReType")) {
                        // Ki·ªÉm tra n·∫øu slotSkillKey c√≥ Type gi·ªëng type c·ªßa key th√¨ k√≠ch ho·∫°t key
                        if (typeGameConquest.skillBattle[skillKey].TYPE.some(type => typeGameConquest.skillBattle[key].TYPE.includes(type))) {
                            // Khi skill c√≥ ReAfterSkill, k√≠ch ho·∫°t k·ªπ nƒÉng n·∫øu slotSkillKey > slotKey
                            if (!skillQueue[key]) {
                                skillQueue[key] = Promise.resolve(); // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
                            }
                            if (countSkillQueue >= 300) {
                                countSkillQueue -= 1
                                console.log("V∆∞·ª£t gi·ªõi h·∫°n h√†ng ch·ªù countSkillQueue")
                                return;
                            }
                            isRound = infoStartGame.roundGame;
                            skillQueue[key] = skillQueue[key]
                                .then(() => new Promise((resolve) => setTimeout(resolve, 350))) // Th√™m delay gi·ªØa c√°c skill
                                .then(() => {
                                    if (endGame || skillsSleep[key] === 1 || skillsDelete[key] === 1) {
                                        Object.keys(skillQueue).forEach((key) => {
                                            skillQueue[key] = Promise.resolve(); // Reset h√†ng ƒë·ª£i
                                        });
                                        return;
                                    }

                                    // N·∫øu c√≥ overlayDivComp th√¨ k√≠ch ho·∫°t k·ªπ nƒÉng
                                    if (isRound === infoStartGame.roundGame && skillsSleep[key] === 0 && skillsDelete[key] === 0 && countSkillQueue < 300) {
                                        userSkillA(key, isComp);
                                        countSkillQueue += 1
                                    }
                                });
                        }
                    }
                } else {
                    if (!effectPairs.some(({ baseEffect }) => baseEffect === effect)) {
                        console.warn(`Effect ${effect} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong danh s√°ch baseEffect.`);
                        return; // Tho√°t ra n·∫øu kh√¥ng c√≥ baseEffect n√†o tr√πng
                    }
                    if (
                        typeGameConquest.skillBattle[key].EFFECT.includes(reEffect) &&
                        typeGameConquest.skillBattle[skillKey].EFFECT.includes(baseEffect)
                        // && limitSkills[key] <= 10
                    ) {
                        // limitSkills[key] += 1;

                        if (!skillQueue[key]) {
                            skillQueue[key] = Promise.resolve(); // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a c√≥
                        }
                        if (countSkillQueue >= 300) {
                            countSkillQueue -= 1
                            console.log("V∆∞·ª£t gi·ªõi h·∫°n h√†ng ch·ªù countSkillQueue")
                            return;
                        }
                        isRound = infoStartGame.roundGame;
                        skillQueue[key] = skillQueue[key]
                            .then(() => new Promise((resolve) => setTimeout(resolve, 350))) // Th√™m delay gi·ªØa c√°c skill
                            .then(() => {
                                if (endGame || skillsSleep[key] === 1 || skillsDelete[key] === 1) {
                                    Object.keys(skillQueue).forEach((key) => {
                                        skillQueue[key] = Promise.resolve(); // Reset h√†ng ƒë·ª£i
                                    });
                                    return;
                                }

                                if (isRound === infoStartGame.roundGame && skillsSleep[key] === 0 && skillsDelete[key] === 0 && countSkillQueue < 300) {
                                    userSkillA(key, isComp);
                                    countSkillQueue += 1
                                }
                            });
                        break;
                    }
                }
            }
        }
    });
}


//Function useskill
function useSkill(skillKey, effect, overlayDiv, isComp) {
    // T√≠nh t·ª∑ l·ªá ch√≠ m·∫°ng
    let critDame = 1;
    let upCritDame = isComp ? typeGameConquest.dameCritA : typeGameConquest.dameCritB
    let critPoint = typeGameConquest.skillBattle[skillKey].CRIT.reduce((a, b) => a + b, 0); // T√≠nh t·ªïng ƒëi·ªÉm ch√≠ m·∫°ng

    // Random t·ª´ 1 -> 100
    let randomValue = Math.floor(Math.random() * 100); // Random s·ªë nguy√™n t·ª´ 1 ƒë·∫øn 100

    // Ki·ªÉm tra n·∫øu randomValue <= critPoint th√¨ k√≠ch ho·∫°t ch√≠ m·∫°ng
    let dameCritWithEffect = 0;
    if (typeGameConquest.skillBattle[skillKey].EFFECT.includes("doubleDameCrit")) {
        dameCritWithEffect = 3
    } else {
        dameCritWithEffect = 2
    }

    let isCrit = false;
    if (randomValue <= critPoint) {
        critDame = dameCritWithEffect + upCritDame / 100;
        isCrit = true;
    } else {
        critDame = 1;
        isCrit = false;
    }

    // ki·ªÉm tra skill c√≥ trong effectsSkill kh√¥ng
    if (!effectsSkill[effect]) {
        console.error(`Effect skill ${effect} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong effectsSkill`);
        return;
    }

    // T√≠nh dameSkill d·ª±a theo effectsSkill
    let skill = typeGameConquest.skillBattle[skillKey] //Chuy·ªÉn th√†nh skill v√¨ trong googleshet l√† skill.DAME....
    const dameSkill = Math.ceil(eval(effectsSkill[effect].dameSkill) * critDame)

    // X·ª≠ l√Ω logic theo lo·∫°i effectsSkill
    switch (effect) {
        case "Attacking": skillAttacking(skillKey, dameSkill, isCrit);
            break;
        case "Healing": skillHealing(skillKey, dameSkill, isCrit);
            break;
        case "Shield": skillShield(skillKey, dameSkill, isCrit);
            break;
        case "Burn": skillBurn(skillKey, dameSkill, isCrit);
            break;
        case "Poison": skillPoison(skillKey, dameSkill, isCrit);
            break;
        case "Freeze": skillFreeze(skillKey, dameSkill, isComp);
            break;
        case "Burn": skillBurn(skillKey, dameSkill, isCrit);
            break;
        case "ChargerSkillAll": skillchargerSkill(skillKey, isComp, "All");
            break;
        case "ChargerSkillLeftRight": skillchargerSkill(skillKey, isComp, "LeftRight");
            break;
        case "ChargerSkillLeft": skillchargerSkill(skillKey, isComp, "Left");
            break;
        case "ChargerSkillRight": skillchargerSkill(skillKey, isComp, "Right");
            break;
        case "ChargerSkillType": skillchargerSkill(skillKey, isComp, "Type");
            break;
        case "UpDameAll": skillUpDame(skillKey, dameSkill, isComp, "All");
            break;
        case "UpDameLeftRight": skillUpDame(skillKey, dameSkill, isComp, "LeftRight");
            break;
        case "UpDameLeft": skillUpDame(skillKey, dameSkill, isComp, "Left");
            break;
        case "UpDameRight": skillUpDame(skillKey, dameSkill, isComp, "Right");
            break;
        case "UpDameSelf": skillUpDame(skillKey, dameSkill, isComp, "Self");
            break;
        case "UpDameType": skillUpDame(skillKey, dameSkill, isComp, "Type");
            break;
        case "UpHealAll": skillUpHeal(skillKey, dameSkill, isComp, "All");
            break;
        case "UpHealLeftRight": skillUpHeal(skillKey, dameSkill, isComp, "LeftRight");
            break;
        case "UpHealLeft": skillUpHeal(skillKey, dameSkill, isComp, "Left");
            break;
        case "UpHealRight": skillUpHeal(skillKey, dameSkill, isComp, "Right");
            break;
        case "UpHealSelf": skillUpHeal(skillKey, dameSkill, isComp, "Self");
            break;
        case "UpHealType": skillUpHeal(skillKey, dameSkill, isComp, "Type");
            break;
        case "UpShieldAll": skillUpShield(skillKey, dameSkill, isComp, "All");
            break;
        case "UpShieldLeftRight": skillUpShield(skillKey, dameSkill, isComp, "LeftRight");
            break;
        case "UpShieldLeft": skillUpShield(skillKey, dameSkill, isComp, "Left");
            break;
        case "UpShieldRight": skillUpShield(skillKey, dameSkill, isComp, "Right");
            break;
        case "UpShieldSelf": skillUpShield(skillKey, dameSkill, isComp, "Self");
            break;
        case "UpShieldType": skillUpShield(skillKey, dameSkill, isComp, "Type");
            break;
        case "UpBurnAll": skillUpBurn(skillKey, dameSkill, isComp, "All");
            break;
        case "UpBurnLeftRight": skillUpBurn(skillKey, dameSkill, isComp, "LeftRight");
            break;
        case "UpBurnLeft": skillUpBurn(skillKey, dameSkill, isComp, "Left");
            break;
        case "UpBurnRight": skillUpBurn(skillKey, dameSkill, isComp, "Right");
            break;
        case "UpBurnSelf": skillUpBurn(skillKey, dameSkill, isComp, "Self");
            break;
        case "UpBurnType": skillUpBurn(skillKey, dameSkill, isComp, "Type");
            break;
        case "UpPoisonAll": skillUpPoison(skillKey, dameSkill, isComp, "All");
            break;
        case "UpPoisonLeftRight": skillUpPoison(skillKey, dameSkill, isComp, "LeftRight");
            break;
        case "UpPoisonLeft": skillUpPoison(skillKey, dameSkill, isComp, "Left");
            break;
        case "UpPoisonRight": skillUpPoison(skillKey, dameSkill, isComp, "Right");
            break;
        case "UpPoisonSelf": skillUpPoison(skillKey, dameSkill, isComp, "Self");
            break;
        case "UpPoisonType": skillUpPoison(skillKey, dameSkill, isComp, "Type");
            break;
        case "UpCritAll": skillUpCrit(skillKey, dameSkill, isComp, "All");
            break;
        case "UpCritLeftRight": skillUpCrit(skillKey, dameSkill, isComp, "LeftRight");
            break;
        case "UpCritLeft": skillUpCrit(skillKey, dameSkill, isComp, "Left");
            break;
        case "UpCritRight": skillUpCrit(skillKey, dameSkill, isComp, "Right");
            break;
        case "UpCritSelf": skillUpCrit(skillKey, dameSkill, isComp, "Self");
            break;
        case "UpCritType": skillUpCrit(skillKey, dameSkill, isComp, "Type");
            break;
        case "SleepSkill1": skillSleepSkills(skillKey, dameSkill, isComp, 1);
            break;
        case "SleepSkill2": skillSleepSkills(skillKey, dameSkill, isComp, 2);
            break;
        case "SleepSkill3": skillSleepSkills(skillKey, dameSkill, isComp, 3);
            break;
        case "SleepSkill4": skillSleepSkills(skillKey, dameSkill, isComp, 4);
            break;
        case "DeleteSkills": skillDeleteSkills(skillKey, dameSkill, isComp);
            break;
        case "SpeedUp1": skillSpeedUp(skillKey, dameSkill, isComp, 1);
            break;
        case "SpeedUp2": skillSpeedUp(skillKey, dameSkill, isComp, 2);
            break;
        case "SpeedUp3": skillSpeedUp(skillKey, dameSkill, isComp, 3);
            break;
        case "SpeedUp4": skillSpeedUp(skillKey, dameSkill, isComp, 4);
            break;
        case "SlowSkill1": skillSlow(skillKey, dameSkill, isComp, 1);
            break;
        case "SlowSkill2": skillSlow(skillKey, dameSkill, isComp, 2);
            break;
        case "SlowSkill3": skillSlow(skillKey, dameSkill, isComp, 3);
            break;
        case "SlowSkill4": skillSlow(skillKey, dameSkill, isComp, 4);
            break;

        default:
            console.warn(`Effect skill ${effect} ch∆∞a c√≥ x·ª≠ l√Ω c·ª• th·ªÉ`);
    }
    // C·∫≠p nh·∫≠t rage (chung cho t·∫•t c·∫£ c√°c skill)
    // if (!skillKey.startsWith("skill9")) {
    //     updateRage(skillKey, overlayDiv, isComp);
    // }
    startSkillMirror(skillKey, isComp, effect);
    startSkillResonance(skillKey, isComp, effect);
}

function showResultScreen(isWin) {
    const resultScreen = document.getElementById('resultScreen');
    const resultText = document.getElementById('resultText');
    const pointResultText = document.getElementById('pointResultText');
    const buttonEndGame = document.getElementById('buttonEndGame');

    typeGameConquest.reRoll = 0;
    typeGameConquest.reRollPrice = 0;

    typeGameConquest.selectSkillShop = 0;

    document.getElementById("qtyResetShop").innerText = typeGameConquest.reRollPrice;
    document.getElementById("starUser").innerText = typeGameConquest.starUser;

    // Reset c√°c bi·∫øn to√†n c·ª•c


    damageOverTime = 1;

    // Bi·∫øn ƒë·ªÉ t√≠nh ƒëi·ªÉm trong v√≤ng n√†y
    let pointsThisRound;

    // Hi·ªÉn th·ªã resultScreen
    if (isWin) {
        resultText.innerText = 'Chi·∫øn Th·∫Øng!';
        createNewComp(true);

        // T√≠nh ƒëi·ªÉm c·ªông cho user
        pointsThisRound = ((1 * infoStartGame.roundGame) + infoStartGame.winStreak) * modeGamePoint;
        infoStartGame.winStreak += 1;

        if (infoStartGame.winStreak === 5) {
            checkQuest("questConquestRankWinStreak5");
        }

        // Hi·ªÉn th·ªã ƒëi·ªÉm m·ªõi v·ªõi ƒëi·ªÉm c·ªông th√™m
        pointResultText.innerText = `ƒêi·ªÉm hi·ªán c√≥: ${typeGameConquest.pointBattle} (+${pointsThisRound})`;

        // Chuy·ªÉn onclick th√†nh h√†m g·ªçi endBattle v·ªõi tham s·ªë "My"
        if (typeGameConquest.winBattle >= winLoseDefault) {
            buttonEndGame.onclick = () => finalGame("win", pointsThisRound);
        } else {
            buttonEndGame.onclick = () => endBattle("My", pointsThisRound);
        }
    } else {
        createNewComp(false);
        resultText.innerText = 'Thua Cu·ªôc!';

        // T√≠nh ƒëi·ªÉm tr·ª´ cho user
        pointsThisRound = (1 * infoStartGame.roundGame);

        // Hi·ªÉn th·ªã ƒëi·ªÉm m·ªõi v·ªõi ƒëi·ªÉm b·ªã tr·ª´
        pointResultText.innerText = `ƒêi·ªÉm hi·ªán c√≥: ${typeGameConquest.pointBattle} (-${pointsThisRound})`;

        if (typeGameConquest.loseBattle >= winLoseDefault) {
            buttonEndGame.onclick = () => finalGame("lose", pointsThisRound);
        } else {
            // Chuy·ªÉn onclick th√†nh h√†m g·ªçi endBattle v·ªõi tham s·ªë "Comp"
            buttonEndGame.onclick = () => endBattle("Comp", pointsThisRound);
        }
    }
    resultScreen.classList.remove('hidden'); // Hi·ªÉn th·ªã m√†n h√¨nh
}

var skillFinalGame = {};

function finalGame(winOrLose, pointsThisRound) {

    //Chuy·ªÅn skill t·ª´ typeGameConquest.skillBattle v√†o skillFinalGame
    skillFinalGame = Object.fromEntries(
        Object.entries(typeGameConquest.skillBattle)
            .filter(([key]) => key.endsWith("B")) // Ch·ªâ l·∫•y c√°c key k·∫øt th√∫c b·∫±ng 'B'
            .map(([key, value]) => [`${key}fn`, value]) // ƒê·ªïi t√™n key
    );
    console.log("skillFinalGame", skillFinalGame)

    const resultScreen = document.getElementById('resultScreen');
    const finalGameScreen = document.getElementById('finalGameScreen');
    const winFinalGameText = document.getElementById('winFinalGameText');
    const loseFinalGameText = document.getElementById('loseFinalGameText');
    const pointFinalGameText = document.getElementById('pointFinalGameText');
    const goldFinalGameText = document.getElementById('goldFinalGameText');
    const diamondFinalGameText = document.getElementById('diamondFinalGameText');
    const popupOverlay = document.getElementById("popupOverlay")

    const buttonFinalGame = document.getElementById('buttonFinalGame');

    let textWin = winOrLose === "win" ? 1 : 0

    winFinalGameText.innerText = `${typeGameConquest.winBattle}`;
    let textLose = winOrLose === "lose" ? 1 : 0
    loseFinalGameText.innerText = `${typeGameConquest.loseBattle}`;

    pointFinalGameText.innerText = `${typeGameConquest.pointBattle + pointsThisRound}`;
    goldFinalGameText.innerText = `0`;
    diamondFinalGameText.innerText = `0`;

    //T·∫°o skill vao slot final game
    createSkill("slotSkillFn");

    buttonFinalGame.onclick = () => finalGameButton(winOrLose, pointsThisRound);
    resultScreen.classList.add('hidden');

    finalGameScreen.style.display = "flex";
}

function finalGameButton(winOrLose, pointsThisRound) {
    finalGameScreen.style.display = "none";
    //Chuy·ªÉn h·∫øt skillBarBFn v·ªÅ r·ªóng
    document.querySelectorAll(".slotSkillFn").forEach(slot => {
        slot.innerHTML = "";
    });

    //C·ªông ƒëi·ªÉm / tr·ª´ ƒëi·ªÉm
    if (winOrLose === "lose") {
        typeGameConquest.pointBattle -= pointsThisRound;
    } else {
        typeGameConquest.pointBattle += pointsThisRound;
    }

    //Nhi·ªám v·ª• ho√†n th√†nh 1 tr·∫≠n ƒë·∫•u x·∫øp h·∫°ng ch·∫ø ƒë·ªô Chinh Ph·ª•c
    checkQuest("questConquestRankFinal");

    if (infoStartGame.roundGame >= 5) { //ƒê·∫•u qua 5 v√≤ng trong tr·∫≠n ƒë·∫•u x·∫øp h·∫°ng
        checkQuest("questConquestRankRound5");
    }
    if (infoStartGame.roundGame >= 10) { //ƒê·∫•u qua 10 v√≤ng trong tr·∫≠n ƒë·∫•u x·∫øp h·∫°ng
        checkQuest("questConquestRankRound10");
    }
    if (typeGameConquest.winBattle >= 5) { //ƒê·∫•u qua 10 v√≤ng trong tr·∫≠n ƒë·∫•u x·∫øp h·∫°ng
        checkQuest("questConquestRankWin5");
    }
    if (typeGameConquest.winBattle >= 10) { //ƒê·∫•u qua 10 v√≤ng trong tr·∫≠n ƒë·∫•u x·∫øp h·∫°ng
        checkQuest("questConquestRankWin10");
    }

    outGameRank();
}


// function detectDevTools() {
//     let start = new Date();
//     debugger; // Developer Tools s·∫Ω g√¢y ra ch·∫≠m tr·ªÖ khi th·ª±c thi l·ªánh n√†y
//     let end = new Date();

//     if (end - start > 100) { // Ph√°t hi·ªán ch·∫≠m tr·ªÖ b·∫•t th∆∞·ªùng
//         alert("H·ªá th·ªëng ƒë√£ ph√°t hi·ªán b·∫°n ƒë√£ thay ƒë·ªïi th√¥ng tin c·ªßa game ƒë·ªÉ c·ªë g·∫Øng gian l·∫≠n!!.");
//         window.location.href = "https://www.google.com"; // Chuy·ªÉn h∆∞·ªõng sang Google
//     }
// }

// // Ki·ªÉm tra th∆∞·ªùng xuy√™n ƒë·ªÉ ph√°t hi·ªán Developer Tools
// setInterval(detectDevTools, 1000);

let pauseBattle = false;
document.addEventListener("visibilitychange", function () {
    if (document.hidden) {
        if (isFinalLoadData && !isOut) {
            let now = new Date();
            now.setHours(now.getHours() + 7); // C·ªông m√∫i gi·ªù VN n·∫øu c·∫ßn
            onlineLasted = now.toISOString();

            saveDataUserToFirebase();
            stopStaminaRegen();

        }
        isLogin = false;
    } else {
        if (isFinalLoadData && !isOut) {
            checkUserLogins();
            restoreStamina();
            startStaminaRegen();
        }
        isLogin = true;
    }

    if (endGame === false) {
        if (document.hidden) {
            console.log("Ng∆∞·ªùi d√πng ƒë√£ chuy·ªÉn tab trong l√∫c chi·∫øn ƒë·∫•u");
            pauseBattle = true;

            let now = new Date();
            now.setHours(now.getHours() + 7); // C·ªông m√∫i gi·ªù VN n·∫øu c·∫ßn
            onlineLasted = now.toISOString();
            stopStaminaRegen();

        } else {
            console.log("Ng∆∞·ªùi d√πng ƒë√£ quay l·∫°i tab.");
            setTimeout(() => {
                pauseBattle = false;
                restoreStamina();
                startStaminaRegen();
            }, 1000)
            // G·ªçi h√†m x·ª≠ l√Ω khi quay l·∫°i tab
        }
    }
});

function createNewComp1(isWin) {
    const firebaseCompRef = ref(db, "allComps");  // Tham chi·∫øu ƒë·∫øn allComps trong Firebase
    const ratioWinCheck = 25;

    // L·∫•y d·ªØ li·ªáu t·ª´ Firebase Realtime Database
    get(firebaseCompRef)
        .then(snapshot => {
            let data = snapshot.val();
            if (!data) {
                data = {}; // N·∫øu Firebase r·ªóng, kh·ªüi t·∫°o object tr·ªëng
            }

            // L·ªçc b·ªè c√°c entry c√≥ gi√° tr·ªã null
            let dataArray = Object.entries(data)
                .filter(([key, value]) => value !== null)  // Gi·ªØ l·∫°i c√°c entry c√≥ gi√° tr·ªã kh√°c null
                .reduce((acc, [key, value]) => {
                    acc[key] = value; // Chuy·ªÉn v·ªÅ object
                    return acc;
                }, {});

            console.log("dataArray", dataArray);
            console.log("data", data);

            // L·∫•y t·∫•t c·∫£ c√°c idComp hi·ªán c√≥
            let existingIds = Object.values(data).map(comp => comp.idComp);
            let maxId = Math.max(...existingIds, 0);

            // T·∫°o m·ªôt d√£y s·ªë t·ª´ 0 ƒë·∫øn maxId
            let allIds = Array.from({ length: maxId + 1 }, (_, i) => i);

            // T√¨m s·ªë idComp b·ªã thi·∫øu
            let missingId = allIds.find(id => !existingIds.includes(id));

            // N·∫øu kh√¥ng c√≥ s·ªë b·ªã thi·∫øu, t·∫°o idComp m·ªõi l√† maxId + 1
            let idNewComp = missingId !== undefined ? missingId : maxId + 1;

            let ratioWinComp = 0;
            let fullGame = 0;

            // Duy·ªát qua danh s√°ch Comp ƒë·ªÉ t√¨m idComp ph√π h·ª£p
            Object.keys(dataArray).forEach(compKey => {
                let comp = dataArray[compKey];

                if (comp.idComp === typeGameConquest.idComp) {
                    // N·∫øu t√¨m th·∫•y comp c√≥ c√πng idComp, c·∫≠p nh·∫≠t winUser ho·∫∑c loseUser
                    if (isWin) {
                        comp.loseUser += 1;
                    } else {
                        comp.winUser += 1;
                    }
                    fullGame = comp.loseUser + comp.winUser;
                    ratioWinComp = (comp.winUser / fullGame) * 100;

                    // N·∫øu t·ª∑ l·ªá th·∫Øng < 25%, x√≥a Comp n√†y kh·ªèi Firebase
                    if (ratioWinComp < ratioWinCheck && fullGame > 10) {
                        const compRef = ref(db, `allComps/${compKey}`);
                        remove(compRef)  // X√≥a comp kh·ªèi Firebase
                            .then(() => {
                                console.log("ƒê√£ x√≥a Comp c√≥ ID:", compKey, "v√¨ t·ª∑ l·ªá th·∫Øng < 25%");
                                // X√≥a comp kh·ªèi allComps ngay l·∫≠p t·ª©c
                                allComps = allComps.filter(item => item !== null && item.idComp !== typeGameConquest.idComp);
                                console.log("allComps", allComps);
                            })
                            .catch(error => console.error("L·ªói khi x√≥a Comp:", error));
                    } else {
                        // G·ª≠i c·∫≠p nh·∫≠t l√™n Firebase n·∫øu kh√¥ng b·ªã x√≥a
                        const compRef = ref(db, `allComps/${compKey}`);
                        update(compRef, {
                            winUser: comp.winUser,
                            loseUser: comp.loseUser,
                            ratioWinComp: ratioWinComp
                        }).then(() => console.log("C·∫≠p nh·∫≠t winUser/loseUser th√†nh c√¥ng"));
                    }
                }
            });

            // T·∫°o Comp m·ªõi n·∫øu ch∆∞a c√≥ idComp n√†y
            let newBattlePetUseSlotRound = Object.keys(typeGameConquest.battlePetUseSlotRound).reduce((newObj, key) => {
                let newKey = key.replace(/B$/, 'A');
                let skillData = typeGameConquest.battlePetUseSlotRound[key];

                // Clone s√¢u ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng d·ªØ li·ªáu g·ªëc
                let clonedSkillData = JSON.parse(JSON.stringify(skillData));

                // C√°c field d·∫°ng s·ªë c·∫ßn ki·ªÉm tra NaN/Infinity
                const numericFields = ['COOLDOWN', 'HEAL', 'DAME', 'SHIELD', 'POISON', 'CRIT', 'DEF'];

                numericFields.forEach(field => {
                    if (Array.isArray(clonedSkillData[field])) {
                        clonedSkillData[field] = clonedSkillData[field].map(val =>
                            isFinite(val) ? val : 0
                        );
                    }
                });

                // C√°c field nh∆∞ EFFECT th√¨ gi·ªØ nguy√™n
                if (Array.isArray(clonedSkillData['EFFECT'])) {
                    clonedSkillData['EFFECT'] = clonedSkillData['EFFECT'].map(val =>
                        typeof val === 'string' ? val : ''
                    );
                }

                newObj[newKey] = clonedSkillData;
                return newObj;
            }, {});

            let hpNewComp = typeGameConquest.maxHpBattle + maxHpUp;
            let newCompData = {
                usernameComp: username,
                roundComp: infoStartGame.roundGame,
                slotSkillComp: newBattlePetUseSlotRound,
                maxHpBattleComp: hpNewComp,
                nameComp: nameUser,
                winComp: typeGameConquest.winBattle,
                loseComp: typeGameConquest.loseBattle,
                selectCharacterComp: typeGameConquest.selectCharacterBattle,
                dameCritA: typeGameConquest.dameCritB,
                slowA: typeGameConquest.slowB,
                upCooldownA: typeGameConquest.upCooldownB,
                idComp: idNewComp,
                winUser: 0,
                loseUser: 0,
                ratioWinComp: 0,
            };

            // Th√™m comp m·ªõi v√†o Firebase
            const newCompRef = ref(db, `allComps/${idNewComp}`);
            set(newCompRef, newCompData)
                .then(() => {
                    console.log("Comp m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Firebase v·ªõi ID:", idNewComp);
                })
                .catch(error => {
                    console.error("L·ªói khi l∆∞u Comp v√†o Firebase:", error);
                });
        })
        .catch(error => {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu allComps:", error);
        });
}


function createNewComp(isWin) {
    const currentRound = infoStartGame.roundGame;
    const firebaseCompRef = ref(db, `allCompsRound/round${currentRound}`);
    const firebaseIdNewCompRef = ref(db, "allCompsRound/idNewComp");
    const ratioWinCheck = 25;

    function getNextCompId(currentId) {
        const numPart = parseInt(currentId.replace("Comp", ""), 10);
        return "Comp" + (numPart + 1);
    }

    return get(firebaseIdNewCompRef)
        .then(snapshot => {
            let idNewComp = snapshot.val();

            if (!idNewComp) {
                idNewComp = "Comp1";
                return set(firebaseIdNewCompRef, idNewComp).then(() => idNewComp);
            } else {
                return idNewComp;
            }
        })
        .then(idNewComp => {
            console.log("ID hi·ªán t·∫°i l·∫•y t·ª´ Firebase l√†:", idNewComp);

            // T·∫°o ID m·ªõi v√† c·∫≠p nh·∫≠t Firebase
            const newIdComp = getNextCompId(idNewComp);
            return set(firebaseIdNewCompRef, newIdComp).then(() => newIdComp);
        })
        .then(newIdComp => {
            return get(firebaseCompRef).then(snapshot => {
                let compList = snapshot.val() || [];
                compList = compList.filter(comp => comp !== null);

                let existingIndex = compList.findIndex(comp =>
                    comp.usernameComp === username && comp.idComp === typeGameConquest.idComp
                );

                if (existingIndex !== -1) {
                    let comp = compList[existingIndex];
                    if (isWin) {
                        comp.loseUser += 1;
                    } else {
                        comp.winUser += 1;
                    }

                    let fullGame = comp.loseUser + comp.winUser;
                    let ratioWinComp = (comp.winUser / fullGame) * 100;

                    if (ratioWinComp < ratioWinCheck && fullGame > 10) {
                        compList.splice(existingIndex, 1);
                        console.log("ƒê√£ x√≥a comp v√¨ t·ª∑ l·ªá th·∫Øng th·∫•p.");
                    } else {
                        comp.ratioWinComp = ratioWinComp;
                        compList[existingIndex] = comp;
                        console.log("C·∫≠p nh·∫≠t comp th√†nh c√¥ng.");
                    }
                }

                let newBattlePetUseSlotRound = Object.keys(typeGameConquest.battlePetUseSlotRound).reduce((newObj, key) => {
                    let newKey = key.replace(/B$/, 'A');
                    let skillData = typeGameConquest.battlePetUseSlotRound[key];

                    // Clone s√¢u ƒë·ªÉ tr√°nh ·∫£nh h∆∞·ªüng d·ªØ li·ªáu g·ªëc
                    let clonedSkillData = JSON.parse(JSON.stringify(skillData));

                    // C√°c field d·∫°ng s·ªë c·∫ßn ki·ªÉm tra NaN/Infinity
                    const numericFields = ['COOLDOWN', 'HEAL', 'DAME', 'SHIELD', 'POISON', 'CRIT', 'DEF'];

                    numericFields.forEach(field => {
                        if (Array.isArray(clonedSkillData[field])) {
                            clonedSkillData[field] = clonedSkillData[field].map(val =>
                                isFinite(val) ? val : 0
                            );
                        }
                    });

                    // C√°c field nh∆∞ EFFECT th√¨ gi·ªØ nguy√™n
                    if (Array.isArray(clonedSkillData['EFFECT'])) {
                        clonedSkillData['EFFECT'] = clonedSkillData['EFFECT'].map(val =>
                            typeof val === 'string' ? val : ''
                        );
                    }

                    newObj[newKey] = clonedSkillData;
                    return newObj;
                }, {});

                // Th√™m comp m·ªõi v·ªõi ID m·ªõi
                let newComp = {
                    usernameComp: username,
                    roundComp: currentRound,
                    slotSkillComp: newBattlePetUseSlotRound,
                    maxHpBattleComp: typeGameConquest.maxHpBattle + maxHpUp,
                    nameComp: nameUser,
                    winComp: typeGameConquest.winBattle,
                    loseComp: typeGameConquest.loseBattle,
                    selectCharacterComp: typeGameConquest.selectCharacterBattle,
                    dameCritA: typeGameConquest.dameCritB,
                    slowA: typeGameConquest.slowB,
                    upCooldownA: typeGameConquest.upCooldownB,
                    idComp: newIdComp,
                    winUser: 0,
                    loseUser: 0,
                    ratioWinComp: 0
                };
                compList.push(newComp);
                console.log("ƒê√£ th√™m comp m·ªõi:", newComp);
                

                return set(firebaseCompRef, compList);
            });
        })
        .catch(error => {
            console.error("L·ªói trong createNewComp:", error);
        });
}


function startLoading() {
    const loadingScreen = document.getElementById("loadingScreen");
    const leftGate = document.getElementById("leftGate");
    const rightGate = document.getElementById("rightGate");

    // Hi·ªÉn th·ªã m√†n h√¨nh loading v√† b·∫Øt ƒë·∫ßu t·ªëi d·∫ßn
    loadingScreen.style.display = "block";
    loadingScreen.style.animation = "fadeToDark 1s forwards";

    // ƒê√≥ng c·ª≠a sau khi m√†n h√¨nh b·∫Øt ƒë·∫ßu t·ªëi
    setTimeout(() => {
        leftGate.style.transform = "translateX(0)";
        rightGate.style.transform = "translateX(0)";
    }, 300); // N·ª≠a gi√¢y sau khi b·∫Øt ƒë·∫ßu fade
}

function endLoading() {
    const loadingScreen = document.getElementById("loadingScreen");
    const leftGate = document.getElementById("leftGate");
    const rightGate = document.getElementById("rightGate");

    // M·ªü c·ª≠a ra
    setTimeout(() => {
        leftGate.style.transform = "translateX(-100%)";
        rightGate.style.transform = "translateX(100%)";
    }, 2000); // ƒê·ª£i 1 gi√¢y ƒë·ªÉ c·ª≠a ƒë√£ ƒë√≥ng

    // L√†m s√°ng m√†n h√¨nh v√† ·∫©n loading
    setTimeout(() => {
        loadingScreen.style.animation = "fadeToLight 1s forwards";
    }, 2500); // S√°ng m√†n h√¨nh sau khi c·ª≠a m·ªü

    setTimeout(() => {
        loadingScreen.style.display = "none"; // ·∫®n m√†n h√¨nh loading
    }, 3000); // ƒê·ª£i th√™m ƒë·ªÉ hi·ªáu ·ª©ng s√°ng ho√†n t·∫•t
}


//Show trang ƒëƒÉng k√Ω ƒëƒÉng nh·∫≠p qu√™n m·∫≠t kh·∫©u
function switchTabWelcomPage(tab) {
    const container = document.getElementById('welcomePage');
    const newForm = document.getElementById('form-' + tab);

    // N·∫øu form ƒëang hi·ªÉn th·ªã l√† form ƒë∆∞·ª£c ch·ªçn l·∫°i => kh√¥ng l√†m g√¨
    if (newForm.style.display === 'block') return;

    // B∆∞·ªõc 1: l·∫•y chi·ªÅu cao hi·ªán t·∫°i
    const startHeight = container.offsetHeight;

    // ·∫®n t·∫•t c·∫£ form
    document.getElementById('form-login').style.display = 'none';
    document.getElementById('form-register').style.display = 'none';
    document.getElementById('form-forgot').style.display = 'none';

    // Hi·ªán form m·ªõi ƒë·ªÉ ƒëo chi·ªÅu cao
    newForm.style.display = 'block';
    const endHeight = newForm.offsetHeight;

    // B∆∞·ªõc 2: ƒë·∫∑t l·∫°i height ban ƒë·∫ßu
    container.style.height = startHeight + 'px';
    container.style.transition = 'height 1s ease';
    void container.offsetHeight; // √©p reflow

    // B∆∞·ªõc 3: ƒë·∫∑t height m·ªõi -> trigger animation
    container.style.height = endHeight + 60 + 'px';

    // C·∫≠p nh·∫≠t vi·ªÅn tab
    document.getElementById('tab-login').style.borderBottom = 'none';
    document.getElementById('tab-register').style.borderBottom = 'none';
    document.getElementById('tab-forgot').style.borderBottom = 'none';
    document.getElementById('tab-' + tab).style.borderBottom = '2px solid #5C67F2';
}

//ƒêƒÇNG K√ù
function register() {
    showLoading();
    var usernameRegister = document.getElementById("registerUsername").value;
    var passwordRegister = document.getElementById("registerPassword").value;
    var name = document.getElementById("registerName").value;
    var email = document.getElementById("registerEmail").value;
    var tel = document.getElementById("registerTel").value;
    var keyActive = document.getElementById("registerKey").value;
    var messageElement = document.getElementById("registerMessage"); // Ph·∫ßn t·ª≠ th√¥ng b√°o
    var messageElementLogin = document.getElementById("loginMessage");

    // Bi·ªÉu th·ª©c ch√≠nh quy ch·ªâ cho ph√©p ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi (_), kh√¥ng ch·ª©a d·∫•u c√°ch
    var validCharRegex = /^[a-zA-Z0-9_]+$/;
    // Bi·ªÉu th·ª©c ch√≠nh quy ch·ªâ cho ph√©p s·ªë cho s·ªë ƒëi·ªán tho·∫°i
    var validPhoneRegex = /^[0-9]+$/;
    // Bi·ªÉu th·ª©c ch√≠nh quy cho email h·ª£p l·ªá (c∆° b·∫£n)
    var validEmailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán k√Ω t·ª± h·ª£p l·ªá cho username v√† password, kh√¥ng ch·ª©a d·∫•u c√°ch
    if (!validCharRegex.test(usernameRegister) || usernameRegister.includes(' ')) {
        messageElement.innerText = "T√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c kho·∫£ng tr·∫Øng.";
        hideLoading()
        return;
    }

    if (!validCharRegex.test(passwordRegister) || passwordRegister.includes(' ')) {
        messageElement.innerText = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c kho·∫£ng tr·∫Øng.";
        hideLoading()
        return;
    }

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ª£p l·ªá cho email
    if (!validEmailRegex.test(email) || email.includes(' ')) {
        messageElement.innerText = "Email kh√¥ng h·ª£p l·ªá ho·∫∑c ch·ª©a kho·∫£ng tr·∫Øng.";
        hideLoading()
        return;
    }

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ª£p l·ªá cho s·ªë ƒëi·ªán tho·∫°i: ch·ªâ c√≥ s·ªë, kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng, v√† ph·∫£i c√≥ ƒë√∫ng 10 k√Ω t·ª±
    if (!validPhoneRegex.test(tel) || tel.includes(' ') || tel.length !== 10) {
        messageElement.innerText = "S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† 10 ch·ªØ s·ªë v√† kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng.";
        hideLoading()
        return;
    }

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ª£p l·ªá cho m√£ k√≠ch ho·∫°t
    // if (keyActive.includes(' ')) {
    //     messageElement.innerText = "M√£ k√≠ch ho·∫°t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    //     hideLoading()
    //     return;
    // }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng

    get(ref(db, `allUsers`)).then(snapshot => {
        const data = snapshot.val();

        if (data && data.hasOwnProperty(usernameRegister)) {
            // Username ƒë√£ t·ªìn t·∫°i
            messageElement.innerText = "T√†i kho·∫£n ƒë√£ c√≥ ng∆∞·ªùi ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng t√†i kho·∫£n kh√°c!";
            hideLoading();
        } else {
            // Username ch∆∞a t·ªìn t·∫°i ‚Üí ti·∫øp t·ª•c t·∫°o t√†i kho·∫£n
            console.log("‚úÖ Username h·ª£p l·ªá, ch∆∞a c√≥ ai d√πng.");

            get(ref(db, `keyActiveData`)).then(snapshot => {
                let keyActiveData = snapshot.val();

                let typeActiveKey = "Th∆∞·ªùng";
                const itemKey = keyActiveData.find(item => item.key === keyActive);  // T√¨m ph·∫ßn t·ª≠ c√≥ key === keyActive

                if (itemKey) {  // N·∫øu t√¨m th·∫•y ph·∫ßn t·ª≠
                    // N·∫øu t√¨m th·∫•y ph·∫ßn t·ª≠, g√°n typeActiveKey v·ªõi typeKey c·ªßa ph·∫ßn t·ª≠ ƒë√≥
                    typeActiveKey = itemKey.typeKey;
                }

                var battlePetUseSlotRound = { //pet ƒëang d√πng t·∫°i slotskill
                    skill1B: defaultSTT5MonInBattle,
                    skill2B: defaultSTT5MonInBattle,
                    skill3B: defaultSTT5MonInBattle,
                    skill4B: defaultSTT5MonInBattle,
                    skill5B: defaultSTT5MonInBattle,
                    skill6B: defaultSTT5MonInBattle,
                    skill7B: defaultSTT5MonInBattle,
                    skill8B: defaultSTT5MonInBattle,
                    skill9B: defaultSTT5MonInBattle,
                };
                var battlePetInInventory = {
                    battleInv1: defaultSTT5MonInBattle,
                    battleInv2: defaultSTT5MonInBattle,
                    battleInv3: defaultSTT5MonInBattle,
                    battleInv4: defaultSTT5MonInBattle,
                    battleInv5: defaultSTT5MonInBattle,
                    battleInv6: defaultSTT5MonInBattle,
                    battleInv7: defaultSTT5MonInBattle,
                    battleInv8: defaultSTT5MonInBattle,
                    battleInv9: defaultSTT5MonInBattle,
                }; //pet c√≥ trong slot t·ªß ƒë·ªì
                var skillBattle = { //Khay Pet s·ª≠ d·ª•ng
                    skill1A: defaultSTT5MonInBattle,
                    skill2A: defaultSTT5MonInBattle,
                    skill3A: defaultSTT5MonInBattle,
                    skill4A: defaultSTT5MonInBattle,
                    skill5A: defaultSTT5MonInBattle,
                    skill6A: defaultSTT5MonInBattle,
                    skill7A: defaultSTT5MonInBattle,
                    skill8A: defaultSTT5MonInBattle,
                    skill9A: defaultSTT5MonInBattle,
                    skill1B: defaultSTT5MonInBattle,
                    skill2B: defaultSTT5MonInBattle,
                    skill3B: defaultSTT5MonInBattle,
                    skill4B: defaultSTT5MonInBattle,
                    skill5B: defaultSTT5MonInBattle,
                    skill6B: defaultSTT5MonInBattle,
                    skill7B: defaultSTT5MonInBattle,
                    skill8B: defaultSTT5MonInBattle,
                    skill9B: defaultSTT5MonInBattle,
                };

                var battlePetInShop = {
                    battleShop1: defaultSTT5MonInBattle,
                    battleShop2: defaultSTT5MonInBattle,
                    battleShop3: defaultSTT5MonInBattle,
                    battleShop4: defaultSTT5MonInBattle,
                    battleShop5: defaultSTT5MonInBattle,
                };

                const typeGameConquest = {
                    winBattle: 0,
                    loseBattle: 0,
                    pointBattle: 0,
                    reRoll: 0,
                    reRollPrice: 0,
                    starUser: 0,
                    selectCharacterBattle: "",
                    slowB: 0,
                    upCooldownB: 0,
                    dameCritB: 0,
                    slowA: 0,
                    upCooldownA: 0,
                    dameCritA: 0,
                    selectSkillShop: 0,
                    usernameComp: "",
                    idComp: "",
                    nameComp: "",
                    maxHpBattleComp: 0,
                    winComp: 0,
                    loseComp: 0,
                    selectCharacterComp: "",
                    battleUserPet: [""],
                    maxHpBattle: 0,
                    // slotLock: {skill1B: false, skill2B: false, skill3B: true, skill4B: true, skill5B: true, skill6B: true, skill7B: true, skill8B: true, skill9B: true},
                    battleUserPetRound: [""],
                    battlePetUseSlotRound: battlePetUseSlotRound,
                    battlePetInShop: battlePetInShop,
                    battlePetInInventory: battlePetInInventory,
                    skillBattle: skillBattle
                }

                const typeGameSolo5Mon = {}
                const typeGameGuess = {}
                const infoStartGame = { typeGame: "No", modeGame: "No", difficultyGame: "No", roundGame: 1, stepGame: 0, winStreak: 0, }

                const allBattleUsersData = { typeGameConquest, typeGameSolo5Mon, typeGameGuess }

                var userData = {
                    passwordUser: passwordRegister,
                    nameUser: name,
                    telUser: tel,
                    activateUser: "Yes",
                    keyLogin: 0,
                    pointRank: { typeGameConquest: 0, typeGameSolo5Mon: 0, typeGameGuess: 0 },
                    goldUser: 0,
                    staminaUser: 0,
                    weightBagUser: 100,
                    luckyMeet5Mon: 5,
                    diamondUser: 0,
                    characterUser: "",
                    allCharacterUser: [],
                    userPet: [""],
                    battleData: allBattleUsersData,
                    isBan: "No",
                    timeOnline: "",
                    onlineLasted: "",
                    weekOnline: "",
                    ticketsUser: 0,
                    vipTicket: typeActiveKey,
                    onGame: 0,
                    infoStartGame: infoStartGame,
                    idSkillRND: 0,
                    todayCheckin: "No",
                    weekCheckin: { t2: 0, t3: 0, t4: 0, t5: 0, t6: 0, t7: 0, cn: 0 },
                    giftCheckinComplete: "",
                    questDay: { qd1: [0, "No"], qd2: [0, "No"], qd3: [0, "No"], qd4: [0, "No"], qd5: [0, "No"], qd6: [0, "No"] },
                    questWeek: { qw1: [0, "No"], qw2: [0, "No"], qw3: [0, "No"], qw4: [0, "No"], qw5: [0, "No"], qw6: [0, "No"] },
                    questWeekend: { qwe1: [0, "No"], qwe2: [0, "No"], qwe3: [0, "No"], qwe4: [0, "No"], qwe5: [0, "No"], qwe6: [0, "No"] }
                };


                // Th·ª±c hi·ªán t·∫°o t√†i kho·∫£n
                const userRef = ref(db, `allUsers/${usernameRegister}`);
                set(userRef, userData)
                    .then(() => {
                        messageElementLogin.innerText = "ƒêƒÉng k√Ω th√†nh c√¥ng";
                        document.getElementById("loginUsername").value = usernameRegister;
                        document.getElementById("loginPassword").value = passwordRegister;
                        document.getElementById("registerPage").style.opacity = 0;
                        setTimeout(() => {
                            document.getElementById("registerPage").style.display = "none";
                        }, 1500);
                        hideLoading();
                    })
                    .catch((error) => {
                        console.error("‚ùå L·ªói khi t·∫°o t√†i kho·∫£n:", error);
                        messageElement.innerText = "ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n.";
                        hideLoading();
                    });

                // C·∫≠p nh·∫≠t keyActiveData sau khi ƒëƒÉng k√Ω n·∫øu c√≥ d√πng keyActive
                if (keyActive && keyActive !== "") {
                    let updatedKeyActiveData = keyActiveData.filter(item => item.key !== keyActive);

                    // N·∫øu kh√¥ng c√≤n key n√†o, th√™m key m·∫∑c ƒë·ªãnh
                    if (updatedKeyActiveData.length === 0) {
                        updatedKeyActiveData = [{ key: "JEAEF!@H%ZXZ", typeKey: "V√†ng" }];
                    }

                    update(ref(db), { keyActiveData: updatedKeyActiveData })
                        .then(() => {
                            console.log("‚úÖ C·∫≠p nh·∫≠t keyActiveData th√†nh c√¥ng!");
                        })
                        .catch((error) => {
                            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t keyActiveData:", error);
                        });
                }
            })


            const userRankData = {
                [usernameRegister]: { rankPoint: { typeGameConquest: 0, typeGameGuess: 0, typeGameSolo5Mon: 0 } }
            };


            update(ref(db, 'rankGame'), userRankData)
                .then(() => {
                    console.log("‚úÖ ƒê√£ th√™m ho·∫∑c c·∫≠p nh·∫≠t rankGame cho ng∆∞·ªùi d√πng:", usernameRegister);
                })
                .catch(err => {
                    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t rankGame:", err);
                });

        }
    }).catch(error => {
        messageElement.innerText = "L·ªói ƒëƒÉng k√Ω, vui l√≤ng th·ª≠ l·∫°i!";
        console.error("L·ªói:", error);
        hideLoading();
    });

}


//ƒêƒÇNG NH·∫¨P
//ƒêƒÉng nh·∫≠p khi ƒë√∫ng t√†i kho·∫£n
function login(isTest) {
    showLoading();
    loadAllData();
    var usernameLogin = document.getElementById("loginUsername").value;
    var passwordLogin = document.getElementById("loginPassword").value;
    if (isTest) {
        usernameLogin = "vanviettest";
        passwordLogin = "123456";
    }
    var firebaseUserRef = ref(db, 'allUsers/' + usernameLogin); // Reference t·ªõi Firebase Realtime Database

    // S·ª≠ d·ª•ng get() ƒë·ªÉ l·∫•y d·ªØ li·ªáu
    get(firebaseUserRef)
        .then(snapshot => {
            if (!snapshot.exists()) {
                var messageElement = document.getElementById("loginMessage");
                messageElement.innerText = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!";
                hideLoading();
                return;
            }

            var userData = snapshot.val(); // D·ªØ li·ªáu ng∆∞·ªùi d√πng

            var messageElement = document.getElementById("loginMessage");

            if (userData.passwordUser !== passwordLogin) {
                messageElement.innerText = "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!";
                hideLoading();
                return;
            }

            if (userData.activateUser === "No") {
                messageElement.innerText = "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t, vui l√≤ng ƒë·ª£i ho·∫∑c li√™n h·ªá h·ªó tr·ª£!";
                hideLoading();
                return;
            }

            // ‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i online
            let newKey = Math.floor(1000000000 + Math.random() * 9000000000)
            keyLogin = newKey;

            set(firebaseUserRef, {
                ...userData,
                keyLogin: newKey,
            })
                .then(() => {
                    username = usernameLogin;
                    password = passwordLogin;

                    loadDataForUser(); // Load d·ªØ li·ªáu ng∆∞·ªùi d√πng

                    document.getElementById("welcomePage").style.display = "none";
                    document.getElementById("mainScreen").style.display = "flex";

                    document.getElementById("loginUsername").value = "";
                    document.getElementById("loginPassword").value = "";
                    openFullscreen();
                    loadMap();
                    startStaminaRegen();
                    // loadAllComp();
                });

            hideLoading();

            // X√≥a th√¥ng b√°o sau 3 gi√¢y
            setTimeout(() => {
                messageElement.innerText = "";
            }, 3000);
        })
        .catch(error => {
            console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
            document.getElementById("loginMessage").innerText = "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i!";
            hideLoading();
        });
}

window.login = login;

let allCharacterLoad = [];
let characterSelect;
let indexCharacterSelect = 0;

function openPopupSelectCharacter(newAccount) {
    if (newAccount) { // N·∫øu l√† t√†i kho·∫£n m·ªõi
        allCharacterLoad = [
            allCharacter["C0001"],
            allCharacter["C0002"]
        ];
        indexCharacterSelect = 0;
        characterSelect = allCharacter["C0001"];
    } else { // N·∫øu l√† b·∫•m v√†o thay ƒë·ªïi nh√¢n v·∫≠t
        allCharacterLoad = allCharacterUser
            .map(id => allCharacter[id])
            .filter(char => char); // b·ªè qua undefined n·∫øu id kh√¥ng t·ªìn t·∫°i
    
        indexCharacterSelect = allCharacterLoad.findIndex(char => char.id === characterUser);
        if (indexCharacterSelect === -1) indexCharacterSelect = 0;
    
        characterSelect = allCharacterLoad[indexCharacterSelect];
    }

    showDescCharacterSelect(characterSelect);

    document.getElementById("popupSelectCharacter").style.display = "flex";
    console.log("allCharacterLoad", allCharacterLoad);
}

function prevShowCharacterSelect() {
    indexCharacterSelect = (indexCharacterSelect - 1 + allCharacterLoad.length) % allCharacterLoad.length;
    characterSelect = allCharacterLoad[indexCharacterSelect];
    showDescCharacterSelect(characterSelect);
}

function nextShowCharacterSelect() {
    indexCharacterSelect = (indexCharacterSelect + 1) % allCharacterLoad.length;
    characterSelect = allCharacterLoad[indexCharacterSelect];
    showDescCharacterSelect(characterSelect);
}
    
function showDescCharacterSelect(characterSelect) {
    document.getElementById("imgCharacterSelect").src = characterSelect.urlIMG
    document.getElementById("nameCharacter").innerText = characterSelect.name
    
    let sttCharacter = ""
    if (characterSelect.hpMax > 0) {
        sttCharacter +=  `<span>TƒÉng <a style="color:green">${characterSelect.hpMax} sinh m·ªánh t·ªëi ƒëa</a> cho nh√¢n v·∫≠t sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upDame > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:red">${characterSelect.upDame} s√°t th∆∞∆°ng</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upHeal > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:lime">${characterSelect.upHeal} ch·ªâ s·ªë h·ªìi Hp</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upShield > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:blue">${characterSelect.upShield} ch·ªâ s·ªë t·∫°o gi√°p</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upBurn > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:orange">${characterSelect.upBurn} s√°t th∆∞∆°ng ƒë·ªët</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upPoison > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:purple">${characterSelect.upPoison} g√¢y ƒë·ªôc</a> cho t·∫•t c·∫£ 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upCrit > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:red">${characterSelect.upCrit} ch·ªâ s·ªë ch√≠ m·∫°ng</a> 5mon sau m·ªói v√≤ng ƒë·∫•u</span>`;
    }
    if (characterSelect.upCooldown > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:blue">${characterSelect.upCooldown / 1000}s t·ªëc ƒë·ªô</a> c·ªßa b·∫£n th√¢n sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.upCooldownB / 1000}s)</span>`;
    }
    if (characterSelect.dameCrit > 0) {
        sttCharacter += `<span>TƒÉng <a style="color:red">${characterSelect.dameCrit}% s√°t th∆∞∆°ng ch√≠ m·∫°ng</a> sau m·ªói v√≤ng ƒë·∫•u (hi·ªán t·∫°i: ${typeGameConquest.dameCritB}%)</span>`;
    }
    
    document.getElementById("descCharacterSelect").innerHTML = `
    <div>
        ${characterSelect.desc}
    </div>
    <div style="display: flex; text-align: justify; flex-direction: column; align-items: flex-start; justify-content: flex-start;
    gap: 5px;">
        <span style="font-weight: bold">Ch·ªâ s·ªë:</span>
        ${sttCharacter}
    </div>
    `
}

function selectCharacterForUser() {
    characterUser = characterSelect.id
    document.getElementById("playerHunter").src= characterSelect.urlIMG
    document.getElementById("popupSelectCharacter").style.display = "none";
}

//LOADING
function showLoading() {
    document.getElementById("loadingOverlay").style.animation = 'fadeIn 1s ease-out';
    document.getElementById("loadingOverlay").style.display = "flex";
}

function hideLoading() {
    document.getElementById("loadingOverlay").style.animation = 'fadeOut 1s ease-in-out forwards';
    setTimeout(() => {
        document.getElementById("loadingOverlay").style.display = "none";
    }, 1000); // Th·ªùi gian (3000 ms = 3 gi√¢y)
}

let sortBagLeft = "";
let sortBagRight = "";

function chosenSortBagLeft(sort, divID) {

    const allButtonSort = {
        buttonSSR: { div: document.getElementById("buttonSSR") },
        buttonSS: { div: document.getElementById("buttonSS") },
        buttonS: { div: document.getElementById("buttonS") },
        buttonA: { div: document.getElementById("buttonA") },
        buttonB: { div: document.getElementById("buttonB") },
        buttonC: { div: document.getElementById("buttonC") },
        buttonD: { div: document.getElementById("buttonD") },
        buttonAll: { div: document.getElementById("buttonAll") },
    }

    Object.values(allButtonSort).forEach((button, index) => {
        let divAll = button.div
        divAll.style.background = "rgb(222, 109, 62)" //Reset v·ªÅ m√†u c≈©
    })

    document.getElementById(divID).style.background = "rgb(181 27 27)"

    sortBagLeft = sort
    loadItemBagLeft(sortBagLeft);
}

function openBag() {

    showOrHiddenDiv('popupBag');
    if (!sortBagLeft || sortBagLeft === "") {
        chosenSortBagLeft("All", "buttonAll")
    } else {
        let divButton
        if (sortBagLeft === "All") {
            divButton = "buttonAll"
        } else {
            divButton = `button${sortBagLeft}`
        }
        chosenSortBagLeft(sortBagLeft, divButton)
    }

    if (!sortBagRight || sortBagRight === "") {
        loadItemBagRight("Conquest");
    } else {
        loadItemBagRight(sortBagRight);
    }

    document.getElementById("bagPages").addEventListener("drop", handleDropBag);
    document.getElementById("inventoryPages").addEventListener("drop", handleDropInventory);

    if (document.getElementById("overlayPopupBag").style.display === "block") {
        document.getElementById("overlayPopupBag").style.display = "none";
    } else {
        document.getElementById("overlayPopupBag").style.display = "block";
    }
}

function loadItemBagLeft(sort) {
    sortBagLeft = sort
    const boardBagLeft = document.getElementById("boardBagLeft")
    const containerId = "inventoryPages";
    let userPetSort
    if (sort === "All") {
        userPetSort = Object.values(userPet).sort((a, b) => a.ID.localeCompare(b.ID));
    } else {
        userPetSort = Object.values(userPet)
            .filter(pet => pet.RARE === sort)
            .sort((a, b) => a.ID.localeCompare(b.ID));
    }

    boardBagLeft.innerHTML = ""

    Object.values(userPetSort).forEach((item, index) => {
        const prefix = "inventory"
        const skillDiv = document.createElement("div");
        skillDiv.id = `${prefix}${index + 1}`;
        skillDiv.style.width = "65px";
        skillDiv.style.height = "76px";
        skillDiv.style.cursor = "grab"; // S·ª≠a c√∫ ph√°p
        skillDiv.style.borderRadius = "5px"; // S·ª≠a c√∫ ph√°p (border-radius => borderRadius)
        skillDiv.style.textAlign = "center"; // S·ª≠a c√∫ ph√°p (text-align => textAlign)
        skillDiv.style.background = "#3b3b56"; // D√πng ƒë√∫ng c√∫ ph√°p
        skillDiv.style.backgroundSize = "cover";
        skillDiv.style.backgroundPosition = "center";
        skillDiv.style.backgroundRepeat = "no-repeat";
        skillDiv.style.position = "relative";
        skillDiv.style.border = "2px solid rebeccapurple";
        skillDiv.style.outline = "4px solid #ff973a";
        skillDiv.onmouseover = function () {
            this.style.transform = "scale(1.05)";
        };
        skillDiv.onmouseout = function () {
            this.style.transform = "scale(1)";
        };
        let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
        
        skillDiv.style.backgroundImage = `url(${URLimg})`; // ƒê·∫∑t URL h√¨nh ·∫£nh
        skillDiv.draggable = true; // ƒê·∫∑t thu·ªôc t√≠nh draggable
        skillDiv.dataset.id = item.ID; // G·∫Øn d·ªØ li·ªáu ID
        skillDiv.dataset.idcreate = item.IDcreate; // G·∫Øn d·ªØ li·ªáu ID

        skillDiv.className = "skill5MonInBag";
        skillDiv.dataset.source = containerId; // G·∫Øn d·ªØ li·ªáu ngu·ªìn


        let dameSkillText = ``; // D√πng let c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c bi·∫øn, c√≤n d√πng const kh√¥ng ƒë∆∞·ª£c

        if (item.DAME[0] > 0) { //Skill dame
            dameSkillText += `<div class="skill-dame">${Number(item.DAME[0])}</div>`;
        }
        if (item.HEAL[0] > 0) { //Skill heal
            dameSkillText += `<div class="skill-heal">${Number(item.HEAL[0])}</div>`;
        }
        if (item.SHIELD[0] > 0) { //Skill shield
            dameSkillText += `<div class="skill-shield">${Number(item.SHIELD[0])}</div>`;
        }
        if (item.BURN[0] > 0) { //Skill BURN
            dameSkillText += `<div class="skill-burn">${Number(item.BURN[0])}</div>`;
        }
        if (item.POISON[0] > 0) { //Skill Poison
            dameSkillText += `<div class="skill-poison">${Number(item.POISON[0])}</div>`;
        }
        if (item.EFFECT.includes("Freeze")) { //Skill ƒë√≥ng bƒÉng freeze
            dameSkillText += `<div class="skill-freeze">${Number(item.COOLDOWN[0] / 2 / 1000 * item.LEVEL)}</div>`;
        }

        boardBagLeft.appendChild(skillDiv);

        // G·∫Øn n·ªôi dung v√†o slotDiv
        skillDiv.innerHTML =
            `<div class="dameSkillText" style="display: flex; flex-direction: row; align-items: center;">
                      ${dameSkillText}
                      </div>
                      <div style="position: absolute;font-size: 10px;font-weight: bold;color: rgb(83, 21, 21);text-shadow: 2px 1px 2px #140a03;top: 5px;right: 8px; z-index: 2">
                        <span style="position: absolute;top: -8px;left: 8px;transform: translate(-50%, -50%);font-size: 12px; padding: 1px; color: #ffd600; font-weight: bold; background: #ff0000;min-width: 15px; border-radius: 5px;">${item.RARE}</span>
                      </div>`;

        //Ki·ªÉm tra xem ƒë√£ trang b·ªã ch∆∞a
        const hasEquipped = Object.values(typeGameConquest.battleUserPet).some(pet => pet.ID === item.ID);

        if (hasEquipped) {
            const ownedOverlay = document.createElement("div");
            ownedOverlay.textContent = "ƒê√£ d√πng";
            ownedOverlay.style.cssText = `
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.3);
                color: white;
                font-size: 14px;
                font-weight: bold;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 10px;
                pointer-events: none;
            `;
            skillDiv.appendChild(ownedOverlay);
        }

        skillDiv.addEventListener("dragstart", (event) => {
            const data = {
                skillId: item.IDcreate, // truy·ªÅn IDcreate
                source: "inventoryPages"
            };
            event.dataTransfer.setData("text/plain", JSON.stringify(data));
        });

        skillDiv.addEventListener("click", (e) => {
            // X√≥a popup n√∫t n·∫øu ƒë√£ c√≥
            const existingPopup = document.querySelector(".item-action-popup");
            if (existingPopup) existingPopup.remove();

            // T·∫°o popup container
            let popup = document.createElement("div");
            popup.className = "item-action-popup";
            popup.style.position = "relative";
            popup.style.display = "flex";
            popup.style.flexDirection = "column";
            popup.style.gap = "5px";
            popup.style.zIndex = "10";
            popup.style.background = "#04040454";
            popup.style.height = "100%";
            popup.style.justifyContent = "center";

            // N√∫t Th√¥ng tin
            let infoBtn = document.createElement("button");
            infoBtn.innerText = "Th√¥ng tin";
            infoBtn.style.padding = "3px";
            infoBtn.style.cursor = "pointer";
            infoBtn.style.background = "#4da6ff";
            infoBtn.style.color = "#fff";
            infoBtn.style.border = "none";
            infoBtn.style.borderRadius = "3px";
            infoBtn.style.boxShadow = "1px 1px 2px #000000c4";
            infoBtn.addEventListener("click", () => {
                setupClickPopupInfo5MonBag(item, "inventory", item.LEVEL);

                for (let k = 1; k <= 4; k++) {
                    document.getElementById(`popupSTT5MonLV${k}`).style.background = "firebrick";
                }

                document.getElementById(`popupSTT5MonLV${item.LEVEL}`).style.background = "rebeccapurple";

                infoBtn.remove();
                infoBtn = null;
                popup.remove();
                popup = null;
            });

            // N√∫t g·∫Øn v√†o
            let addBtn = document.createElement("button");
            addBtn.innerText = "G·∫Øn v√†o";
            addBtn.style.padding = "3px";
            addBtn.style.cursor = "pointer";
            addBtn.style.background = "#ff4d4d";
            addBtn.style.color = "#fff";
            addBtn.style.border = "none";
            addBtn.style.borderRadius = "3px";
            addBtn.style.boxShadow = "1px 1px 2px #000000c4";
            addBtn.addEventListener("click", () => {
                if (Object.values(typeGameConquest.battleUserPet).length >= 40) {
                    messageOpen('H√†nh l√Ω ƒë√£ ƒë·∫ßy');
                    return;
                }

                const newKey = item.IDcreate;

                // N·∫øu ch∆∞a t·ªìn t·∫°i key IDcreate
                if (typeGameConquest.battleUserPet[newKey]) {
                    messageOpen('H√†nh l√Ω ƒë√£ c√≥ 5Mon n√†y r·ªìi');
                    return;
                } else {
                    // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i pet c√≥ c√πng ID hay ch∆∞a
                    const isDuplicate = Object.values(typeGameConquest.battleUserPet).some(pet => pet.ID === item.ID);

                    if (isDuplicate) {
                        messageOpen('H√†nh l√Ω ƒë√£ c√≥ 5Mon n√†y r·ªìi');
                        return;
                    }

                    // N·∫øu kh√¥ng tr√πng th√¨ th√™m v√†o
                    typeGameConquest.battleUserPet[newKey] = item;
                    loadItemBagRight(sortBagRight);
                    loadItemBagLeft(sortBagLeft)
                    addBtn.remove();
                    addBtn = null;
                    popup.remove();
                    popup = null;
                }
            });

            // Th√™m n√∫t v√†o popup
            popup.appendChild(infoBtn);
            popup.appendChild(addBtn);

            // Xo√° popup n·∫øu click ngo√†i
            document.addEventListener("click", function docClick(e) {
                if (popup && !popup.contains(e.target) && e.target !== skillDiv) {
                    addBtn.remove()
                    addBtn = null;
                    infoBtn.remove();
                    infoBtn = null;
                    popup.remove();
                    popup = null;
                    document.removeEventListener("click", docClick);
                }
            });

            for (let s = 1; s <= 4; s++) {
                const el = document.getElementById(`popupSTT5MonLV${s}`);
                if (!el) continue;
                el.onclick = () => {
                    setupClickPopupInfo5MonBag(item, "inventory", s);
                    for (let k = 1; k <= 4; k++) {
                        document.getElementById(`popupSTT5MonLV${k}`).style.background = "firebrick";
                    }
                    
                    el.style.background = "rebeccapurple";

                };
            }
            
            // Th√™m v√†o skillDiv
            skillDiv.appendChild(popup);
        });

    });

    document.getElementById("weightBagLeftText").innerText = `${Object.values(userPet).length}/${weightBagUser}`
    document.getElementById("weightBagLeft").style.width = `${Math.min(Object.values(userPet).length / weightBagUser * 100, 100)}%`
}

function handleDropBag(event) {
    event.preventDefault();
    const data = JSON.parse(event.dataTransfer.getData("text/plain"));
    const { skillId: skillIDcreate, source } = data;
    console.log("??right")
    if (Object.values(typeGameConquest.battleUserPet).length >= 40) {
        messageOpen('H√†nh l√Ω ƒë√£ ƒë·∫ßy')
        return;
    }

    if (source === "inventoryPages") {
        // T√¨m skill trong userPet theo IDcreate
        const skill = Object.values(userPet).find((s) => s.IDcreate === skillIDcreate);

        if (!skill) {
            console.log("Skill kh√¥ng t·ªìn t·∫°i trong userPet!");
            return;
        }

        const skillID = skill.ID;

        // Ki·ªÉm tra xem ƒë√£ c√≥ skill n√†y trong battle ch∆∞a (theo ID ho·∫∑c IDcreate)
        const battleList = Object.values(typeGameConquest.battleUserPet);
        const alreadyInBag = battleList.some((s) => s.ID === skillID || s.IDcreate === skillIDcreate);

        if (!alreadyInBag) {
            // G√°n theo key l√† IDcreate
            typeGameConquest.battleUserPet[skillIDcreate] = skill;
            loadItemBagLeft(sortBagLeft);
            loadItemBagRight(sortBagRight);
        } else {
            console.log("Skill ƒë√£ c√≥ trong bag r·ªìi!");
        }
    }
}


function handleDropInventory(event) {
    event.preventDefault();
    const data = JSON.parse(event.dataTransfer.getData("text/plain"));
    const { skillId, source, item } = data;
    console.log("??left")
    if (source === "bagPages") {
        const skillIDcreate = item.IDcreate;

        if (typeGameConquest.battleUserPet[skillIDcreate]) {
            delete typeGameConquest.battleUserPet[skillIDcreate];
            loadItemBagLeft(sortBagLeft);
            loadItemBagRight(sortBagRight);
        } else {
            console.log("Skill kh√¥ng t·ªìn t·∫°i trong bag!");
        }
    }
}


function loadItemBagRight(sort) {
    sortBagRight = sort;
    const boardBagRight = document.getElementById("boardBagRight")
    const containerId = "bagPages";
    const battleUserPet = sort === "Conquest" ? typeGameConquest.battleUserPet : typeGameSolo5Mon.battleUserPet
    let battleUserPetSort = Object.values(battleUserPet).sort((a, b) => a.ID.localeCompare(b.ID));
    battleUserPetSort = Object.fromEntries(
        battleUserPetSort.map(item => [item.IDcreate, item])
    );

    console.log("battleUserPetSort", battleUserPetSort)
    boardBagRight.innerHTML = ""

    Object.values(battleUserPetSort).forEach((item, index) => {
        const prefix = "bag"
        const skillDiv = document.createElement("div");
        skillDiv.id = `${prefix}${index + 1}`;
        skillDiv.style.width = "65px";
        skillDiv.style.height = "76px";
        skillDiv.style.cursor = "grab"; // S·ª≠a c√∫ ph√°p
        skillDiv.style.borderRadius = "5px"; // S·ª≠a c√∫ ph√°p (border-radius => borderRadius)
        skillDiv.style.textAlign = "center"; // S·ª≠a c√∫ ph√°p (text-align => textAlign)
        skillDiv.style.background = "#3b3b56"; // D√πng ƒë√∫ng c√∫ ph√°p
        skillDiv.style.backgroundSize = "cover";
        skillDiv.style.backgroundPosition = "center";
        skillDiv.style.backgroundRepeat = "no-repeat";
        skillDiv.style.position = "relative";
        skillDiv.style.border = "2px solid rebeccapurple";
        skillDiv.style.outline = "4px solid #ff973a";
        skillDiv.onmouseover = function () {
            this.style.transform = "scale(1.05)";
        };
        skillDiv.onmouseout = function () {
            this.style.transform = "scale(1)";
        };
        let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
        skillDiv.style.backgroundImage = `url(${URLimg})`; // ƒê·∫∑t URL h√¨nh ·∫£nh
        skillDiv.draggable = true; // ƒê·∫∑t thu·ªôc t√≠nh draggable
        skillDiv.dataset.id = item.ID; // G·∫Øn d·ªØ li·ªáu ID
        skillDiv.dataset.idcreate = item.IDcreate; // G·∫Øn d·ªØ li·ªáu ID
        skillDiv.className = "skill5MonInBag";
        skillDiv.dataset.source = containerId; // G·∫Øn d·ªØ li·ªáu ngu·ªìn

        let dameSkillText = ``; // D√πng let c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c bi·∫øn, c√≤n d√πng const kh√¥ng ƒë∆∞·ª£c

        if (item.DAME[0] > 0) { //Skill dame
            dameSkillText += `<div class="skill-dame">${Number(item.DAME[0])}</div>`;
        }
        if (item.HEAL[0] > 0) { //Skill heal
            dameSkillText += `<div class="skill-heal">${Number(item.HEAL[0])}</div>`;
        }
        if (item.SHIELD[0] > 0) { //Skill shield
            dameSkillText += `<div class="skill-shield">${Number(item.SHIELD[0])}</div>`;
        }
        if (item.BURN[0] > 0) { //Skill BURN
            dameSkillText += `<div class="skill-burn">${Number(item.BURN[0])}</div>`;
        }
        if (item.POISON[0] > 0) { //Skill Poison
            dameSkillText += `<div class="skill-poison">${Number(item.POISON[0])}</div>`;
        }
        if (item.EFFECT.includes("Freeze")) { //Skill ƒë√≥ng bƒÉng freeze
            dameSkillText += `<div class="skill-freeze">${Number(item.COOLDOWN[0] / 2 / 1000 * item.LEVEL)}</div>`;
        }

        boardBagRight.appendChild(skillDiv);

        // G·∫Øn n·ªôi dung v√†o slotDiv
        skillDiv.innerHTML =
            `<div class="dameSkillText" style="display: flex; flex-direction: row; align-items: center;">
                      ${dameSkillText}
                      </div>
                      <div style="position: absolute;font-size: 10px;font-weight: bold;color: rgb(83, 21, 21);text-shadow: 2px 1px 2px #140a03;top: 5px;right: 8px; z-index: 2">
                        <span style="position: absolute;top: -8px;left: 8px;transform: translate(-50%, -50%);font-size: 12px; padding: 1px; color: #ffd600; font-weight: bold; background: #ff0000;min-width: 15px; border-radius: 5px;">${item.RARE}</span>
                      </div>`;

        skillDiv.addEventListener("dragstart", (event) => {
            const data = {
                skillId: item.IDcreate,
                source: "bagPages",
                item: item // truy·ªÅn full object ƒë·ªÉ d√πng l·∫°i
            };
            event.dataTransfer.setData("text/plain", JSON.stringify(data));
        });

        skillDiv.addEventListener("click", (e) => {
            // X√≥a popup n√∫t n·∫øu ƒë√£ c√≥
            const existingPopup = document.querySelector(".item-action-popup");
            if (existingPopup) existingPopup.remove();

            // T·∫°o popup container
            let popup = document.createElement("div");
            popup.className = "item-action-popup";
            popup.style.position = "relative";
            popup.style.display = "flex";
            popup.style.flexDirection = "column";
            popup.style.gap = "5px";
            popup.style.zIndex = "10";
            popup.style.background = "#04040454";
            popup.style.height = "100%";
            popup.style.justifyContent = "center";

            // N√∫t Th√¥ng tin
            let infoBtn = document.createElement("button");
            infoBtn.innerText = "Th√¥ng tin";
            infoBtn.style.padding = "3px";
            infoBtn.style.cursor = "pointer";
            infoBtn.style.background = "#4da6ff";
            infoBtn.style.color = "#fff";
            infoBtn.style.border = "none";
            infoBtn.style.borderRadius = "3px";
            infoBtn.style.boxShadow = "1px 1px 2px #000000c4";
            infoBtn.addEventListener("click", () => {
                setupClickPopupInfo5MonBag(item, "bag", item.LEVEL);

                for (let k = 1; k <= 4; k++) {
                    document.getElementById(`popupSTT5MonLV${k}`).style.background = "firebrick";
                }

                document.getElementById(`popupSTT5MonLV${item.LEVEL}`).style.background = "rebeccapurple";
                infoBtn.remove();
                infoBtn = null;
                popup.remove();
                popup = null;
            });

            // N√∫t Th√°o ra
            let removeBtn = document.createElement("button");
            removeBtn.innerText = "Th√°o";
            removeBtn.style.padding = "3px";
            removeBtn.style.cursor = "pointer";
            removeBtn.style.background = "#ff4d4d";
            removeBtn.style.color = "#fff";
            removeBtn.style.border = "none";
            removeBtn.style.borderRadius = "3px";
            removeBtn.style.boxShadow = "1px 1px 2px #000000c4";
            removeBtn.addEventListener("click", () => {
                for (const key in typeGameConquest.battleUserPet) {
                    if (typeGameConquest.battleUserPet[key].IDcreate === item.IDcreate) {
                        delete typeGameConquest.battleUserPet[key];  // Xo√° pet ra kh·ªèi object
                        loadItemBagRight(sortBagRight)
                        loadItemBagLeft(sortBagLeft)
                        removeBtn.remove()
                        removeBtn = null;
                        popup.remove();
                        popup = null;
                        break;
                    }
                }
            });

            // Th√™m n√∫t v√†o popup
            popup.appendChild(infoBtn);
            popup.appendChild(removeBtn);

            // Xo√° popup n·∫øu click ngo√†i
            document.addEventListener("click", function docClick(e) {
                if (popup && !popup.contains(e.target) && e.target !== skillDiv) {
                    removeBtn.remove()
                    removeBtn = null;
                    infoBtn.remove();
                    infoBtn = null;
                    popup.remove();
                    popup = null;
                    document.removeEventListener("click", docClick);
                }
            });


            for (let s = 1; s <= 4; s++) {
                const el = document.getElementById(`popupSTT5MonLV${s}`);
                if (!el) continue;
                el.onclick = () => {
                    setupClickPopupInfo5MonBag(item, "bag", s);
                    for (let k = 1; k <= 4; k++) {
                        document.getElementById(`popupSTT5MonLV${k}`).style.background = "firebrick";
                    }
                    
                    el.style.background = "rebeccapurple";

                };
            }
        
            // Th√™m v√†o skillDiv
            skillDiv.appendChild(popup);
        });
    });

    document.getElementById("weightBagRightText").innerText = `${Object.values(typeGameConquest.battleUserPet).length}/40`
    document.getElementById("weightBagRight").style.width = `${Math.min(Object.values(typeGameConquest.battleUserPet).length / 40 * 100, 100)}%`
}


//H√†m t√≠nh stat n√¢ng c·∫•p 5mon
function updateStatWhenLevelUp(skill, level, power, isInBattle) {
    let powerBonus

    if (isInBattle) {
        let lvUpScale = skill.LVUPSCALE[power.toUpperCase()]
        let lv1 = 0
        let lv2 = Math.round(50 * 2 * lvUpScale)
        let lv3 = Math.round(50 * 3 * lvUpScale)
        let lv4 = Math.round(50 * 4 * lvUpScale)


        if (skill.LEVEL === 4) {
            if (level === 0) {
                powerBonus = 0
            } else if (level === -1) {
                powerBonus = -lv4
            } else if (level === -2) {
                powerBonus = -lv4 - lv3
            } else if (level === -3) {
                powerBonus = -lv4 -lv3 -lv2
            } 
        } else if (skill.LEVEL === 3) {
            if (level === 1) {
                powerBonus = lv4
            } else if (level === 0) {
                powerBonus = 0
            } else if (level === -1) {
                powerBonus = -lv3
            } else if (level === -2) {
                powerBonus = -lv3 - lv2
            }
        } else if (skill.LEVEL === 2) {
            if (level === 2) {
                powerBonus = lv4 + lv3
            } else if (level === 1) {
                powerBonus = lv3
            } else if (level === 0) {
                powerBonus = 0
            } else if (level === -1) {
                powerBonus = -lv2
            }
        } else if (skill.LEVEL === 1) {
            if (level === 3) {
                powerBonus = lv4 + lv3 + lv2
            } else if (level === 2) {
                powerBonus = lv3 + lv2
            } else if (level === 1) {
                powerBonus = lv2
            } else if (level === 0) {
                powerBonus = 0
            }
        }
 
    } else {
        let sLvUPPower

        if (power==='str') {
            sLvUPPower = getScaleLevelUp(skill.POWER.STR);
        } else if (power==='def') {
            sLvUPPower = getScaleLevelUp(skill.POWER.DEF);
        } else if (power==='int') {
            sLvUPPower = getScaleLevelUp(skill.POWER.INT);
        } else if (power==='agi') {
            sLvUPPower = getScaleLevelUp(skill.POWER.AGI);
        } else if (power==='luk') {
            sLvUPPower = getScaleLevelUp(skill.POWER.LUK);
        } else if (power==='hp') {
            sLvUPPower = getScaleLevelUp(skill.POWER.HP);
        }

        if (level === 1) {
            powerBonus = 0
        } else if (level === 2) {
            powerBonus = Math.round(50 * 2 * sLvUPPower)
        } else if (level === 3) {
            powerBonus = Math.round((50 * 2 * sLvUPPower) + (50 * 3 * sLvUPPower))
        } else if (level === 4) {
            powerBonus = Math.round((50 * 2 * sLvUPPower) + (50 * 3 * sLvUPPower) + (50 * 4 * sLvUPPower))
        } else if (level === 0) {
            powerBonus = 0
        } else if (level === -1) {
            powerBonus = Math.round(-(50 * 2 * sLvUPPower))
        } else if (level === -2) {
            powerBonus = Math.round(-((50 * 2 * sLvUPPower) + (50 * 3 * sLvUPPower)))
        } else if (level === -3) {
            powerBonus = Math.round(-((50 * 2 * sLvUPPower) + (50 * 3 * sLvUPPower) + (50 * 4 * sLvUPPower)))
        }
    }

    console.log("powerBonus", powerBonus)
    return powerBonus || 0;
}


function setupClickPopupInfo5MonBag(item, prefix, level) {
    const popup = document.getElementById("popupSTT5Mon");
    const overlay = document.getElementById("popupOverlay");

    let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
    
    let colorLevel = "#531515";
    if (level === 2) {
        colorLevel = "#8c0b0b"
    } else if (level === 3) {
        colorLevel = "#c00d0d"
    } else if (level === 4) {
        colorLevel = "red"
    } else {
        colorLevel = "#531515"
    }
    
    const powerStatsSTR = updateStatWhenLevelUp(item, level, 'str');
    const powerStatsDEF = updateStatWhenLevelUp(item, level, 'def');
    const powerStatsINT = updateStatWhenLevelUp(item, level, 'int');
    const powerStatsAGI = updateStatWhenLevelUp(item, level, 'agi');
    const powerStatsLUK = updateStatWhenLevelUp(item, level, 'luk');
    const powerStatsHP = updateStatWhenLevelUp(item, level, 'hp');

    let str, def, int, agi, luk, hp, allStat;
    str = Math.round(item.POWER.STR + powerStatsSTR)
    def = Math.round(item.POWER.DEF + powerStatsDEF)
    int = Math.round(item.POWER.INT + powerStatsINT)
    agi = Math.round(item.POWER.AGI + powerStatsAGI)
    luk = Math.round(item.POWER.LUK + powerStatsLUK)
    hp = Math.round(item.POWER.HP + powerStatsHP)
    allStat = str + def + int + agi + luk + hp
    
    let powerINT = scalePower5Mon(int);

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0;

    // √Åp d·ª•ng scaleSTR v√†o c√°c ph√©p t√≠nh hi·ªáu ·ª©ng
    if (item.EFFECT.includes("Attacking")) {
        dame = Math.round(powerINT.dame * item.POWER.SCALE) + item.DAME[1] + item.DAME[2] + item.DAME[3] + item.DAME[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (item.EFFECT.includes("Healing")) {
        heal = Math.round(powerINT.heal * item.POWER.SCALE) + item.HEAL[1] + item.HEAL[2] + item.HEAL[3] + item.HEAL[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (item.EFFECT.includes("Shield")) {
        shield = Math.round(powerINT.shield * item.POWER.SCALE) + item.SHIELD[1] + item.SHIELD[2] + item.SHIELD[3] + item.SHIELD[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (item.EFFECT.includes("Burn")) {
        burn = Math.round(powerINT.burn * item.POWER.SCALE) + item.BURN[1] + item.BURN[2] + item.BURN[3] + item.BURN[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (item.EFFECT.includes("Poison")) {
        poison = Math.round(powerINT.poison * item.POWER.SCALE) + item.POISON[1] + item.POISON[2] + item.POISON[3] + item.POISON[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }

    //T√≠nh cooldown
    let minC = 8;
    let maxC = 20;
    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5
    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - item.POWER.SCALE);


    //t√≠nh crit
    let maxCrit = 60;
    let scaleCrit = 1500; // t√πy ch·ªânh
    let valueCrit = maxCrit * luk / (luk + scaleCrit);
    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
    valueCrit = Math.round(valueCrit * item.POWER.SCALE);

    //t√≠nh def
    let maxDef = 90;
    let scaleDef = 475; // t√πy ch·ªânh
    let valueDef = maxDef * def / (def + scaleDef);
    valueDef = Math.min(maxDef, Math.max(0, valueDef));
    valueDef = Math.round(valueDef * item.POWER.SCALE);

    let crit = Math.round(valueCrit + item.CRIT[1] + item.CRIT[2] + item.CRIT[3]);
    let defFn = Math.round(valueDef * 100) / 100;
    let cooldown = Math.ceil(valueC);
    
    document.getElementById("imgPopupSTT5Mon").style.backgroundImage = "url('" + URLimg + "')";
    document.getElementById("namePopupSTT5Mon").textContent = item.NAME;
    document.getElementById("allStats5Mon").textContent = `‚öîÔ∏è: ${allStat}`;
    document.getElementById("levelTextPopupSTT5Mon").textContent = level;
    document.getElementById("rareTextPopupSTT5Mon").textContent = item.RARE;
    document.getElementById("priceTextPopupSTT5Mon").textContent = item.PRICE;
    document.getElementById("levelColorPopupSTT5Mon").style.color = colorLevel

    let descTextItem = "";
    // Type
    let typeInfo = "";
    item.TYPE.forEach(type => {
        typeInfo += `<a style=" background: rebeccapurple; padding: 2px 4px; border-radius: 4px; color: #ffffff;">${type}</a>`
    });

    // C·∫≠p nh·∫≠t th√¥ng tin trong popup
    descTextItem += `
        <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; width: 100%">
            <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; gap: 3px; width: 100%">
                <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-hand-fist"></i>: ${str}</span>
                <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-shield"></i>: ${def}</span>
                <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-brain"></i>: ${int}</span>
                <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-bolt"></i></i>: ${agi}</span>
                <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-clover"></i>: ${luk}</span>
                <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-heart"></i>: ${hp}</span>
            </div>
        </div>`

    const scaleSTR = 1 * Math.log10(str);
    let valuePowerSTR = 0.12 * str / scaleSTR + 1
    let baseDame = Math.round(valuePowerSTR * item.POWER.SCALE);

    const scaleHP = 1 * Math.log10(hp);
    let valuePowerHP = 2 * hp / scaleHP + 100;
    let baseHP = Math.round(valuePowerHP * item.POWER.SCALE);

    descTextItem += `
            <span style="display: flex;font-weight: bold;font-size: 12px;padding: 2px 0px;color: black;gap: 5px;flex-direction: row;align-content: center;
            justify-content: space-between;align-items: center; width: 100%;">
            <span>
                [M√°u: <a style="color:red; font-weight: bold;">${baseHP}</a>]
            </span>
            <span style="display: flex; gap: 5px;"> 
                <span style="display: flex; gap: 3px; flex-direction: row; align-content: center; justify-content: center; align-items: center;">
                    ${typeInfo}
                </span>
            </span>
            </span>
            <span style="font-weight: bold;margin-top: 5px;">[ƒê√°nh th∆∞·ªùng][T·ªëc ƒë·ªô: ${cooldown / 1000 || ''} gi√¢y][Li√™n k√≠ch: x${Math.max(item.COOLDOWN[1] + item.COOLDOWN[2] + item.COOLDOWN[3], 1)}]</span>
            <span >G√¢y <a style="color: red; font-weight: bold;">${baseDame} s√°t th∆∞∆°ng </a> cho 5Mon ƒë·ªëi th·ªß (∆∞u ti√™n 5Mon ƒë·ªëi di·ªán)</span>
            `

    let descInfo = "";
    let countDescInfo = 1;
    if (item.EFFECT.length === 1) {
        item.EFFECT.forEach((effect) => {
            if (effectsSkill[effect]) {
                // L·∫•y chu·ªói m√¥ t·∫£ ban ƒë·∫ßu
                let rawDesc = effectsSkill[effect].descriptionSkill;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
        
                descInfo += dynamicDescription(item,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison);
            }
        });

    } else {
        item.EFFECT.forEach((effect) => {
            if (effectsSkill[effect]) {
                // L·∫•y chu·ªói m√¥ t·∫£ ban ƒë·∫ßu
                let rawDesc = effectsSkill[effect].descriptionSkill;
        
                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
        
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
        
                // Truy·ªÅn c√°c gi√° tr·ªã v√†o h√†m
                descInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countDescInfo})</span> ${dynamicDescription(item,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison)}</span>`;
                countDescInfo += 1;
            }
        });
    }

    let internalInfo = "";
    let countInternalInfo = 1;
    if (item.INTERNAL.length === 1) {
        item.INTERNAL.forEach((internal) => {
            if (effectsInternal[internal]) {

                let rawDesc = effectsInternal[internal].descriptionInternal;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
                
                internalInfo += dynamicDescription(item,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison);
            }
        });
    } else {
        item.INTERNAL.forEach((internal) => {
            if (effectsInternal[internal]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                let rawDesc = effectsInternal[internal].descriptionInternal;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
                
                internalInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countInternalInfo})</span> ${dynamicDescription(item,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison)}</span>`;
                countInternalInfo += 1;
            }
        });
    }

    //Ch√≠ m·∫°ng info
    let critInfo = ""
    if (crit > 0) {
        critInfo = `[T·ª∑ l·ªá ch√≠ m·∫°ng: <span style="color: red; font-weight: bold">${crit}%</span>]`;
    }
    // G√°n n·ªôi dung v√†o ph·∫ßn t·ª≠ HTML
    //T√≠nh n·ªô
    function getScaledRage(stat, multiplier) {
        return multiplier * Math.sqrt(stat || 0);
    }

    function getInvertedRage(stat, multiplier) {
        // N·∫øu stat th·∫•p ‚Üí gi√° tr·ªã cao
        const maxStat = 1000; // gi·ªõi h·∫°n max gi·∫£ ƒë·ªãnh (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
        const safeStat = Math.min(stat || 0, maxStat);
        return multiplier * Math.sqrt(maxStat - safeStat);
    }
    
    let rageGain = Math.floor(
        getScaledRage(str, 0.1) +
        getScaledRage(def, 0.3) +
        getScaledRage(int, 0.1) +
        getInvertedRage(agi, 0.2) + // d√πng h·ªá s·ªë m·ªõi v√† c√¥ng th·ª©c ng∆∞·ª£c
        getScaledRage(luk, 0.1) +
        getScaledRage(hp, 0.3)
    );
    rageGain = parseFloat(rageGain.toFixed(2));
    
    if (descInfo !== "") {
        descTextItem +=
            `<span style="font-weight: bold; margin-top: 5px;">[K·ªπ nƒÉng ch·ªß ƒë·ªông][+N·ªô: ${rageGain}][Li√™n k√≠ch: x${Math.max(item.COOLDOWN[1] + item.COOLDOWN[2] + item.COOLDOWN[3], 1)}]</span>
        <span style="display: flex;flex-direction: column; gap: 3px;">${descInfo.trim()}</span>
        <span>${critInfo.trim()}</span>`;
    } else {
        descTextItem += "";
    }

    if (internalInfo !== "") {
        descTextItem +=
            `<span style="font-weight: bold; margin-top: 5px;">[K·ªπ nƒÉng b·ªã ƒë·ªông]</span>
            <span style="display: flex;flex-direction: column; gap: 3px;">${internalInfo.trim()}</span>`
    } else {
        descTextItem += "";
    }

    //Sellup info
    let sellUpInfo = "";
    let countSellUpInfo = 1;
    if (item.SELLUP.length === 1) {
        item.SELLUP.forEach((sellup) => {
            if (effectsSellUp[sellup]) {
                let rawDesc = effectsSellUp[sellup].descriptionSellUp;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);

                sellUpInfo += dynamicDescription(item,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison);
            }
        });
    } else {
        item.SELLUP.forEach((sellup) => {
            if (effectsSellUp[sellup]) {
                let rawDesc = effectsSellUp[sellup].descriptionSellUp;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
                
                sellUpInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countSellUpInfo})</span> ${dynamicDescription(item,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison)}</span>`;
                countSellUpInfo += 1;
            }
        });
    }

    if (sellUpInfo !== "") {
        descTextItem += `<span style="font-weight: bold; margin-top: 5px;">[Th·∫£ ƒëi nh·∫≠n ƒë∆∞·ª£c]</span>
        <span style="display: flex;flex-direction: column; gap: 3px;">${sellUpInfo.trim()}</span>`;
    } else {
        descTextItem += "";
    }

    document.getElementById("descPopupSTT5Mon").innerHTML = descTextItem;
    document.getElementById("IDcreate5MonPopupSTT5Mon").innerText = `${item.IDcreate}`;

    if (prefix === "bag") {
        document.getElementById("buttonPopupSTT5Mon").innerText = "Th√°o ra"
        document.getElementById("buttonPopupSTT5Mon").onclick = () => {
            for (const key in typeGameConquest.battleUserPet) {
                if (typeGameConquest.battleUserPet[key].IDcreate === item.IDcreate) {
                    delete typeGameConquest.battleUserPet[key];  // Xo√° pet ra kh·ªèi object
                    loadItemBagRight(sortBagRight)
                    popup.style.display = "none";
                    overlay.style.display = "none";
                    break;
                }
            }
        };
    } else {
        document.getElementById("buttonPopupSTT5Mon").innerText = "Th·∫£ ƒëi"
        document.getElementById("buttonPopupSTT5Mon").onclick = () => {
            for (const key in userPet) {
                const hasEquipped = Object.values(typeGameConquest.battleUserPet).some(pet => pet.IDcreate === item.IDcreate);

                if (hasEquipped) {
                    messageOpen("5mon ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng n√™n kh√¥ng th·ªÉ th·∫£");
                    return;
                }

                if (userPet[key].IDcreate === item.IDcreate && !hasEquipped) {
                    messageOpen("ƒê√£ th·∫£ 5mon");
                    delete userPet[key];  // Xo√° pet ra kh·ªèi object
                    loadItemBagLeft(sortBagLeft)
                    popup.style.display = "none";
                    overlay.style.display = "none";
                    break;
                }
            }

            if (prefix === "skillGacha") {
                // L√†m tr·ªëng randomPet
                for (const key in randomPet) {
                    if (randomPet[key].IDcreate === item.IDcreate) {
                        randomPet[key] = defaultSTT5Mon;
                    }
                }

                for (let i = 0; i < 5; i++) {
                    if (randomPet[`skill${i + 1}S`].ID === "") {
                        document.getElementById(`skill${i + 1}S`).innerHTML = "?";
                        document.getElementById(`skill${i + 1}S`).classList.remove("comp");
                        document.getElementById(`skill${i + 1}S`).style.overflow = "hidden";
                    }
                }
            }
        };
    }

    popup.style.display = "block";
    overlay.style.display = "block";

    // ƒê√≥ng popup khi b·∫•m n√∫t ƒë√≥ng ho·∫∑c click v√†o n·ªÅn m·ªù
    [overlay].forEach(element => {
        element.addEventListener("click", (event) => {
            if (popup.style.display === "block") {
                popup.style.display = "none";
                overlay.style.display = "none";
            }
        });
    });
}

function showUpWeightBag() {

    // X√≥a n·∫øu ƒë√£ t·ªìn t·∫°i popup c≈©
    const oldPopup = document.getElementById('popupOverlayWeightBag');
    if (oldPopup) {
        oldPopup.remove();
        oldPopup = null;
    }


    // T·∫°o l·ªõp n·ªÅn m·ªù
    const overlay = document.createElement('div');
    overlay.id = 'popupOverlayWeightBag';
    overlay.style.position = 'fixed';
    overlay.style.top = 0;
    overlay.style.left = 0;
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.4)';
    overlay.style.display = 'flex';
    overlay.style.alignItems = 'center';
    overlay.style.justifyContent = 'center';
    overlay.style.zIndex = 9999;
    overlay.style.animation = 'fadeIn 0.3s ease';

    // T·∫°o h·ªôp popup
    const popup = document.createElement('div');
    popup.style.backgroundColor = '#fff';
    popup.style.padding = '25px 30px';
    popup.style.borderRadius = '12px';
    popup.style.boxShadow = '0 8px 20px rgba(0,0,0,0.2)';
    popup.style.textAlign = 'center';
    popup.style.maxWidth = '300px';
    popup.style.fontFamily = 'sans-serif';
    popup.style.animation = 'slideUp 0.3s ease';

    popup.innerHTML = `
        <p style="font-size: 16px; margin-bottom: 20px;">D√πng <strong>100 kim c∆∞∆°ng</strong> ƒë·ªÉ tƒÉng <strong>10 √¥ ch·ª©a</strong>?</p>
        <div style="display: flex; justify-content: center; gap: 10px;">
            <button id="confirmUpWeight" style="
                padding: 8px 16px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: bold;
                transition: background-color 0.2s;
            ">ƒê·ªìng √Ω</button>
            <button id="cancelUpWeight" style="
                padding: 8px 16px;
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: bold;
                transition: background-color 0.2s;
            ">H·ªßy</button>
        </div>
    `;

    // G·∫Øn popup v√†o overlay
    overlay.appendChild(popup);
    document.body.appendChild(overlay);

    // Hi·ªáu ·ª©ng CSS
    const style = document.createElement('style');
    style.innerHTML = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        #confirmUpWeight:hover {
            background-color: #45a049;
        }
        #cancelUpWeight:hover {
            background-color: #e53935;
        }
    `;
    document.head.appendChild(style);

    // X·ª≠ l√Ω s·ª± ki·ªán n√∫t
    document.getElementById('confirmUpWeight').onclick = function () {
        upWeightBag();
        document.body.removeChild(overlay);
    };
    document.getElementById('cancelUpWeight').onclick = function () {
        document.body.removeChild(overlay);
    };
}

function upWeightBag() {
    if (diamondUser < 100) {
        messageOpen('Kh√¥ng ƒë·ªß kim c∆∞∆°ng')
        return;
    } else {
        weightBagUser += 10
        document.getElementById("weightBagLeftText").innerText = `${Object.values(userPet).length}/${weightBagUser}`
        document.getElementById("weightBagLeft").style.width = `${Math.min(Object.values(userPet).length / weightBagUser * 100, 100)}%`
        resetGoldAndTicket();
    }
}



function resetOutGame() {
    //Hp c·ªßa ng∆∞·ªùi ch∆°i (n·∫øu round = 1 th√¨ auto Hp = 300; c√≤n round > 1 th√¨ Hp ƒë∆∞·ª£c l·∫•y t·ª´ googleSheet)
    maxHpUp = 0;

    resetMaxHpBattle();
    idSkillRND = 0; //ID random t·∫°o id cho div skill

    //Ch·ªâ s·ªë trong game
    //ƒêi·ªÉm nh·∫≠n ƒë∆∞·ª£c qua m·ªói round
    infoStartGame.winStreak = 0;
    typeGameConquest.winBattle = 0;
    typeGameConquest.loseBattle = 0;
    modeGamePoint = 0;
    infoStartGame.typeGame = "No";
    infoStartGame.modeGame = "No";
    infoStartGame.difficultyGame = "No";

    onGame = 0;
    infoStartGame.stepGame = 0;
    endGame = true;
    infoStartGame.roundGame = 1;
    typeGameConquest.selectSkillShop = 0;

    typeGameConquest.reRoll = 0;
    typeGameConquest.reRollPrice = 0;
    typeGameConquest.starUser = 0;

    //Th√¥ng tin c·ªßa ng∆∞·ªùi ch∆°i
    nowHpBattleMy = 0;
    nowShieldBattleMy = 0;
    nowBurnBattleMy = 0;
    nowPoisonBattleMy = 0;

    //Th√¥ng tin ch·ªâ s·ªë 
    typeGameConquest.maxHpBattleComp = 0;
    nowHpBattleComp = 0;
    nowShieldBattleComp = 0;
    nowBurnBattleComp = 0;
    nowPoisonBattleComp = 0;

    skillsSleepA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
    skillsSleepB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };
    skillsDeleteA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
    skillsDeleteB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };
    // limitSkillsA = {skill1A: 0,skill2A: 0,skill3A: 0,skill4A: 0,skill5A: 0,skill6A: 0,skill7A: 0,skill8A: 0,skill9A: 0};
    // limitSkillsB = {skill1B: 0,skill2B: 0,skill3B: 0,skill4B: 0,skill5B: 0,skill6B: 0,skill7B: 0,skill8B: 0,skill9B: 0};
    skillsSpeedA = { skill1A: 0, skill2A: 0, skill3A: 0, skill4A: 0, skill5A: 0, skill6A: 0, skill7A: 0, skill8A: 0, skill9A: 0 };
    skillsSpeedB = { skill1B: 0, skill2B: 0, skill3B: 0, skill4B: 0, skill5B: 0, skill6B: 0, skill7B: 0, skill8B: 0, skill9B: 0 };

    skillQueueMirror = {};
    skillQueue = {};
    countSkillQueue = 0;
    countSkillQueueMirror = 0;

    Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
        const skillElement = document.getElementById(skill);
        if (skillElement) {
            const skillChild = skillElement.querySelector('.skill');
            if (skillChild && skillChild.classList.contains('sleep')) {
                skillChild.classList.remove('sleep');
            }
        }
    });

    Object.keys(typeGameConquest.skillBattle).forEach((skill) => {
        const skillElement = document.getElementById(skill);
        if (skillElement) {
            const skillChild = skillElement.querySelector('.skill');
            if (skillChild && skillChild.classList.contains('delete')) {
                skillChild.classList.remove('delete');
            }
        }
    });

    typeGameConquest.slowB = 0;
    typeGameConquest.dameCritB = 0;
    typeGameConquest.upCooldownB = 0;
    typeGameConquest.slowA = 0;
    typeGameConquest.dameCritA = 0;
    typeGameConquest.upCooldownA = 0;
    typeGameConquest.skillBattle = { //Khay Pet s·ª≠ d·ª•ng
        skill1A: defaultSTT5MonInBattle,
        skill2A: defaultSTT5MonInBattle,
        skill3A: defaultSTT5MonInBattle,
        skill4A: defaultSTT5MonInBattle,
        skill5A: defaultSTT5MonInBattle,
        skill6A: defaultSTT5MonInBattle,
        skill7A: defaultSTT5MonInBattle,
        skill8A: defaultSTT5MonInBattle,
        skill9A: defaultSTT5MonInBattle,
        skill1B: defaultSTT5MonInBattle,
        skill2B: defaultSTT5MonInBattle,
        skill3B: defaultSTT5MonInBattle,
        skill4B: defaultSTT5MonInBattle,
        skill5B: defaultSTT5MonInBattle,
        skill6B: defaultSTT5MonInBattle,
        skill7B: defaultSTT5MonInBattle,
        skill8B: defaultSTT5MonInBattle,
        skill9B: defaultSTT5MonInBattle,
    };

    typeGameConquest.battlePetUseSlotRound = { //pet ƒëang d√πng t·∫°i slotskill
        skill1B: defaultSTT5MonInBattle,
        skill2B: defaultSTT5MonInBattle,
        skill3B: defaultSTT5MonInBattle,
        skill4B: defaultSTT5MonInBattle,
        skill5B: defaultSTT5MonInBattle,
        skill6B: defaultSTT5MonInBattle,
        skill7B: defaultSTT5MonInBattle,
        skill8B: defaultSTT5MonInBattle,
        skill9B: defaultSTT5MonInBattle,
    };

    typeGameConquest.battlePetInInventory = {
        battleInv1: defaultSTT5MonInBattle,
        battleInv2: defaultSTT5MonInBattle,
        battleInv3: defaultSTT5MonInBattle,
        battleInv4: defaultSTT5MonInBattle,
        battleInv5: defaultSTT5MonInBattle,
        battleInv6: defaultSTT5MonInBattle,
        battleInv7: defaultSTT5MonInBattle,
        battleInv8: defaultSTT5MonInBattle,
        battleInv9: defaultSTT5MonInBattle,
    }; //pet c√≥ trong slot t·ªß ƒë·ªì

    typeGameConquest.battlePetInShop = {
        battleShop1: defaultSTT5MonInBattle,
        battleShop2: defaultSTT5MonInBattle,
        battleShop3: defaultSTT5MonInBattle,
        battleShop4: defaultSTT5MonInBattle,
        battleShop5: defaultSTT5MonInBattle,
    };
}

function setupPopupInfo5MonInBattle(skillInfo, level) {

    for (let k = 1; k <= 4; k++) {
        document.getElementById(`popupSTT5MonInBattleLV${k}`).style.background = "firebrick";
    }

    document.getElementById(`popupSTT5MonInBattleLV${skillInfo.LEVEL}`).style.background = "rebeccapurple";

    let URLimg = skillInfo.URLimg[`Lv${skillInfo.LEVEL}`] || skillInfo.URLimg['Lv1'];
    
    let colorLevel = "#531515";
    if (level === 2) {
        colorLevel = "#8c0b0b"
    } else if (level === 3) {
        colorLevel = "#c00d0d"
    } else if (level === 4) {
        colorLevel = "red"
    } else {
        colorLevel = "#531515"
    }

        //X√©t level hi·ªán t·∫°i so v·ªõi level
    let levelSum = level - skillInfo.LEVEL
    console.log("levelSum", levelSum)
    const powerStatsSTR = updateStatWhenLevelUp(skillInfo, levelSum, 'str', true)
    const powerStatsDEF = updateStatWhenLevelUp(skillInfo, levelSum, 'def', true)
    const powerStatsINT = updateStatWhenLevelUp(skillInfo, levelSum, 'int', true)
    const powerStatsAGI = updateStatWhenLevelUp(skillInfo, levelSum, 'agi', true)
    const powerStatsLUK = updateStatWhenLevelUp(skillInfo, levelSum, 'luk', true)
    const powerStatsHP = updateStatWhenLevelUp(skillInfo, levelSum, 'hp', true)

    let str, def, int, agi, luk, hp, allStat;
    str = Math.round(skillInfo.POWER.STR + powerStatsSTR)
    def = Math.round(skillInfo.POWER.DEF + powerStatsDEF)
    int = Math.round(skillInfo.POWER.INT + powerStatsINT)
    agi = Math.round(skillInfo.POWER.AGI + powerStatsAGI)
    luk = Math.round(skillInfo.POWER.LUK + powerStatsLUK)
    hp = Math.round(skillInfo.POWER.HP + powerStatsHP)

    allStat = str + def + int + agi + luk + hp
    
    let powerINT = scalePower5Mon(int);

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0;

    // √Åp d·ª•ng scaleSTR v√†o c√°c ph√©p t√≠nh hi·ªáu ·ª©ng
    if (skillInfo.EFFECT.includes("Attacking")) {
        dame = Math.round(powerINT.dame * skillInfo.POWER.SCALE) + skillInfo.DAME[1] + skillInfo.DAME[2] + skillInfo.DAME[3] + skillInfo.DAME[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skillInfo.EFFECT.includes("Healing")) {
        heal = Math.round(powerINT.heal * skillInfo.POWER.SCALE) + skillInfo.HEAL[1] + skillInfo.HEAL[2] + skillInfo.HEAL[3] + skillInfo.HEAL[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skillInfo.EFFECT.includes("Shield")) {
        shield = Math.round(powerINT.shield * skillInfo.POWER.SCALE) + skillInfo.SHIELD[1] + skillInfo.SHIELD[2] + skillInfo.SHIELD[3] + skillInfo.SHIELD[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skillInfo.EFFECT.includes("Burn")) {
        burn = Math.round(powerINT.burn * skillInfo.POWER.SCALE) + skillInfo.BURN[1] + skillInfo.BURN[2] + skillInfo.BURN[3] + skillInfo.BURN[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (skillInfo.EFFECT.includes("Poison")) {
        poison = Math.round(powerINT.poison * skillInfo.POWER.SCALE) + skillInfo.POISON[1] + skillInfo.POISON[2] + skillInfo.POISON[3] + skillInfo.POISON[4];  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }

    //T√≠nh cooldown
    let minC = 8;
    let maxC = 20;
    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5
    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - skillInfo.POWER.SCALE);

    //t√≠nh crit
    let maxCrit = 60;
    let scaleCrit = 1500; // t√πy ch·ªânh
    let valueCrit = maxCrit * luk / (luk + scaleCrit);
    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
    valueCrit = Math.round(valueCrit * skillInfo.POWER.SCALE);

    //t√≠nh def
    let maxDef = 90;
    let scaleDef = 475; // t√πy ch·ªânh
    let valueDef = maxDef * def / (def + scaleDef);
    valueDef = Math.min(maxDef, Math.max(0, valueDef));
    valueDef = Math.round(valueDef * skillInfo.POWER.SCALE);

    let crit = Math.round(valueCrit + skillInfo.CRIT[1] + skillInfo.CRIT[2] + skillInfo.CRIT[3]);
    let defFn = Math.round(valueDef * 100) / 100;
    let cooldown = Math.ceil(valueC);

    document.getElementById("imgPopupSTT5MonInBattle").style.backgroundImage = "url('" + URLimg + "')";
    document.getElementById("namePopupSTT5MonInBattle").textContent = skillInfo.NAME;
    document.getElementById("allStats5MonInBattle").textContent = `‚öîÔ∏è: ${allStat}`;
    document.getElementById("levelTextPopupSTT5MonInBattle").textContent = level;
    document.getElementById("rareTextPopupSTT5MonInBattle").textContent = skillInfo.RARE;
    document.getElementById("priceTextPopupSTT5MonInBattle").textContent = skillInfo.PRICESELL + skillInfo.PRICE || skillInfo.PRICE;
    document.getElementById("levelColorPopupSTT5MonInBattle").style.color = colorLevel


    let descTextItem = "";
    // Type
    let typeInfo = "";
    skillInfo.TYPE.forEach(type => {
        typeInfo += `<a style=" background: rebeccapurple; padding: 2px 4px; border-radius: 4px; color: #ffffff;">${type}</a>`
    });

    // C·∫≠p nh·∫≠t th√¥ng tin trong popup
    descTextItem += `
    <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; width: 100%">
        <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; gap: 3px; width: 100%">
            <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-hand-fist"></i>: ${str}</span>
            <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-shield"></i>: ${def}</span>
            <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-brain"></i>: ${int}</span>
            <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-bolt"></i>: ${agi}</span>
            <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-clover"></i>: ${luk}</span>
            <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-heart"></i>: ${hp}</span>
        </div>
    </div>`

    const scaleSTR = 1 * Math.log10(str);
    let valuePowerSTR = 0.12 * str / scaleSTR + 1
    let baseDame = Math.round(valuePowerSTR * skillInfo.POWER.SCALE);

    const scaleHP = 1 * Math.log10(hp);
    let valuePowerHP = 2 * hp / scaleHP + 100;
    let baseHP = Math.round(valuePowerHP * skillInfo.POWER.SCALE);

    descTextItem += `
    <span style="display: flex;font-weight: bold;font-size: 12px;padding: 2px 0px;color: black;gap: 5px;flex-direction: row;align-content: center;
    justify-content: space-between;align-items: center; width: 100%;">
    <span>
        [M√°u: <a style="color:red; font-weight: bold;">${baseHP}</a>]
    </span>
    <span style="display: flex; gap: 5px;"> 
        <span style="display: flex; gap: 3px; flex-direction: row; align-content: center; justify-content: center; align-items: center;">
            ${typeInfo}
        </span>
    </span>
    </span>
    <span style="font-weight: bold;margin-top: 5px;">[ƒê√°nh th∆∞·ªùng][T·ªëc ƒë·ªô: ${cooldown  / 1000 || ''} gi√¢y][Li√™n k√≠ch: x${Math.max(skillInfo.COOLDOWN[1] + skillInfo.COOLDOWN[2] + skillInfo.COOLDOWN[3], 1)}]</span>
    <span>G√¢y <a style="color: red; font-weight: bold">${baseDame} s√°t th∆∞∆°ng </a> cho 5Mon ƒë·ªëi th·ªß (∆∞u ti√™n 5Mon ƒë·ªëi di·ªán)</span>
    `

    let descInfo = "";
    let countDescInfo = 1;
    if (skillInfo.EFFECT.length === 1) {
        skillInfo.EFFECT.forEach((effect) => {
            if (effectsSkill[effect]) {
                // L·∫•y chu·ªói m√¥ t·∫£ ban ƒë·∫ßu
                let rawDesc = effectsSkill[effect].descriptionSkill;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
        
                descInfo += dynamicDescription(skillInfo,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison);
            }
        });

    } else {
        skillInfo.EFFECT.forEach((effect) => {
            if (effectsSkill[effect]) {
                // L·∫•y chu·ªói m√¥ t·∫£ ban ƒë·∫ßu
                let rawDesc = effectsSkill[effect].descriptionSkill;
        
                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
        
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
        
                // Truy·ªÅn c√°c gi√° tr·ªã v√†o h√†m
                descInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countDescInfo})</span> ${dynamicDescription(skillInfo,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison)}</span>`;
                countDescInfo += 1;
            }
        });
    }


    let internalInfo = "";
    let countInternalInfo = 1;
    if (skillInfo.INTERNAL.length === 1) {
        skillInfo.INTERNAL.forEach((internal) => {
            if (effectsInternal[internal]) {

                let rawDesc = effectsInternal[internal].descriptionInternal;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
                
                internalInfo += dynamicDescription(skillInfo,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison);
            }
        });
    } else {
        skillInfo.INTERNAL.forEach((internal) => {
            if (effectsInternal[internal]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                let rawDesc = effectsInternal[internal].descriptionInternal;

                // Thay th·∫ø skill.POWER.X th√†nh vi·∫øt th∆∞·ªùng t∆∞∆°ng ·ª©ng
                rawDesc = rawDesc
                    .replace(/skill\.POWER\.STR/g, 'str')
                    .replace(/skill\.POWER\.DEF/g, 'def')
                    .replace(/skill\.POWER\.INT/g, 'int')
                    .replace(/skill\.POWER\.AGI/g, 'agi')
                    .replace(/skill\.POWER\.LUK/g, 'luk')
                    .replace(/skill\.POWER\.HP/g,  'hp')
                    .replace(/skill\.DAME\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'dame')
                    .replace(/skill\.HEAL\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'heal')
                    .replace(/skill\.SHIELD\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'shield')
                    .replace(/skill\.BURN\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'burn')
                    .replace(/skill\.POISON\.reduce\(\(a, b\) => a \+ b, 0\)/g, 'poison');
                
                // T·∫°o h√†m t·ª´ chu·ªói ƒë√£ x·ª≠ l√Ω
                const dynamicDescription = new Function("skill", "str", "def", "int", "agi", "luk", "hp", "dame", "heal", "shield", "burn", "poison", `return \`${rawDesc}\`;`);
                
                internalInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countInternalInfo})</span> ${dynamicDescription(skillInfo,str,def,int,agi,luk,hp,dame,heal,shield,burn,poison)}</span>`;
                countInternalInfo += 1;
            }
        });
    }


    //Ch√≠ m·∫°ng info
    let critPercent = crit + skillInfo.CRIT[1] + skillInfo.CRIT[2] + skillInfo.CRIT[3] + skillInfo.CRIT[4]
    let critInfo = ""
    if (critPercent > 0) {
        critInfo = `[T·ª∑ l·ªá ch√≠ m·∫°ng: <span style="color: red; font-weight: bold">${critPercent}%</span>]`;
    }

    // G√°n n·ªôi dung v√†o ph·∫ßn t·ª≠ HTML
    function getScaledRage(stat, multiplier) {
        return multiplier * Math.sqrt(stat || 0);
    }

    function getInvertedRage(stat, multiplier) {
        // N·∫øu stat th·∫•p ‚Üí gi√° tr·ªã cao
        const maxStat = 1000; // gi·ªõi h·∫°n max gi·∫£ ƒë·ªãnh (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
        const safeStat = Math.min(stat || 0, maxStat);
        return multiplier * Math.sqrt(maxStat - safeStat);
    }
    
    let rageGain = Math.floor(
        getScaledRage(str, 0.1) +
        getScaledRage(def, 0.3) +
        getScaledRage(int, 0.1) +
        getInvertedRage(agi, 0.2) + // d√πng h·ªá s·ªë m·ªõi v√† c√¥ng th·ª©c ng∆∞·ª£c
        getScaledRage(luk, 0.1) +
        getScaledRage(hp, 0.3)
    );
    rageGain = parseFloat(rageGain.toFixed(2));


    if (descInfo !== "") {
        descTextItem +=
            `<span style="font-weight: bold; margin-top: 5px;">[K·ªπ nƒÉng ch·ªß ƒë·ªông][+N·ªô: ${rageGain}][Li√™n k√≠ch: x${Math.max(skillInfo.COOLDOWN[1] + skillInfo.COOLDOWN[2] + skillInfo.COOLDOWN[3], 1)}]</span>
<span style="display: flex;flex-direction: column; gap: 3px;">${descInfo.trim()}</span>
<span>${critInfo.trim()}</span>`;
    } else {
        descTextItem += "";
    }

    if (internalInfo !== "") {
        descTextItem +=
            `<span style="font-weight: bold; margin-top: 5px;">[K·ªπ nƒÉng b·ªã ƒë·ªông]</span>
<span style="display: flex;flex-direction: column; gap: 3px;">${internalInfo.trim()}</span>`
    } else {
        descTextItem += "";
    }

    //Sellup info
    let sellUpInfo = "";
    let countSellUpInfo = 1;
    if (skillInfo.SELLUP.length === 1) {
        skillInfo.SELLUP.forEach((sellup) => {
            if (effectsSellUp[sellup]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                sellUpInfo += dynamicDescription(skillInfo)
            }
        });
    } else {
        skillInfo.SELLUP.forEach((sellup) => {
            if (effectsSellUp[sellup]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                sellUpInfo +=
                    `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countSellUpInfo})</span>
  ${dynamicDescription(skillInfo)}</span>`;
                countSellUpInfo += 1;
            }
        });
    }

    if (sellUpInfo !== "") {
        descTextItem += `<span style="font-weight: bold; margin-top: 5px;">[Th·∫£ ƒëi nh·∫≠n ƒë∆∞·ª£c]</span>
<span style="display: flex;flex-direction: column; gap: 3px;">${sellUpInfo.trim()}</span>`;
    } else {
        descTextItem += "";
    }

    document.getElementById("descPopupSTT5MonInBattle").innerHTML = descTextItem;
}


//Check ng∆∞·ªùi d√πng offline
window.addEventListener("beforeunload", function (event) {
    if (isFinalLoadData && !isOut) {
        saveDataUserToFirebase("Out");
    }
});

//N√∫t setting main
function openPopupSettingMain() {
    const popup = document.getElementById('popupSettingMain');
    if (popup.style.display === "flex") {
        popup.style.display = "none";
    } else {
        popup.style.display = "flex";
        selectButtonSettingMain('√Çm thanh');
    }
}

function selectButtonSettingMain(select) {
    const allSelect = {
        buttonSettingMainMusic: document.getElementById('buttonSettingMainMusic'),
    };

    // Reset m√†u t·∫•t c·∫£ c√°c n√∫t
    Object.values(allSelect).forEach(button => {
        button.style.background = "rgb(248, 150, 116)";
    });

    // Hi·ªán ph·∫ßn ƒëi·ªÅu ch·ªânh √¢m thanh
    document.getElementById('musicControlsBoardBG').style.display = "flex";

    if (select === "√Çm thanh") {
        document.getElementById('musicControlsBoardBG').style.display = "flex";
        document.getElementById('buttonSettingMainMusic').style.background = "rgb(235, 32, 32)";
    }
}


//N√∫t setting trong battle 
function openPopupSetting() {
    const popup = document.getElementById('popupSetting');
    const desc = document.getElementById('descPopupSetting');
    popup.style.display = "flex"

    let descOutGameRound1 = ""
    if (infoStartGame.roundGame <= 1 && infoStartGame.typeGame === "Conquest" && infoStartGame.modeGame === "Rank") {
        descOutGameRound1 = "N·∫øu ƒë·∫ßu h√†ng ngay t·∫°i v√≤ng 1, b·∫°n s·∫Ω b·ªã tr·ª´ 10 ƒëi·ªÉm x·∫øp h·∫°ng"
    } else {
        descOutGameRound1 = ""
    }

    //C·∫≠p nh·∫≠t th√¥ng tin tr·∫≠n ƒë·∫•u
    desc.innerHTML = `
<span style="display: flex; flex-direction: row;"><a style="font-weight: bold">V√≤ng ƒë·∫•u hi·ªán t·∫°i:</a> <a style="color: rebeccapurple;"> V√≤ng ${infoStartGame.roundGame} (Th·∫Øng: ${typeGameConquest.winBattle} - Thua: ${typeGameConquest.loseBattle})</a></span>
<a>Hi·ªán t·∫°i ƒë√£ th·∫Øng ${infoStartGame.winStreak} v√≤ng ƒë·∫•u li√™n ti·∫øp</a>
<a style="font-weight: bold">Ph·∫ßn th∆∞·ªüng hi·ªán t·∫°i c√≥:</a>
<span style="display: flex; flex-direction: row; justify-content: center; gap: 5px; font-weight: bold; color:rebeccapurple;">
<span> <i class="fa-solid fa-medal"></i>: <a>${typeGameConquest.pointBattle}</a> </span>
<span> <i class="fa-solid fa-gem"></i>: <a>0</a> </span>
<span> <i class="fa-solid fa-coins"></i>: <a>0</a> </span>
</span>
<a style="font-weight: bold; color:red; text-align: center;">${descOutGameRound1}</a>
`;

}

//ƒê√≥ng setting battle
function closePopupSetting() {
    const popup = document.getElementById('popupSetting');
    popup.style.display = "none"
}

//B·∫£ng x·∫øp h·∫°ng
function openRankBoard() {
    const rankGameRef = ref(db, 'rankGame');
    get(rankGameRef)
        .then(snapshot => {
            if (snapshot.exists()) {
                const rankGameData = snapshot.val();
                console.log("D·ªØ li·ªáu rankGame:", rankGameData);

                // TODO: x·ª≠ l√Ω rankGameData, v√≠ d·ª• c·∫≠p nh·∫≠t UI b·∫£ng x·∫øp h·∫°ng

            } else {
                console.log("Ch∆∞a c√≥ d·ªØ li·ªáu rankGame trong Firebase.");
                // TODO: x·ª≠ l√Ω khi rankGame ch∆∞a c√≥, v√≠ d·ª• hi·ªÉn th·ªã b·∫£ng r·ªóng ho·∫∑c m·∫∑c ƒë·ªãnh
            }

            // Sau khi ƒë√£ ƒë·ªçc ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu, chuy·ªÉn trang v√† hi·ªán b·∫£ng
            changePage(0);
            showOrHiddenDiv("rankBoard");
        })
        .catch(error => {
            console.error("L·ªói khi ƒë·ªçc rankGame t·ª´ Firebase:", error);
            // V·∫´n m·ªü b·∫£ng nh∆∞ng c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            changePage(0);
            showOrHiddenDiv("rankBoard");
        });
}

let currentPageRank = 1;
const usersPerPage = 7; // S·ªë ng∆∞·ªùi ch∆°i hi·ªÉn th·ªã m·ªói trang

function rankBoard() {
    const leaderboardBody = document.getElementById("leaderboard-body");
    leaderboardBody.innerHTML = "";

    const sortedUsers = Object.entries(rankGame).sort(([, a], [, b]) => b.rankPoint.typeGameConquest - a.rankPoint.typeGameConquest);
    const totalPages = Math.ceil(sortedUsers.length / usersPerPage);

    const start = (currentPageRank - 1) * usersPerPage;
    const end = start + usersPerPage;
    const usersOnPage = sortedUsers.slice(start, end);

    for (let i = 0; i < usersPerPage; i++) {
        const [username, data] = usersOnPage[i] || [];

        let topCheck = "";
        let colorTop = "";

        if (start + i + 1 === 1) {
            topCheck = `<i class="fa-solid fa-crown"></i>`;
            colorTop = `rgb(145 46 99)`;
        } else if (start + i + 1 === 2) {
            topCheck = `<i class="fa-solid fa-chess-queen"></i>`;
            colorTop = `rgb(145 46 99)`;
        } else if (start + i + 1 === 3) {
            topCheck = `<i class="fa-solid fa-chess-knight"></i>`;
            colorTop = `rgb(145 46 99)`;
        } else {
            topCheck = "";
            colorTop = `rgb(46 128 145)`;
        }

        const row = document.createElement("tr");
        row.style = `
          height: 30px; 
          background: ${colorTop}; 
          clip-path: polygon(2% 0%, 98% 0%, 100% 50%, 98% 110%, 2% 110%, 0% 50%);
          box-shadow: rgb(0 0 0 / 30%) 0px 3px 2px 0px;
        `;

        row.innerHTML = `
          <td style="width: 10%; text-align: right;">${topCheck}</td>
          <td style="width: 15%; text-align: center;">${start + i + 1}</td>
          <td style="width: 40%; text-align: center; font-weight: bold;">${username || ""}</td>
          <td style="width: 25%; text-align: center;">${data?.rankPoint?.typeGameConquest ?? "-"}</td>
          <td style="width: 10%; text-align: center;"></td>
        `;

        leaderboardBody.appendChild(row);
    }

    // L·∫•y th·ª© h·∫°ng ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
    const myIndex = sortedUsers.findIndex(([user]) => user === username);
    const myTop = myIndex !== -1 ? myIndex + 1 : "-";
    const myData = myIndex !== -1 ? sortedUsers[myIndex][1] : null;

    document.getElementById("myRankTop").innerHTML = myTop;
    document.getElementById("myRankName").innerHTML = username;
    document.getElementById("myRankPoint").innerHTML = myData ? myData.rankPoint.typeGameConquest : "-";

    document.getElementById("prev-page").disabled = currentPageRank === 1;
    document.getElementById("next-page").disabled = currentPageRank === totalPages;
}


// Chuy·ªÉn trang
function changePage(direction) {
    const sortedUsers = Object.entries(rankGame).sort(([, a], [, b]) => b.rankPoint.typeGameConquest - a.rankPoint.typeGameConquest);
    const totalPages = Math.ceil(sortedUsers.length / usersPerPage);

    currentPageRank += direction;
    if (currentPageRank < 1) currentPageRank = 1;
    if (currentPageRank > totalPages) currentPageRank = totalPages;

    rankBoard();
}

//Shop
function switchTabShop(tab) {
    const tabs = ['shop', 'gacha', 'exchange'];
    tabs.forEach(t => {
        document.getElementById(t).style.display = t === tab ? 'flex' : 'none';
    });

    document.getElementById('tabShop').style.background = tab === 'shop' ? 'rgb(134 154 74)' : 'rgb(201 138 77)';
    document.getElementById('tabGacha').style.background = tab === 'gacha' ? 'rgb(134 154 74)' : 'rgb(201 138 77)';
    document.getElementById('tabExchange').style.background = tab === 'exchange' ? 'rgb(134 154 74)' : 'rgb(201 138 77)';

    if (document.getElementById('gacha').style.display === "flex") {
        for (let i = 1; i <= 5; i++) {
            document.getElementById(`skill${i}S`).innerHTML = "?";
            document.getElementById(`skill${i}S`).style.overflow = "hidden";
            document.getElementById(`skill${i}S`).classList.remove("user");
        }
    }

    if (document.getElementById('shop').style.display === "flex") {
        openShopPage();
    }

    if (document.getElementById('exchange').style.display === "flex") {
        openExchangePage();
    }
}

//Shop page
const itemShop1 = [
    { idItem: "I0001", nameItem: "G√≥i 10 v√†ng", effectItem: "addGold10", priceItem: 10, URLitem: "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 10 v√†ng" },
    {
        idItem: "I0002", nameItem: "G√≥i 100 v√†ng", effectItem: "addGold100", priceItem: 95, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 100 v√†ng"
    },
    {
        idItem: "I0003", nameItem: "G√≥i 200 v√†ng", effectItem: "addGold200", priceItem: 170, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 200 v√†ng"
    },
    {
        idItem: "I0004", nameItem: "G√≥i 500 v√†ng", effectItem: "addGold500", priceItem: 325, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 500 v√†ng"
    },
    {
        idItem: "I0005", nameItem: "G√≥i 1000 v√†ng", effectItem: "addGold1000", priceItem: 450, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 1000 v√†ng"
    },
    { idItem: "I0001", nameItem: "G√≥i 10 v√†ng", effectItem: "addGold10", priceItem: 10, URLitem: "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 10 v√†ng" },
    {
        idItem: "I0002", nameItem: "G√≥i 100 v√†ng", effectItem: "addGold100", priceItem: 95, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 100 v√†ng"
    },
    {
        idItem: "I0003", nameItem: "G√≥i 200 v√†ng", effectItem: "addGold200", priceItem: 170, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 200 v√†ng"
    },
    {
        idItem: "I0004", nameItem: "G√≥i 500 v√†ng", effectItem: "addGold500", priceItem: 325, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 500 v√†ng"
    },
    {
        idItem: "I0005", nameItem: "G√≥i 1000 v√†ng", effectItem: "addGold1000", priceItem: 450, URLitem:
            "https://res.cloudinary.com/dxgawkr4g/image/upload/v1730731024/0005.png", desc: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 1000 v√†ng"
    },
];

//Open ShopPage
function openShopPage() {
    addItemForShopPage("shopRow1", itemShop1);
}

function addItemForShopPage(rowId, itemList) {
    const row = document.getElementById(rowId);

    row.innerHTML = ""; // X√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥

    itemList.forEach(item => {
        // T·∫°o th·∫ª ch·ª©a item
        const itemDiv = document.createElement("div");
        itemDiv.id = `${item.idItem}`
        itemDiv.style.cssText = `
  min-width: 80px;
  height: 80px;
  padding: 2px;
  background: url('${item.URLitem}');
  border-radius: 10px;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  box-shadow: rgb(106 28 28) 2px 2px 1px 2px;
  justify-content: center;
  border: 4px solid firebrick;
  background-size: cover;
  position: relative;
`;

        // Th√™m t√™n item
        const name = document.createElement("p");
        name.textContent = item.nameItem;
        name.style.cssText = "font-size: 12px; font-weight: bold; margin: 0px; color: white; margin-top: 1px; background:firebrick; border-bottom-right-radius: 6px; border-bottom-left-radius: 6px; width: 90px; pointer-events: none;position: absolute;bottom: -4px; display: flex; align-items: center; justify-content: center;height: 20px;";

        // G·∫Øn t·∫•t c·∫£ v√†o itemDiv
        itemDiv.appendChild(name);

        // Th√™m v√†o h√†ng t∆∞∆°ng ·ª©ng
        row.appendChild(itemDiv);

    });
    //Th√™m event click v√†o c√°c item ƒë·ªÉ hi√™n popup mua
    setupPopupEvents(itemList);
}

function setupPopupEvents(itemList) {
    const popup = document.getElementById("itemPopupShop");
    const overlay = document.getElementById("popupOverlay");
    const buyButton = document.getElementById("buyItemShop");

    // Th√™m s·ª± ki·ªán click cho t·ª´ng item ƒë·ªÉ m·ªü popup
    itemList.forEach(item => {
        const itemDiv = document.getElementById(item.idItem);
        itemDiv.addEventListener("click", () => {
            document.getElementById("popupImgShop").src = item.URLitem;
            document.getElementById("popupNameShop").textContent = item.nameItem;
            document.getElementById("popupDescShop").textContent = item.desc;
            document.getElementById("popupPriceShop").textContent = `Gi√°: ${item.priceItem} kim c∆∞∆°ng`;

            popup.style.display = "block";
            overlay.style.display = "block";
            buyButton.onclick = () => buyItemShop(item.idItem, item.nameItem, item.effectItem, item.priceItem);
        });
    });

    // ƒê√≥ng popup khi b·∫•m n√∫t ƒë√≥ng ho·∫∑c click v√†o n·ªÅn m·ªù
    [overlay].forEach(element => {
        element.addEventListener("click", (event) => {
            if (popup.style.display === "block") {
                popup.style.display = "none";
                overlay.style.display = "none";
            }
        });
    });
}

function buyItemShop(idItem, nameItem, effectItem, priceItem) {
    if (diamondUser < priceItem) {
        messageOpen(`B·∫°n kh√¥ng c√≥ ƒë·ªß kim c∆∞∆°ng, b·∫°n c√≥ th·ªÉ nh·∫≠n kim c∆∞∆°ng t·∫°i <a style="color: firebrick; cursor: pointer;" onclick="openQuestBoard()">nhi·ªám v·ª•</a> ho·∫∑c <a style="color: firebrick; cursor: pointer;" onclick="openPaymentGateway()">t·∫°i ƒë√¢y</a>`);
        return;
    }

    let goldAdd = 0
    if (effectItem === "addGold10") {
        goldAdd = 10
    } else if (effectItem === "addGold100") {
        goldAdd = 100
    } else if (effectItem === "addGold200") {
        goldAdd = 200
    } else if (effectItem === "addGold500") {
        goldAdd = 500
    } else if (effectItem === "addGold1000") {
        goldAdd = 1000
    }
    diamondUser -= priceItem
    goldUser += goldAdd
    messageOpen(`Mua th√†nh c√¥ng, b·∫°n nh·∫≠n ƒë∆∞·ª£c ${goldAdd} v√†ng`);
    resetGoldAndTicket();
} //++++++++++++

//C·ªïng thanh to√°n => n·∫°p kim c∆∞∆°ng
function openPaymentGateway() {
    const popupPayment = document.getElementById("paymentGateway");
    const descPaymentDiv = document.getElementById("descPayment");
    const overlay = document.getElementById("popupOverlay");

    // Hi·ªÉn th·ªã popup
    if (popupPayment.style.display === "none" || popupPayment.style.display === "") {
        popupPayment.style.display = "flex";
        overlay.style.display = "block"; // N·∫øu c√≥ overlay
    }

    // Th√¥ng tin thanh to√°n
    const descPayment = `
<span style="color: firebrick; ">V·ªõi c·ª© m·ªói 1000ƒë b·∫°n chuy·ªÉn b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c 1 kim c∆∞∆°ng</span>
<span>Th√¥ng tin chuy·ªÉn kho·∫£n</span>
<span>Ng√¢n h√†ng: <a style="color: royalblue;">MB Bank (Ng√¢n h√†ng qu√¢n ƒë·ªôi)</a></span>
<span>S·ªë t√†i kho·∫£n: <a style="color: royalblue;">0398167251</a></span>
<span>Ng∆∞·ªùi th·ª• h∆∞·ªüng: <a style="color: royalblue;">Qu√†ng VƒÉn Vi·ªát</a></span>
<span>N·ªôi dung chuy·ªÉn kho·∫£n: <a style="color: royalblue;">${username}</a></span>
<span style="margin-top: -15px;">_____________________</span>
<span style="color: firebrick">Vui l√≤ng ƒëi·ªÅn ƒë√∫ng th√¥ng tin n·ªôi dung chuy·ªÉn kho·∫£n, n·∫øu kh√¥ng s·∫Ω b·ªã l·ªói!</span>
<span>Sau khi thanh to√°n xong vui l√≤ng ch·ªù x√°c nh·∫≠n t·ª´ h·ªá th·ªëng</span>
<span>Tr∆∞·ªùng h·ª£p ƒë√£ qu√° 15 ph√∫t m√† v·∫´n ch∆∞a th·∫•y c√≥ tin hi·ªáu ph·∫£n h·ªìi vui l√≤ng li√™n h·ªá t·ªõi <a style="color: royalblue;">Sƒët/Zalo: 0398167251</a> ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£</span>
<span style="margin-top: -15px;">_____________________</span>
<span style="color: royalblue;">ƒê·ªôi ng≈© ph√°t tri·ªÉn 5Mon c·∫£m ∆°n b·∫°n ƒë√£ ·ªßng h·ªô tr√≤ ch∆°i n√†y!</span>
`;

    descPaymentDiv.innerHTML = descPayment; // Th√™m n·ªôi dung v√†o popup
}

function closePaymentGateway() {
    const popupPayment = document.getElementById("paymentGateway");
    const overlay = document.getElementById("popupOverlay");

    popupPayment.style.display = "none";
    overlay.style.display = "none"; // N·∫øu c√≥ overlay
}



//Gacha Page
var randomPet = {
    skill1S: defaultSTT5Mon,
    skill2S: defaultSTT5Mon,
    skill3S: defaultSTT5Mon,
    skill4S: defaultSTT5Mon,
    skill5S: defaultSTT5Mon,
};

//New gacha
function gacha5Mon(isX5) {
    const filteredPets = allPets.filter(pet => pet.LEVEL === 1);
    if (filteredPets.length === 0) {
        messageOpen("Kh√¥ng c√≥ pet n√†o ƒë·ªÉ gacha!");
        return;
    }

    let weightNeed = isX5?5:1
    if (Object.values(userPet).length + weightNeed > weightBagUser) {
        messageOpen('T·ªß ƒë·ªì ƒë√£ ƒë·∫ßy');
        return;
    }

    //Ki·ªÉm tra ƒë·ªß v√†ng ƒë·ªÉ gacha kh√¥ng
    let goldNeed = isX5?15:5
    if (goldUser < goldNeed) {
        messageOpen(`Kh√¥ng ƒë·ªß ${goldNeed} v√†ng`);
        return;
    } else {
        goldUser -= goldNeed;
    }

    document.getElementById("gachax1").disabled = true;
    document.getElementById("gachax1").style.background = "gray";
    document.getElementById("gachax5").disabled = true;
    document.getElementById("gachax5").style.background = "gray";

    let stopTimes = [4000, 6000, 8000, 10000, 12000];
    let chosenPets = [];

    // L√†m tr·ªëng randomPet tr∆∞·ªõc
    randomPet = {
        skill1S: defaultSTT5Mon,
        skill2S: defaultSTT5Mon,
        skill3S: defaultSTT5Mon,
        skill4S: defaultSTT5Mon,
        skill5S: defaultSTT5Mon,
    };

    let lengthRDPet = isX5?5:1;
    for (let i = 1; i <= 5; i++) {
        document.getElementById(`skill${i}S`).innerHTML = "?";
        document.getElementById(`skill${i}S`).classList.remove("comp");
        document.getElementById(`skill${i}S`).style.overflow = "hidden";
    }

    console.log("5mon sau khi random", randomPet);

    // Ch·∫°y hi·ªáu ·ª©ng quay
    for (let o = 0; o < lengthRDPet; o++) {
        // Ch·ªçn pet tr∆∞·ªõc khi quay
        const pet = getRandom5mon();
        randomPet[`skill${o+1}S`] = pet;

        let slotKey = `skill${o + 1}S`
        let slotElement = document.getElementById(slotKey);
        let container = document.createElement("div");
        container.classList.add("slotContainer");
        slotElement.innerHTML = "";
        slotElement.appendChild(container);

        let finalPet = randomPet[slotKey].URLimg['Lv1'];
        chosenPets.push(finalPet);

        // Ch·ª©a danh s√°ch ·∫£nh ƒë·ªÉ quay
        let images = [];
        let scrollSpeed = 50; // T·ªëc ƒë·ªô cu·ªôn ·∫£nh (c√†ng nh·ªè c√†ng nhanh)
        let totalImages = 100; // S·ªë ·∫£nh g·ªëc

        // Th√™m ·∫£nh 5mon quay tr√∫ng
        let finalImg = document.createElement("img");
        finalImg.src = finalPet;
        images.push(finalImg);

        for (let i = 0; i < totalImages; i++) {
            let img = document.createElement("img");
            img.src = filteredPets[Math.floor(Math.random() * filteredPets.length)].URLimg['Lv1'];
            images.push(img);
        }

        // Nh√¢n ba danh s√°ch ·∫£nh ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng v√≤ng l·∫∑p m∆∞·ª£t
        [...images, ...images, ...images, ...images, ...images, ...images].forEach(img => container.appendChild(img));

        // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng quay b·∫±ng requestAnimationFrame()
        let position = 0;
        let stopAfter = stopTimes[o]; // Th·ªùi gian d·ª´ng l·∫°i
        let startTime = Date.now();
        let animationFrame;

        function spin() {
            let elapsed = Date.now() - startTime;

            if (elapsed < stopAfter) {
                position += scrollSpeed;

                // Khi cu·ªôn ƒë·∫øn gi·ªõi h·∫°n, ƒë·∫∑t l·∫°i v·ªã tr√≠ v·ªÅ 0 ƒë·ªÉ l·∫∑p v√¥ h·∫°n
                if (position >= totalImages * 100) {
                    position = 0;
                }

                container.style.transform = `translateY(-${position}px)`;
                animationFrame = requestAnimationFrame(spin);
            } else {
                cancelAnimationFrame(animationFrame);

                // Khi d·ª´ng, hi·ªÉn th·ªã ·∫£nh tr√∫ng th∆∞·ªüng ƒë√∫ng v·ªã tr√≠
                slotElement.innerHTML = "";
                slotElement.style.overflow = "visible";
                createSkillGacha(o);
            }
        }
        requestAnimationFrame(spin);
    }

    setTimeout(() => {
        resetGoldAndTicket();
        document.getElementById("gachax1").disabled = false;
        document.getElementById("gachax1").style.background = "#d9534f";
        document.getElementById("gachax5").disabled = false;
        document.getElementById("gachax5").style.background = "#d9534f";
    }, stopTimes[lengthRDPet-1] + 500)


}

//Random 5mon
var rareStats = {
    D: { min: 60, max: 109 },
    C: { min: 110, max: 149 },
    B: { min: 150, max: 189 },
    A: { min: 190, max: 229 },
    S: { min: 230, max: 269 },
    SS: { min: 270, max: 309 },
    SSR: { min: 310, max: 350 }
};

var rareStats1 = {
    D: { sttMin: 150, sttMax: 200, max: 100 },
    C: { sttMin: 201, sttMax: 250, max: 120 },
    B: { sttMin: 251, sttMax: 300, max: 140 },
    A: { sttMin: 301, sttMax: 350, max: 160 },
    S: { sttMin: 351, sttMax: 400, max: 180 },
    SS: { sttMin: 401, sttMax: 450, max: 200 },
    SSR: { sttMin: 451, sttMax: 500, max: 220 }
};

function randomPet5Mon() {

    //rd pet5Mon
    // L·ªçc ra c√°c pet c·∫•p ƒë·ªô 1
    let all5mon = allPets.filter(pet => pet.LEVEL === 1);

    // Random 1 pet trong danh s√°ch ƒë√≥
    const index5mon = Math.floor(Math.random() * all5mon.length);
    const e5mon = all5mon[index5mon];
    console.log("all5mon", all5mon)
    console.log("index5mon", index5mon)
    console.log("e5mon", e5mon)

    //rd ch·ªâ s·ªë
    const rand = Math.random() * 100;
    let rare = '';
    if (rand < 0.5) rare = 'SSR';
    else if (rand < 1) rare = 'SS';
    else if (rand < 2) rare = 'S';
    else if (rand < 5) rare = 'A';
    else if (rand < 25) rare = 'B';
    else if (rand < 45) rare = 'C';
    else rare = 'D';

    // const { min: minSTT, max: maxSTT } = rareStats[rare];

    const { sttMin: pointMin, sttMax: pointMax, max: maxPointUp } = rareStats1[rare];

    const randStat = () => Math.floor(Math.random() * (maxPointUp - 10 + 1)) + 10;

    let str, def, int, agi, luk, hp, total;

    let attempts = 0;
    do {
        str = randStat();
        def = randStat();
        int = randStat();
        agi = randStat();
        luk = randStat();
        hp = randStat();
        total = str + def + int + agi + luk + hp;
        attempts++;
    } while (
        (total > pointMax || total < pointMin) &&
        attempts < 1000
    );

    // do {
    //     total = Math.floor(Math.random() * (maxSTT - minSTT + 1)) + minSTT;

    //     str = Math.floor(Math.random() * (total + 1));
    //     def = Math.floor(Math.random() * (total + 1));
    //     int = Math.floor(Math.random() * (total + 1));
    //     agi = Math.floor(Math.random() * (total + 1));
    //     luk = Math.floor(Math.random() * (total + 1));
    //     hp = Math.floor(Math.random() * (total + 1));

    // } while ((str + def + int + agi + luk + hp > total)
    // || str < 10 || def < 10 || int < 10 || agi < 10 || luk < 10 || hp < 10
    // || str > 250 || def > 250 || int > 250 || agi > 250 || luk > 250 || hp > 250
    // || str + def + int + agi + luk + hp > maxSTT
    //     || str + def + int + agi + luk + hp < minSTT
    // );

    return {
        ID: e5mon.ID,
        NAME: e5mon.NAME,
        URLimg: e5mon.URLimg,
        POWER: { STR: str, DEF: def, INT: int, AGI: agi, LUK: luk, HP: hp, SCALE: e5mon.POWER.SCALE },
        TYPE: e5mon.TYPE,
        SELLUP: e5mon.SELLUP,
        INTERNAL: e5mon.INTERNAL,
        EFFECT: e5mon.EFFECT,
        COOLDOWN: e5mon.COOLDOWN,
        RARE: rare,
        PRICE: e5mon.PRICE
    }
}

//ƒê·ªïi sang 5mon cho user
function getRandom5mon() {
    //Th√¥ng tin 5mon
    const infoPetRandom = randomPet5Mon();
    console.log("infoPetRandom", infoPetRandom)

    //L·∫•y ID5mon m·ªõi
    let maxID = 0;
    for (let key in userPet) {
        let numberPart = parseInt(key.slice(-6)); // L·∫•y 6 s·ªë cu·ªëi
        if (numberPart > maxID) {
            maxID = numberPart;
        }
    }
    // TƒÉng l√™n 1 ƒë·ªÉ d√πng l√†m ID m·ªõi
    let newNumber = (maxID + 1).toString().padStart(6, '0'); // Gi·ªØ 6 ch·ªØ s·ªë
    let newID = `${username}ID${newNumber}`;

    //Quy ƒë·ªïi sang DAME HEAL SHIELD BURN POISON COOLDOWN
    let powerINT = scalePower5Mon(infoPetRandom.POWER.INT);

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0;

    // √Åp d·ª•ng scaleSTR v√†o c√°c ph√©p t√≠nh hi·ªáu ·ª©ng
    if (infoPetRandom.EFFECT.includes("Attacking")) {
        dame = Math.round(powerINT.dame * infoPetRandom.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (infoPetRandom.EFFECT.includes("Healing")) {
        heal = Math.round(powerINT.heal * infoPetRandom.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (infoPetRandom.EFFECT.includes("Shield")) {
        shield = Math.round(powerINT.shield * infoPetRandom.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (infoPetRandom.EFFECT.includes("Burn")) {
        burn = Math.round(powerINT.burn * infoPetRandom.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (infoPetRandom.EFFECT.includes("Poison")) {
        poison = Math.round(powerINT.poison * infoPetRandom.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }

    //T√≠nh cooldown
    let agi = infoPetRandom.POWER.AGI;
    let minC = 8;
    let maxC = 20;

    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5

    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - infoPetRandom.POWER.SCALE);

    //t√≠nh crit
    let luk = infoPetRandom.POWER.LUK;
    let maxCrit = 60;
    let scaleCrit = 1500; // t√πy ch·ªânh
    let valueCrit = maxCrit * luk / (luk + scaleCrit);
    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
    valueCrit = Math.round(valueCrit * infoPetRandom.POWER.SCALE);

    //t√≠nh def
    let def = infoPetRandom.POWER.DEF;
    let maxDef = 90;
    let scaleDef = 475; // t√πy ch·ªânh
    let valueDef = maxDef * def / (def + scaleDef);
    valueDef = Math.min(maxDef, Math.max(0, valueDef));
    valueDef = Math.round(valueDef * infoPetRandom.POWER.SCALE);

    //G√°n info v√†o 5mon
    let final5mon = {
        IDcreate: newID,
        ID: infoPetRandom.ID,
        LEVEL: 1,
        NAME: infoPetRandom.NAME,
        POWER: infoPetRandom.POWER,
        TYPE: infoPetRandom.TYPE,
        SELLUP: infoPetRandom.SELLUP,
        INTERNAL: infoPetRandom.INTERNAL,
        EFFECT: infoPetRandom.EFFECT,
        URLimg: infoPetRandom.URLimg,
        DAME: [dame, 0, 0, 0, 0, 0],
        DEF: [Math.round(valueDef * 100) / 100, 0, 0, 0, 0, 0],
        HEAL: [heal, 0, 0, 0, 0, 0],
        SHIELD: [shield, 0, 0, 0, 0, 0],
        BURN: [burn, 0, 0, 0, 0, 0],
        POISON: [poison, 0, 0, 0, 0, 0],
        CRIT: [Math.round(valueCrit * 100) / 100, 0, 0, 0, 0, 0],
        COOLDOWN: [Math.ceil(valueC), infoPetRandom.COOLDOWN[1], 0, 0, 0, 0],
        RARE: infoPetRandom.RARE,
        PRICE: infoPetRandom.PRICE
    }

    if (!userPet) {
        userPet = {}; // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi userPet l√† m·ªôt ƒë·ªëi t∆∞·ª£ng tr·ªëng
    }

    userPet[newID] = final5mon;
    return final5mon;
}

function createSkillGacha(i) {
    const skillCompSlot = `skill${i + 1}S`;
    let skillCompDiv = document.querySelector(`#${skillCompSlot}`);
    let URLimg = randomPet[skillCompSlot].URLimg[`Lv${randomPet[skillCompSlot].LEVEL}`] || randomPet[skillCompSlot].URLimg['Lv1'];
    //T·∫°o 5mon ·ªü slot i
    if ((skillCompDiv && randomPet && randomPet[skillCompSlot].ID)) {
        console.log("V√†o ƒë√¢y 2")
        skillCompDiv.innerHTML += `
    <div 
      id="skillGacha${i + 1}" 
      class="skill"
      draggable="true"
      style="background-image: url('${URLimg}')"
      data-skill='{"ID": "${randomPet[skillCompSlot].ID}", "LEVEL": ${randomPet[skillCompSlot].LEVEL}}'>
    </div>`;
        let dameSkillText = ``; // D√πng let c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c bi·∫øn, c√≤n d√πng const kh√¥ng ƒë∆∞·ª£c

        const dameSkillDiv = document.querySelector("#skillGacha" + `${i + 1}`);
        if (dameSkillDiv) {
            if (randomPet[skillCompSlot]?.DAME?.[0] > 0) { // Skill dame
                dameSkillText += `<div class="skill-dame">${Number(randomPet[skillCompSlot].DAME.reduce((a, b) => a + b, 0) || 0)}</div>`;
            }
            if (randomPet[skillCompSlot]?.HEAL?.[0] > 0) { // Skill heal
                dameSkillText += `<div class="skill-heal">${Number(randomPet[skillCompSlot].HEAL.reduce((a, b) => a + b, 0) || 0)}</div>`;
            }
            if (randomPet[skillCompSlot]?.SHIELD?.[0] > 0) { // Skill shield
                dameSkillText += `<div class="skill-shield">${Number(randomPet[skillCompSlot].SHIELD.reduce((a, b) => a + b, 0) || 0)}</div>`;
            }
            if (randomPet[skillCompSlot]?.BURN?.[0] > 0) { // Skill BURN
                dameSkillText += `<div class="skill-burn">${Number(randomPet[skillCompSlot].BURN.reduce((a, b) => a + b, 0) || 0)}</div>`;
            }
            if (randomPet[skillCompSlot]?.POISON?.[0] > 0) { // Skill Poison
                dameSkillText += `<div class="skill-poison">${Number(randomPet[skillCompSlot].POISON.reduce((a, b) => a + b, 0) || 0)}</div>`;
            }
            if (randomPet[skillCompSlot]?.EFFECT?.includes("Freeze")) { // Skill ƒë√≥ng bƒÉng freeze
                dameSkillText += `<div class="skill-freeze">${Number(randomPet[skillCompSlot].COOLDOWN?.[0] / 2 / 1000 * randomPet[skillCompSlot].LEVEL)}</div>`;
            }
        }

        // G·∫Øn n·ªôi dung v√†o dameSkillDiv
        dameSkillDiv.innerHTML =
            `<div class="dameSkillText" style="display: flex; flex-direction: row; align-items: center;">
                ${dameSkillText}
            </div>
            <div style="position: absolute;font-size: 25px;font-weight: bold;color: rgb(83, 21, 21);text-shadow: 2px 1px 2px #140a03;top: 0px;right: 0px;">
                <span style="position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);font-size: 14px;color: #ffd600; font-weight: bold; background: #ff0000;min-width: 25px; border-radius: 5px;">${randomPet[skillCompSlot].RARE}</span>
            </div>`;

        //G·∫Øn cho div cha tr·∫°ng th√°i ƒë√£ l·∫•p ƒë·∫ßy
        skillCompDiv.classList.add("comp");

        skillCompDiv.addEventListener("click", () => {

            for (let k = 1; k <= 4; k++) {
                document.getElementById(`popupSTT5MonLV${k}`).style.background = "firebrick";
            }

            document.getElementById(`popupSTT5MonLV${randomPet[skillCompSlot].LEVEL}`).style.background = "rebeccapurple";

            setupClickPopupInfo5MonBag(randomPet[skillCompSlot], "skillGacha", randomPet[skillCompSlot].LEVEL) 


            for (let s = 1; s <= 4; s++) {
                const el = document.getElementById(`popupSTT5MonLV${s}`);
                if (!el) continue;
                el.onclick = () => {
                    setupClickPopupInfo5MonBag(randomPet[skillCompSlot], "skillGacha", s);
                    for (let p = 1; p <= 4; p++) {
                        document.getElementById(`popupSTT5MonLV${p}`).style.background = "firebrick";
                    }
                    
                    el.style.background = "rebeccapurple";

                };
            }


        });
    }
    
}

//Exchange Page => ƒê·ªïi th·∫ª l·∫•y pet
var exchangePetShop = [];
function openExchangePage() {
    // t·∫°o m·∫£ng m·ªõi ch·ª©a Pet + gi√° pet
    exchangePetShop = allPets
        .filter(pet => pet.LEVEL === 1)
        .map(pet => ({
            LEVEL: pet.LEVEL,
            ID: pet.ID,
            NAME: pet.NAME,
            TYPE: pet.TYPE,
            SELLUP: pet.SELLUP,
            INTERNAL: pet.INTERNAL,
            EFFECT: pet.EFFECT,
            URLimg: pet.URLimg,
            POWER: pet.POWER,
            DAME: pet.DAME,
            DEF: pet.DEF,
            HEAL: pet.HEAL,
            SHIELD: pet.SHIELD,
            BURN: pet.BURN,
            POISON: pet.POISON,
            CRIT: pet.CRIT,
            COOLDOWN: pet.COOLDOWN,
            PRICE: pet.PRICE,
            ticketsPRICE: 10 // Gi√° m·∫∑c ƒë·ªãnh
        }));

    console.log("exchangePetShop", exchangePetShop)

    if (exchangePetShop.length > 0) {
        var latestID = Math.max(...exchangePetShop.map(pet => parseInt(pet.ID.slice(1))));

        // C·∫≠p nh·∫≠t gi√° cho 2 pet m·ªõi nh·∫•t l√† 20
        exchangePetShop = exchangePetShop.map(pet => ({
            ...pet,
            ticketsPRICE: parseInt(pet.ID.slice(1)) >= latestID - 1 ? 20 : 10
        }));
        console.log("exchangePetShop2", exchangePetShop)
    } else {
        console.warn("Kh√¥ng c√≥ pet n√†o c√≥ LEVEL = 1.");
    }

    addItemForExchangePage("exchangeRow1", exchangePetShop);
}

function addItemForExchangePage(rowId, itemList) {
    const row = document.getElementById(rowId);

    row.innerHTML = ""; // X√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥

    // S·∫Øp x·∫øp itemList: 
    // 1. Pet ch∆∞a s·ªü h·ªØu l√™n tr∆∞·ªõc
    // 2. N·∫øu c√πng tr·∫°ng th√°i s·ªü h·ªØu, pet c√≥ ID l·ªõn h∆°n (m·ªõi h∆°n) l√™n tr∆∞·ªõc
    itemList.sort((a, b) => {
        const aOwned = userPet.hasOwnProperty(a.ID);
        const bOwned = userPet.hasOwnProperty(b.ID);

        if (aOwned !== bOwned) {
            return aOwned - bOwned; // Ch∆∞a s·ªü h·ªØu (0) l√™n tr∆∞·ªõc, ƒë√£ s·ªü h·ªØu (1) xu·ªëng sau
        }

        return b.ID.localeCompare(a.ID); // ID l·ªõn h∆°n (m·ªõi h∆°n) l√™n tr∆∞·ªõc
    });

    itemList.forEach(item => {
        // T·∫°o th·∫ª ch·ª©a item
        const itemDiv = document.createElement("div");
        itemDiv.id = `${item.ID}`
        itemDiv.style.cssText = `
  min-width: 105px;
  height: 105px;
  padding: 2px;
  background: rgb(255, 243, 220);
  border-radius: 10px;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  box-shadow: rgb(0 0 0 / 20%) 2px 2px 1px 2px;
  justify-content: center;
  position: relative;
  border: 2px solid #d1b792;
`;

        // Th√™m h√¨nh ·∫£nh
        const img = document.createElement("img");
        let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
        img.src = URLimg;
        img.style.cssText = "height: 75px; object-fit: cover; pointer-events: none;";

        // Th√™m t√™n item
        const name = document.createElement("p");
        name.textContent = item.NAME;
        name.style.cssText = "font-size: 12px;font-weight: bold;margin: 1px 0px 0px;color: white;background: firebrick;border-bottom-right-radius: 6px;border-bottom-left-radius: 6px; min-width: 100px;pointer-events: none;";

        // Th√™m gi√° item
        const price = document.createElement("p");
        price.textContent = `${item.ticketsPRICE} v√© ƒë·ªïi`;
        price.style.cssText = "font-size: 12px; color: gold; background: seagreen; margin: 0px; border-radius: 5px; width: 95px; font-weight: bold; pointer-events: none;";

        // Ki·ªÉm tra n·∫øu user ƒë√£ s·ªü h·ªØu pet n√†y
        if (userPet.hasOwnProperty(item.ID)) {

            const ownedOverlay = document.createElement("div");
            ownedOverlay.textContent = "ƒê√£ s·ªü h·ªØu";
            ownedOverlay.style.cssText = `
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
    color: white;
    font-size: 14px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    pointer-events: none;
  `;
            itemDiv.appendChild(ownedOverlay);
        }

        // G·∫Øn t·∫•t c·∫£ v√†o itemDiv
        itemDiv.appendChild(img);
        itemDiv.appendChild(name);
        itemDiv.appendChild(price);
        // itemDiv.appendChild(buyButton);

        // Th√™m v√†o h√†ng t∆∞∆°ng ·ª©ng
        row.appendChild(itemDiv);

    });
    //Th√™m event click v√†o c√°c item ƒë·ªÉ hi√™n popup mua
    setupPopupEventsExchangePage(itemList);
}

function setupPopupEventsExchangePage(itemList) {
    const popup = document.getElementById("itemPopupExchange");
    const overlay = document.getElementById("popupOverlay");
    const buttonBuy = document.getElementById("buyItemExchange");

    // Th√™m s·ª± ki·ªán click cho t·ª´ng item ƒë·ªÉ m·ªü popup
    itemList.forEach(item => {
        const itemDiv = document.getElementById(item.ID);
        itemDiv.addEventListener("click", () => {

            let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
            
            document.getElementById("popupImgExchange").style.backgroundImage = "url('" + URLimg + "')";
            document.getElementById("popupNameExchange").textContent = item.NAME;
            document.getElementById("priceTextItemPopupExchange").textContent = item.PRICE;

            for (let k = 1; k <= 4; k++) {
                document.getElementById(`popupImgExchangeLV${k}`).style.background = "firebrick";
            }

            document.getElementById(`popupImgExchangeLV${item.LEVEL}`).style.background = "rebeccapurple";

            for (let s = 1; s <= 4; s++) {
                const el = document.getElementById(`popupImgExchangeLV${s}`);
                if (!el) continue;
                el.onclick = () => {
                    
                    let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];

                    document.getElementById("popupImgExchange").style.backgroundImage = "url('" + URLimg + "')";

                    for (let k = 1; k <= 4; k++) {
                        document.getElementById(`popupImgExchangeLV${k}`).style.background = "firebrick";
                    }
                    
                    el.style.background = "rebeccapurple";

                };
            }


            let descTextItem = "";
            // Type
            let typeInfo = "";
            item.TYPE.forEach(type => {
                typeInfo += `<a style=" background: rebeccapurple; padding: 2px 4px; border-radius: 4px; color: #ffffff;">${type}</a>`
            });

            // C·∫≠p nh·∫≠t th√¥ng tin trong popup
            descTextItem += `
            <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; width: 100%">
                <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; gap: 3px; width: 100%">
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-hand-fist"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-shield"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-brain"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-bolt"></i></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-clover"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-heart"></i>: ??</span>
                </div>
            </div>`

            // C·∫≠p nh·∫≠t th√¥ng tin trong popup
            descTextItem += `
            <span style="display: flex;font-weight: bold;font-size: 12px;padding: 2px 0px;color: black;gap: 5px;flex-direction: row;align-content: center;
            justify-content: space-between;align-items: center; width: 100%;">
            <span>
                [M√°u: <a style="color:red; font-weight: bold;">???</a>]
            </span>
            <span style="display: flex; gap: 5px;">
                <span style="display: flex; gap: 3px; flex-direction: row; align-content: center; justify-content: center; align-items: center;">
                    ${typeInfo}
                </span>
            </span>
            </span>
            <span style="font-weight: bold;margin-top: 5px;">[ƒê√°nh th∆∞·ªùng][T·ªëc ƒë·ªô: ??? gi√¢y][Li√™n k√≠ch: ???]</span>
            <span>G√¢y <a style="color: red; font-weight: bold">??? s√°t th∆∞∆°ng </a> cho 5Mon ƒë·ªëi th·ªß (∆∞u ti√™n 5Mon ƒë·ªëi di·ªán)</span>
            `

            let descInfo = "";
            let countDescInfo = 1;
            if (item.EFFECT.length === 1) {
                item.EFFECT.forEach((effect) => {
                    if (effectsSkill[effect]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSkill[effect].descriptionSkill}\`;`);
                        let rawDescription = dynamicDescription(item);

                        // Thay th·∫ø m·ªçi s·ª± xu·∫•t hi·ªán c·ªßa -Infinity b·∫±ng d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/-Infinity/g, '?');

                        // Ti·∫øp t·ª•c thay th·∫ø c√°c s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        hiddenDescription = hiddenDescription.replace(/\d+(\.\d+)?/g, '?');

                        // Thay th·∫ø "mon" b·∫±ng "5mon" n·∫øu c√≥
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        // B√¢y gi·ªù hiddenDescription ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c thay th·∫ø
                        descInfo += hiddenDescription
                    }
                });
            } else {
                item.EFFECT.forEach((effect) => {
                    if (effectsSkill[effect]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSkill[effect].descriptionSkill}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay th·∫ø m·ªçi s·ª± xu·∫•t hi·ªán c·ªßa -Infinity b·∫±ng d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/-Infinity/g, '?');

                        // Ti·∫øp t·ª•c thay th·∫ø c√°c s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        hiddenDescription = hiddenDescription.replace(/\d+(\.\d+)?/g, '?');

                        // Thay th·∫ø "mon" b·∫±ng "5mon" n·∫øu c√≥
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        // B√¢y gi·ªù hiddenDescription ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c thay th·∫ø

                        descInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countDescInfo})</span> ${hiddenDescription}</span>`;
                        countDescInfo += 1;
                    }
                });
            }

            let internalInfo = "";
            let countInternalInfo = 1;
            if (item.INTERNAL.length === 1) {
                item.INTERNAL.forEach((internal) => {
                    if (effectsInternal[internal]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsInternal[internal].descriptionInternal}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');
                        internalInfo += hiddenDescription
                    }
                });
            } else {
                item.INTERNAL.forEach((internal) => {
                    if (effectsInternal[internal]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsInternal[internal].descriptionInternal}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        internalInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countInternalInfo})</span> ${hiddenDescription}</span>`;
                        countInternalInfo += 1;
                    }
                });
            }

            //Ch√≠ m·∫°ng info
            let critInfo = `[T·ª∑ l·ªá ch√≠ m·∫°ng: <span style="color: red; font-weight: bold">???</span>]`;

            // G√°n n·ªôi dung v√†o ph·∫ßn t·ª≠ HTML
            if (descInfo !== "") {
                descTextItem +=
                    `<span style="font-weight: bold;margin-top: 5px;">[K·ªπ nƒÉng ch·ªß ƒë·ªông][+N·ªô: ???][Li√™n k√≠ch: ???]</span>
    <span style="display: flex;flex-direction: column; gap: 3px;">${descInfo.trim()}</span>
    <span>${critInfo.trim()}</span>`;
            } else {
                descTextItem += "";
            }

            if (internalInfo !== "") {
                descTextItem +=
                    `<span style="font-weight: bold;margin-top: 5px;">[K·ªπ nƒÉng b·ªã ƒë·ªông]</span>
    <span style="display: flex;flex-direction: column; gap: 3px;">${internalInfo.trim()}</span>`
            } else {
                descTextItem += "";
            }

            //Sellup info
            let sellUpInfo = "";
            let countSellUpInfo = 1;
            if (item.SELLUP.length === 1) {
                item.SELLUP.forEach((sellup) => {
                    if (effectsSellUp[sellup]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        sellUpInfo += hiddenDescription
                    }
                });
            } else {
                item.SELLUP.forEach((sellup) => {
                    if (effectsSellUp[sellup]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        sellUpInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countSellUpInfo})</span> ${hiddenDescription}</span>`;
                        countSellUpInfo += 1;
                    }
                });
            }

            if (sellUpInfo !== "") {
                descTextItem += `<span style="font-weight: bold;margin-top: 5px;">[Th·∫£ ƒëi nh·∫≠n ƒë∆∞·ª£c]</span>
    <span style="display: flex;flex-direction: column; gap: 3px;">${sellUpInfo.trim()}</span>`;
            } else {
                descTextItem += "";
            }

            document.getElementById("popupDescExchange").innerHTML = descTextItem;


            document.getElementById("popupPriceExchange").textContent = `${item.ticketsPRICE} v√© ƒë·ªïi`;
            // Ki·ªÉm tra n·∫øu pet ƒë√£ s·ªü h·ªØu
            const isOwned = userPet.hasOwnProperty(item.ID)

            if (isOwned) {
                buttonBuy.innerHTML = "ƒê√£ s·ªü h·ªØu"
                buttonBuy.style.background = "gray";
                buttonBuy.style.cursor = "not-allowed";
                buttonBuy.disabled = true;
                buttonBuy.onclick = null; // X√≥a s·ª± ki·ªán click n·∫øu ƒë√£ s·ªü h·ªØu
            } else {
                buttonBuy.innerHTML = "ƒê·ªïi"
                buttonBuy.style.background = "firebrick"; // Reset m√†u g·ªëc
                buttonBuy.style.cursor = "pointer";
                buttonBuy.disabled = false;

                // X√≥a s·ª± ki·ªán c≈© (n·∫øu c√≥) r·ªìi th√™m s·ª± ki·ªán m·ªõi
                buttonBuy.onclick = () => buyItemExchange(item.ID, item.NAME, item.ticketsPRICE);
            }

            popup.style.display = "block";
            overlay.style.display = "block";
        });
    });

    // ƒê√≥ng popup khi b·∫•m n√∫t ƒë√≥ng ho·∫∑c click v√†o n·ªÅn m·ªù
    [overlay].forEach(element => {
        element.addEventListener("click", (event) => {
            if (popup.style.display === "block") {
                popup.style.display = "none";
                overlay.style.display = "none";
            }
        });
    });
}

function buyItemExchange(itemID, itemName, ticketsPrice) {

    if (ticketsUser < ticketsPrice) {
        messageOpen("Kh√¥ng ƒë·ªß v√© ƒë·ªïi");
        return;
    }

    if (Object.values(userPet).length >= weightBagUser) {
        messageOpen('T·ªß ƒë·ªì ƒë√£ ƒë·∫ßy')
        return
    }

    let select5Mon = allPets.find(pet => pet.ID === itemID && pet.LEVEL === 1);

    console.log("select5Mon", select5Mon)
    //rd ch·ªâ s·ªë
    const rand = Math.random() * 100;
    let rare = '';
    if (rand < 0.5) rare = 'SSR';
    else if (rand < 1) rare = 'SS';
    else if (rand < 2) rare = 'S';
    else if (rand < 5) rare = 'A';
    else if (rand < 25) rare = 'B';
    else if (rand < 45) rare = 'C';
    else rare = 'D';

    const { sttMin: pointMin, sttMax: pointMax, max: maxPointUp } = rareStats1[rare];
    const randStat = () => Math.floor(Math.random() * (maxPointUp - 10 + 1)) + 10;

    let str, def, int, agi, luk, hp, total;

    let attempts = 0;
    do {
        str = randStat();
        def = randStat();
        int = randStat();
        agi = randStat();
        luk = randStat();
        hp = randStat();
        total = str + def + int + agi + luk + hp;
        attempts++;
    } while (
        (total > pointMax || total < pointMin) &&
        attempts < 1000
    );
    
    // const { min: minSTT, max: maxSTT } = rareStats[rare];

    // let str, def, int, agi, luk, hp, total;

    // do {
    //     total = Math.floor(Math.random() * (maxSTT - minSTT + 1)) + minSTT;

    //     str = Math.floor(Math.random() * (total + 1));
    //     def = Math.floor(Math.random() * (total + 1));
    //     int = Math.floor(Math.random() * (total + 1));
    //     agi = Math.floor(Math.random() * (total + 1));
    //     luk = Math.floor(Math.random() * (total + 1));
    //     hp = Math.floor(Math.random() * (total + 1));

    // } while ((str + def + int + agi + luk + hp > total)
    // || str < 10 || def < 10 || int < 10 || agi < 10 || luk < 10 || hp < 10
    // || str > 250 || def > 250 || int > 250 || agi > 250 || luk > 250 || hp > 250
    // || str + def + int + agi + luk + hp > maxSTT
    //     || str + def + int + agi + luk + hp < minSTT
    // );

    //L·∫•y ID5mon m·ªõi
    let maxID = 0;
    for (let key in userPet) {
        let numberPart = parseInt(key.slice(-6)); // L·∫•y 6 s·ªë cu·ªëi
        if (numberPart > maxID) {
            maxID = numberPart;
        }
    }
    // TƒÉng l√™n 1 ƒë·ªÉ d√πng l√†m ID m·ªõi
    let newNumber = (maxID + 1).toString().padStart(6, '0'); // Gi·ªØ 6 ch·ªØ s·ªë
    let newID = `${username}ID${newNumber}`;

    //Quy ƒë·ªïi sang DAME HEAL SHIELD BURN POISON COOLDOWN
    let powerINT = scalePower5Mon(int);

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0;

    // √Åp d·ª•ng scaleSTR v√†o c√°c ph√©p t√≠nh hi·ªáu ·ª©ng
    if (select5Mon.EFFECT.includes("Attacking")) {
        dame = Math.round(powerINT.dame * select5Mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (select5Mon.EFFECT.includes("Healing")) {
        heal = Math.round(powerINT.heal * select5Mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (select5Mon.EFFECT.includes("Shield")) {
        shield = Math.round(powerINT.shield * select5Mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (select5Mon.EFFECT.includes("Burn")) {
        burn = Math.round(powerINT.burn * select5Mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (select5Mon.EFFECT.includes("Poison")) {
        poison = Math.round(powerINT.poison * select5Mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }

    //T√≠nh cooldown
    let minC = 8;
    let maxC = 20;

    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5

    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - select5Mon.POWER.SCALE);

    //t√≠nh crit
    let maxCrit = 60;
    let scaleCrit = 1500; // t√πy ch·ªânh
    let valueCrit = maxCrit * luk / (luk + scaleCrit);
    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
    valueCrit = Math.round(valueCrit * select5Mon.POWER.SCALE);

    //t√≠nh def
    let maxDef = 90;
    let scaleDef = 475; // t√πy ch·ªânh
    let valueDef = maxDef * def / (def + scaleDef);
    valueDef = Math.min(maxDef, Math.max(0, valueDef));
    valueDef = Math.round(valueDef * select5Mon.POWER.SCALE);

    //G√°n info v√†o 5mon
    let final5mon = {
        IDcreate: newID,
        ID: select5Mon.ID,
        LEVEL: 1,
        NAME: select5Mon.NAME,
        POWER: { STR: str, DEF: def, INT: int, AGI: agi, LUK: luk, HP: hp, SCALE: select5Mon.POWER.SCALE },
        TYPE: select5Mon.TYPE,
        SELLUP: select5Mon.SELLUP,
        INTERNAL: select5Mon.INTERNAL,
        EFFECT: select5Mon.EFFECT,
        URLimg: select5Mon.URLimg,
        DAME: [dame, 0, 0, 0, 0, 0],
        DEF: [Math.round(valueDef * 100) / 100, 0, 0, 0, 0, 0],
        HEAL: [heal, 0, 0, 0, 0, 0],
        SHIELD: [shield, 0, 0, 0, 0, 0],
        BURN: [burn, 0, 0, 0, 0, 0],
        POISON: [poison, 0, 0, 0, 0, 0],
        CRIT: [Math.round(valueCrit * 100) / 100, 0, 0, 0, 0, 0],
        COOLDOWN: [Math.ceil(valueC), select5Mon.COOLDOWN[1], 0, 0, 0, 0],
        RARE: rare,
        PRICE: select5Mon.PRICE
    }

    if (!userPet) {
        userPet = {}; // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi userPet l√† m·ªôt ƒë·ªëi t∆∞·ª£ng tr·ªëng
    }

    userPet[newID] = final5mon;
    console.log("userPet[newID]", userPet[newID])

    ticketsUser -= ticketsPrice
    messageOpen(`Mua th√†nh c√¥ng pet ${itemName}`);
    //Reset l·∫°i shop
    openExchangePage();
    //Reset l·∫°i gold + ticket
    resetGoldAndTicket();

}

//Reset gold + ticket + ƒëi·ªÉm x·∫øp h·∫°ng
function resetGoldAndTicket() {
    document.getElementById("goldUser").innerText = `${goldUser}`;
    document.getElementById("ticketUser").innerText = `${ticketsUser}`;
    document.getElementById("pointRank").innerText = `${pointRank.typeGameConquest}`;
    document.getElementById("diamondUser").innerText = `${diamondUser}`;

    //C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng hi·ªán t·∫°i:
    const sortedUsers = Object.entries(rankGame).sort(([, a], [, b]) => b.rankPoint.typeGameConquest - a.rankPoint.typeGameConquest);
    const myTop = sortedUsers.findIndex(([user]) => user === username) + 1; // Th·ª© h·∫°ng b·∫Øt ƒë·∫ßu t·ª´ 1
    document.getElementById("isRanking").innerText = `(H·∫°ng: ${myTop})`;

}

//H∆∞·ªõng d·∫´n ng∆∞·ªùi ch∆°i
let guideMode = false; //++++++++
let stepGuide = 0;
//Bi·∫øn c√°c b∆∞·ªõc h∆∞·ªõng d·∫´n ng∆∞·ªùi ch∆°i
const steps = [
    { element: "#openBag", text: "B·∫•m n√∫t 'T·ªß ƒë·ªì' ƒë·ªÉ m·ªü ra t·ªß ƒë·ªì", event: openBag, nextStep: true },
    { element: "#inventory", text: "ƒê√¢y l√† t·ªß ƒë·ªì ch·ª©a to√†n b·ªô 5mon b·∫°n s·ª° h·ªØu", nextStep: true },
    { element: "#bag", text: "ƒê√¢y l√† h√†nh l√Ω n∆°i b·∫°n c√≥ th·ªÉ k√©o c√°c 5mon t·ª´ t·ªß ƒë·ªì v√†o, 5mon n√†y s·∫Ω ƒë∆∞·ª£c d√πng trong tr·∫≠n ƒë·∫•u", nextStep: true },
    { element: "#inventory1", text: "H√£y k√©o 5mon t·ª´ t·ªß ƒë·ªì sang h√†nh l√Ω", nextStep: false },
    { element: "#inventory", text: "H√£y ti·∫øp t·ª•c k√©o c√°c 5mon kh√°c m√† b·∫°n mu·ªën s·ª≠ d·ª•ng t·ª´ t·ªß ƒë·ªì sang h√†nh l√Ω", nextStep: false },
    { element: "#openGame", text: "B·∫•m n√∫t 'B·∫Øt ƒë·∫ßu' ƒë·ªÉ v√†o tr·∫≠n ƒë·∫•u!", event: openGame, nextStep: true },
    // { element: "#attackButton", text: "ƒê√¢y l√† n√∫t t·∫•n c√¥ng. B·∫•m v√†o ƒë·ªÉ g√¢y s√°t th∆∞∆°ng!" },
    // { element: "#hpBar", text: "ƒê√¢y l√† thanh m√°u c·ªßa b·∫°n. H√£y gi·ªØ n√≥ ƒë·∫ßy c√†ng l√¢u c√†ng t·ªët!" },
];

function showStepGuide(stepIndex) {
    const step = steps[stepIndex];
    const element = document.querySelector(step.element);
    const guideTextPopup = document.getElementById("tutorialPopup");
    const guideText = document.getElementById("tutorialText");
    const highlightDivGuide = document.querySelector(".highlightGuide");
    const overlayDivGuide = document.querySelector(".overlayGuide");

    // Highlight v√πng
    const rect = element.getBoundingClientRect();
    highlightDivGuide.style.display = "flex";
    overlayDivGuide.style.display = "flex";

    highlightDivGuide.style.top = `${rect.top - 10}px`;
    highlightDivGuide.style.left = `${rect.left - 10}px`;
    highlightDivGuide.style.width = `${rect.width + 20}px`;
    highlightDivGuide.style.height = `${rect.height + 20}px`;

    const popupGuideRect = element.getBoundingClientRect();
    const effectContainerScreenBattle = document.getElementById("ScreenBattle");
    const screenBattleRect = effectContainerScreenBattle.getBoundingClientRect(); // T·ªça ƒë·ªô c·ªë ƒë·ªãnh
    const screenBattleMidpointX = screenBattleRect.left + (screenBattleRect.width / 2); // T·ªça ƒë·ªô gi·ªØa c·ªßa ScreenBattle
    const screenBattleMidpointY = screenBattleRect.top + (screenBattleRect.height / 2);
    const highlightDivGuideRect = highlightDivGuide.getBoundingClientRect();

    guideText.innerText = step.text; // Th√™m text v√†o popup
    guideTextPopup.style.display = 'flex'; // Hi·ªÉn th·ªã t·∫°m ƒë·ªÉ l·∫•y k√≠ch th∆∞·ªõc
    const popupWidth = guideTextPopup.offsetWidth;
    const popupHeight = guideTextPopup.offsetHeight;
    guideTextPopup.style.display = 'none'; // ·∫®n l·∫°i tr∆∞·ªõc khi ƒë·ªãnh v·ªã

    // T√≠nh to√°n v·ªã tr√≠ cho popup
    let popupLeft = 0;
    let popupTop = 0;

    // Ki·ªÉm tra t·ª∑ l·ªá chi·ªÅu cao c·ªßa highlightDivGuide so v·ªõi chi·ªÅu cao c·ªßa ScreenBattle
    const highlightHeightRatio = highlightDivGuideRect.height / screenBattleRect.height;

    // N·∫øu highlightDivGuide chi·∫øm t·ª´ 80% chi·ªÅu cao c·ªßa ScreenBattle tr·ªü l√™n, hi·ªÉn th·ªã guideTextPopup ·ªü d∆∞·ªõi c√πng c·ªßa highlightDivGuide
    if (highlightHeightRatio >= 0.8) {
        if (highlightDivGuideRect.left < screenBattleMidpointX) {//B√™n tr√°i
            popupLeft = highlightDivGuideRect.left + window.scrollX;
            popupTop = highlightDivGuideRect.bottom + window.scrollY - popupHeight - 10; // Hi·ªÉn th·ªã ·ªü d∆∞·ªõi c√πng
        } else { //B√™n ph·∫£i
            popupLeft = popupLeft = highlightDivGuideRect.right + window.scrollX - popupWidth;
            popupTop = highlightDivGuideRect.bottom + window.scrollY - popupHeight - 10; // Hi·ªÉn th·ªã ·ªü d∆∞·ªõi c√πng
        }

    } else {
        // N·∫øu kh√¥ng, t√≠nh to√°n nh∆∞ b√¨nh th∆∞·ªùng
        if (highlightDivGuideRect.left < screenBattleMidpointX) { // ·ªû b√™n tr√°i
            popupLeft = highlightDivGuideRect.left + window.scrollX;
        } else { // ·ªû b√™n ph·∫£i
            popupLeft = highlightDivGuideRect.right + window.scrollX - popupWidth;
        }

        if (highlightDivGuideRect.top < screenBattleMidpointY) { // N·∫±m ·ªü ph·∫ßn tr√™n c·ªßa ScreenBattle
            popupTop = highlightDivGuideRect.bottom + window.scrollY + 10;
        } else { // N·∫±m ·ªü ph·∫ßn d∆∞·ªõi c·ªßa ScreenBattle
            popupTop = highlightDivGuideRect.top + window.scrollY - popupHeight - 10;
        }
    }

    guideTextPopup.style.left = `${popupLeft}px`;
    guideTextPopup.style.top = `${popupTop}px`;

    // Hi·ªÉn th·ªã l·ªùi nh·∫Øc
    guideTextPopup.style.display = 'flex';
}



function nextStepGuide() {
    const step = steps[stepGuide]; // L·∫•y step t∆∞∆°ng ·ª©ng
    document.querySelector(".overlayGuide").style.display = "none";
    document.querySelector(".highlightGuide").style.display = "none";
    document.getElementById("tutorialPopup").style.display = "none";
    stepGuide++;
    if (step.event) {
        step.event();
    }

    if (step.nextStep) {
        showStepGuide(stepGuide);
    }
}
function skipGuide() {
    guideMode = false
    stepGuide = 0
    document.querySelector(".overlayGuide").style.display = "none";
    document.querySelector(".highlightGuide").style.display = "none";
    document.getElementById("tutorialPopup").style.display = "none";
}

function openFullscreen() {
    const element = document.documentElement; // To√†n m√†n h√¨nh trang web
    if (element.requestFullscreen) {
        element.requestFullscreen(); // Chrome, Firefox, Edge
    } else if (element.webkitRequestFullscreen) { // Safari
        element.webkitRequestFullscreen();
    }
}

let endTime = 0; // L∆∞u th·ªùi ƒëi·ªÉm c·∫ßn ƒë√≥ng th√¥ng b√°o
let intervalId; // Bi·∫øn l∆∞u setInterval

function messageOpen(message) {
    const divMess = document.getElementById("popupMessage");
    const mess = document.getElementById("popup-message");
    let timeClose = 3000; // 3 gi√¢y

    // Hi·ªÉn th·ªã th√¥ng b√°o
    divMess.style.display = "flex";
    divMess.style.opacity = "1";
    mess.innerHTML = message;

    // C·∫≠p nh·∫≠t th·ªùi ƒëi·ªÉm c·∫ßn ƒë√≥ng th√¥ng b√°o (hi·ªán t·∫°i + timeClose)
    endTime = Date.now() + timeClose;

    // N·∫øu ch∆∞a c√≥ interval th√¨ t·∫°o m·ªõi
    if (!intervalId) {
        intervalId = setInterval(() => {
            if (Date.now() >= endTime) {
                divMess.style.display = "none";
                divMess.style.opacity = "0";
                mess.innerHTML = "";
                clearInterval(intervalId); // D·ª´ng interval khi ·∫©n th√¥ng b√°o
                intervalId = null;
            }
        }, 100); // Ki·ªÉm tra m·ªói 100ms
    }
}


function closeMessagePopup() {
    const divMess = document.getElementById("popupMessage")
    const mess = document.getElementById("popup-message")

    divMess.style.display = "none";
    divMess.style.opacity = "0";
    mess.innerHTML = ""
}

//Nhi·ªám v·ª•
//In put nhi·ªám v·ª• v√†o popup
function openQuestBoard() {
    //Check v√† input ƒëi·ªÉm danh
    loadCheckin();

    //Input nhi·ªám v·ª• v√†o
    loadQuest("Day");

    showOrHiddenDiv("popupQuestBoard")
}

function loadCheckin() {
    Object.entries(weekCheckin).forEach(([key, days]) => {
        const isDay = document.getElementById(`checkin${key}`);

        // Map ng√†y t·ª´ "t2" -> "t7" v√† "cn"
        const dayMap = { t2: 1, t3: 2, t4: 3, t5: 4, t6: 5, t7: 6, cn: 0 };
        let day = dayMap[key] ?? 0; // M·∫∑c ƒë·ªãnh l√† Ch·ªß Nh·∫≠t n·∫øu key kh√¥ng h·ª£p l·ªá

        // L·∫•y ng√†y h√¥m nay (0 = Ch·ªß Nh·∫≠t, 1 = Th·ª© Hai, ..., 6 = Th·ª© B·∫£y)
        let today = new Date().getDay();

        // N·∫øu h√¥m nay l√† ng√†y ƒë√≥ v√† ch∆∞a check-in th√¨ g√°n onclick
        if (today === day && todayCheckin === "No") {
            isDay.onclick = () => checkinToday(key);
            isDay.classList.add("gift-animation");
            isDay.innerHTML += `<span id="checkinSignal" style="
  position: absolute;
  color: red;
  font-size: 30px;
  bottom: -2px;
  background: red;
  height: 10px;
  width: 10px;
  border-radius: 15px; 
  border: 1px solid wheat;
  box-shadow: rgb(0 0 0 / 36%) 1px 1px 1px 1px;
  "></span>`;
        } else {
            isDay.classList.remove("gift-animation");
            isDay.onclick = null; // ƒê·∫£m b·∫£o kh√¥ng c√≥ s·ª± ki·ªán click khi kh√¥ng h·ª£p l·ªá
            isDay.innerHTML += ""
        }

        // ƒê·ªïi m√†u n·ªÅn t√πy theo tr·∫°ng th√°i check-in
        isDay.style.background = days === 1 ? "#47a0e5" : "gray";
    });

    // T√≠nh ph·∫ßn trƒÉm ti·∫øn tr√¨nh
    let totalDays = Object.keys(weekCheckin).length;
    let checkedDays = Object.values(weekCheckin).filter(value => value === 1).length;
    let percentTimeLine = (checkedDays / totalDays) * 100;

    document.getElementById("timeLine").style.width = `${percentTimeLine}%`;
    document.getElementById("timeLineText").innerHTML = `(${checkedDays}/${totalDays})`;

    // Ki·ªÉm tra ho√†n th√†nh 100% ƒë·ªÉ k√≠ch ho·∫°t hi·ªáu ·ª©ng qu√† t·∫∑ng
    let giftElement = document.getElementById("timeLineGift");
    if (percentTimeLine === 100 && giftCheckinComplete !== "Yes") {
        giftElement.classList.add("gift-animation");
        giftElement.style.color = "#e455c6"
        giftElement.onclick = () => giftCheckin();
    } else {
        giftElement.classList.remove("gift-animation");
        giftElement.style.color = "white"
        if (giftCheckinComplete === "Yes" && percentTimeLine === 100) {
            giftElement.onclick = () => messageOpen('Tu·∫ßn n√†y ƒë√£ nh·∫≠n th∆∞·ªüng, h√£y ƒë·ª£i tu·∫ßn sau');
        } else {
            giftElement.onclick = () => messageOpen('Ch∆∞a ƒëi·ªÉm danh ƒë·ªß');
        }
    }
}

function giftCheckin() {
    giftCheckinComplete = "Yes"
    diamondUser += 10;
    ticketsUser += 100;
    resetGoldAndTicket();
    messageOpen("B·∫°n nh·∫≠n ƒë∆∞·ª£c 10 kim c∆∞∆°ng v√† 100 v√© ƒë·ªïi")
    loadCheckin();
}

function checkinToday(key) {
    const checkinSignal = document.getElementById("checkinSignal");
    if (checkinSignal) {
        checkinSignal.style.display = "none";
    }
    todayCheckin = "Yes"
    weekCheckin[key] = 1
    goldUser += 5000;
    ticketsUser += 1;
    resetGoldAndTicket();
    messageOpen("ƒêi·ªÉm danh th√†nh c√¥ng, nh·∫≠n v·ªÅ 5000 v√†ng v√† 1 v√© ƒë·ªïi")
    loadCheckin();
}

function loadQuest(time) {
    const divAddQuest = document.getElementById("boardAddQuest")
    const timeQuest = time === "Day" ? allQuestData.questDay :
        time === "Week" ? allQuestData.questWeek :
            allQuestData.questWeekend;
    const checkQuestForTime = time === "Day" ? questDay :
        time === "Week" ? questWeek :
            questWeekend;

    if (time === "Week") {
        document.getElementById("buttonQuestDay").style.background = "rgb(222, 109, 62)";
        document.getElementById("buttonQuestWeek").style.background = "rgb(168, 48, 48)";
    } else {
        document.getElementById("buttonQuestDay").style.background = "rgb(168, 48, 48)";
        document.getElementById("buttonQuestWeek").style.background = "rgb(222, 109, 62)";
    }

    let questContent = "";
    Object.entries(timeQuest).forEach(([key, quest]) => {
        let completeQuest = "none";
        let colorCompleteQuest = "rgb(187, 234, 134)";
        let giftComplete = "";
        let onclickCheckGift = "";

        if (checkQuestForTime[key][0] >= quest.targetQuest) {
            colorCompleteQuest = "rgb(229 209 41)";
            giftComplete = "ƒê√£ ho√†n th√†nh";
            onclickCheckGift = `checkGiftQuest('${key}', '${time}', '${quest.giftQuest}', '${quest.typeGiftQuest}')`
        } else {
            if (time === "Week") {
                colorCompleteQuest = "rgb(134 234 156)";
            } else {
                colorCompleteQuest = "rgb(187, 234, 134)";
            }
            giftComplete = "";
            onclickCheckGift = `messageOpen('Ch∆∞a ho√†n th√†nh nhi·ªám v·ª•')`;
        }

        if (checkQuestForTime[key][1] === "Yes") {
            completeQuest = "flex";
            onclickCheckGift = ""
        } else {
            completeQuest = "none";
        }

        let percentTargetQuest = Math.min((checkQuestForTime[key][0] / quest.targetQuest) * 100, 100);

        questContent += `
<div style="display: flex; flex-direction: column; width: 96%; background: ${colorCompleteQuest}; padding: 5px; border-radius: 10px; box-shadow: rgb(64, 88, 55) 1px 1px 1px 1px; gap: 2px; position: relative; transform: scale(1); cursor: pointer;" onmouseover="this.style.transform='scale(1.02)';" onmouseout="this.style.transform='scale(1)';" onclick="${onclickCheckGift}">

  <div style="background: #000000ab;position:absolute;width: 100%;height: 100%;top: 0;left: 0;border-radius: 10px;box-shadow: rgb(0 0 0 / 72%) 1px 1px 1px 1px;display: ${completeQuest};justify-content: center;align-items: center;color: white;font-size: 15px;font-weight: bold;">ƒê√É NH·∫¨N TH∆Ø·ªûNG</div>

  <div style="display: flex; justify-content: space-between; width: 100%; font-weight: bold;">
    <span>${quest.nameQuest} <a style="color: red; padding: 5px 5px; border-radius: 10px;">${giftComplete}</a></span>
    <span>${quest.giftQuest} ${quest.typeGiftQuest}</span>
  </div>

  <div style="font-size: 12px; text-align: justify; padding: 5px 0;">
    <span>${quest.descQuest}</span>
  </div>

  <div style="display: flex;flex-direction: row;width: 100%;align-content: center;justify-content: center;align-items: center;">
    <div style="display: flex; flex-direction: column; width: 85%;">
      <div style="width: 100%;height: 8px;background: #00000059;border-radius: 5px;overflow: hidden;">
        <div style="width: ${percentTargetQuest}%;height: 100%;background: #a83030;"></div>
      </div>
    </div>

    <div style="width: 15%">
      (${checkQuestForTime[key][0]}/${quest.targetQuest})
    </div>
  </div>
</div>`;
    });
    divAddQuest.innerHTML = questContent;
}

function checkGiftQuest(key, time, gift, typeGift) {
    //key l√† qd / qw / qwe - time l√† Day / Week / Weekend
    const checkQuestForTime = time === "Day" ? questDay :
        time === "Week" ? questWeek :
            questWeekend;

    checkQuestForTime[key][1] = "Yes"

    gift = Number(gift); // Chuy·ªÉn ƒë·ªïi gift th√†nh s·ªë
    if (typeGift === "Kim c∆∞∆°ng") {
        diamondUser += gift
    } else if (typeGift === "V√© ƒë·ªïi") {
        ticketsUser += gift
    } else { //V√†ng
        goldUser += gift
    }

    messageOpen(`Ho√†n th√†nh nhi·ªám v·ª•, nh·∫≠n ƒë∆∞·ª£c ${gift} ${typeGift}`)
    resetGoldAndTicket();

    loadQuest(time);
}

function checkQuest(idQuest) {
    const questDays = allQuestData.questDay;
    const questWeeks = allQuestData.questWeek;
    const questWeekends = allQuestData.questWeekend;

    // Duy·ªát qua questDays
    Object.entries(questDays).forEach(([key, quest]) => {
        if (quest.idQuest === idQuest) {
            questDay[key][0] += 1;
        }
    });

    // Duy·ªát qua questWeeks
    Object.entries(questWeeks).forEach(([key, quest]) => {
        if (quest.idQuest === idQuest) {
            questWeek[key][0] += 1;
        }
    });

    // Duy·ªát qua questWeekends
    Object.entries(questWeekends).forEach(([key, quest]) => {
        if (quest.idQuest === idQuest) {
            questWeekend[key][0] += 1;
        }
    });

    console.log({ questDay, questWeek, questWeekend });
}


//////////////////Map hunter 5mon
///////////////////////////////
const map = document.getElementById("mapHunter");
const player = document.getElementById("playerHunter");
const autoButton = document.getElementById("autoButton");
const staminaFill = document.getElementById("staminaFill");
const staminaText = document.getElementById("staminaText");
const screenMain = document.getElementById("mainScreen");
const gameScreen = document.getElementById("gameScreen");
const viewport = document.getElementById("viewport");
const battleScreen = document.getElementById("battleScreen");

let mapWidth = 1024;
let mapHeight = 1536;
let viewWidth = 1024;
let viewHeight = 1536;
let playerX = mapWidth / 2;
let playerY = mapHeight / 2;
let targetX = playerX;
let targetY = playerY;

let canClick = true;
let random5MonByLocalMap = [];
function loadMap(isMap) {
    //random ƒë·ªÉ l·∫•y s·ªë 5Mon trong allpets
    let allPetsLv1 = allPets.filter(p => Number(p.LEVEL) === 1);

    for (let i = 1; i <= 100; i++) {
        if (allPetsLv1.length === 0) break; // tr√°nh l·ªói n·∫øu kh√¥ng c√≥ 5mon level 1
        let rdIndex = Math.floor(Math.random() * allPetsLv1.length);
        random5MonByLocalMap.push(allPetsLv1[rdIndex].ID);
    }

    // N·∫øu t√¨m th·∫•y, g√°n danh s√°ch petMeets v√†o list5MonMeet
    if (random5MonByLocalMap) {
        list5MonMeet = [...random5MonByLocalMap]; // t·∫°o b·∫£n sao m·∫£ng
        console.log("Danh s√°ch 5Mon g·∫∑p ·ªü", isMap, ":", list5MonMeet);
    } else {
        list5MonMeet = [];
        console.warn("Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm:", isMap);
    }

    settingMap();
    screenMain.style.display = "flex";
    updateStamina();
    spawnRandomPets();
}

let select5MonInSelectHunt = []; // ƒê·∫£m b·∫£o l√† m·∫£ng
function openSelectHunt() {
    showOrHiddenDiv('popupSelectHunt');
    
    let userPetSort = Object.values(allPets).sort((a, b) => a.ID.localeCompare(b.ID));
    const boardSelectHunt = document.getElementById("boardSelectHunt");
    const containerId = "selectHuntPages";

    boardSelectHunt.innerHTML = "";

    userPetSort.forEach((item, index) => {
        const skillDiv = document.createElement("div");
        skillDiv.id = `selectHunt${index + 1}`;
        skillDiv.className = "skill5MonInBag";
        skillDiv.style.cssText = `
            width: 65px;
            height: 76px;
            cursor: grab;
            border-radius: 5px;
            text-align: center;
            background: #3b3b56;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            position: relative;
            border: 2px solid rebeccapurple;
            outline: 4px solid #ff973a;
        `;
        skillDiv.onmouseover = () => skillDiv.style.transform = "scale(1.05)";
        skillDiv.onmouseout = () => skillDiv.style.transform = "scale(1)";

        let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
        skillDiv.style.backgroundImage = `url(${URLimg})`;
        skillDiv.dataset.id = item.ID;
        skillDiv.dataset.idcreate = item.IDcreate;
        skillDiv.dataset.source = containerId;

        const hasEquipped = select5MonInSelectHunt.includes(item.ID);

        if (hasEquipped) {
            const ownedOverlay = document.createElement("div");
            ownedOverlay.textContent = "ƒê√£ ch·ªçn";
            ownedOverlay.style.cssText = `
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.3);
                color: white;
                font-size: 14px;
                font-weight: bold;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 10px;
                pointer-events: none;
            `;
            skillDiv.appendChild(ownedOverlay);
        }

        boardSelectHunt.appendChild(skillDiv);
    });

    setupPopupEventsSelectHunt(userPetSort); // G·ªçi ngo√†i forEach
}

function setupPopupEventsSelectHunt(itemList) {
    const popup = document.getElementById("itemPopupExchange");
    const overlay = document.getElementById("popupOverlay");
    const buttonBuy = document.getElementById("buyItemExchange");

    // Th√™m s·ª± ki·ªán click cho t·ª´ng item ƒë·ªÉ m·ªü popup
    itemList.forEach(item => {
        const itemDiv = document.getElementById(item.ID);
        itemDiv.addEventListener("click", () => {

            let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];
            
            document.getElementById("popupImgExchange").style.backgroundImage = "url('" + URLimg + "')";
            document.getElementById("popupNameExchange").textContent = item.NAME;
            document.getElementById("priceTextItemPopupExchange").textContent = item.PRICE;

            for (let k = 1; k <= 4; k++) {
                document.getElementById(`popupImgExchangeLV${k}`).style.background = "firebrick";
            }

            document.getElementById(`popupImgExchangeLV${item.LEVEL}`).style.background = "rebeccapurple";

            for (let s = 1; s <= 4; s++) {
                const el = document.getElementById(`popupImgExchangeLV${s}`);
                if (!el) continue;
                el.onclick = () => {
                    
                    let URLimg = item.URLimg[`Lv${item.LEVEL}`] || item.URLimg['Lv1'];

                    document.getElementById("popupImgExchange").style.backgroundImage = "url('" + URLimg + "')";

                    for (let k = 1; k <= 4; k++) {
                        document.getElementById(`popupImgExchangeLV${k}`).style.background = "firebrick";
                    }
                    
                    el.style.background = "rebeccapurple";

                };
            }


            let descTextItem = "";
            // Type
            let typeInfo = "";
            item.TYPE.forEach(type => {
                typeInfo += `<a style=" background: rebeccapurple; padding: 2px 4px; border-radius: 4px; color: #ffffff;">${type}</a>`
            });

            // C·∫≠p nh·∫≠t th√¥ng tin trong popup
            descTextItem += `
            <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; width: 100%">
                <div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; gap: 3px; width: 100%">
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-hand-fist"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-shield"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-brain"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-bolt"></i></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-clover"></i>: ??</span>
                    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-heart"></i>: ??</span>
                </div>
            </div>`

            // C·∫≠p nh·∫≠t th√¥ng tin trong popup
            descTextItem += `
            <span style="display: flex;font-weight: bold;font-size: 12px;padding: 2px 0px;color: black;gap: 5px;flex-direction: row;align-content: center;
            justify-content: space-between;align-items: center; width: 100%;">
            <span>
                [M√°u: <a style="color:red; font-weight: bold;">???</a>]
            </span>
            <span style="display: flex; gap: 5px;">
                <span style="display: flex; gap: 3px; flex-direction: row; align-content: center; justify-content: center; align-items: center;">
                    ${typeInfo}
                </span>
            </span>
            </span>
            <span style="font-weight: bold;margin-top: 5px;">[ƒê√°nh th∆∞·ªùng][T·ªëc ƒë·ªô: ??? gi√¢y][Li√™n k√≠ch: ???]</span>
            <span>G√¢y <a style="color: red; font-weight: bold">??? s√°t th∆∞∆°ng </a> cho 5Mon ƒë·ªëi th·ªß (∆∞u ti√™n 5Mon ƒë·ªëi di·ªán)</span>
            `

            let descInfo = "";
            let countDescInfo = 1;
            if (item.EFFECT.length === 1) {
                item.EFFECT.forEach((effect) => {
                    if (effectsSkill[effect]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSkill[effect].descriptionSkill}\`;`);
                        let rawDescription = dynamicDescription(item);

                        // Thay th·∫ø m·ªçi s·ª± xu·∫•t hi·ªán c·ªßa -Infinity b·∫±ng d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/-Infinity/g, '?');

                        // Ti·∫øp t·ª•c thay th·∫ø c√°c s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        hiddenDescription = hiddenDescription.replace(/\d+(\.\d+)?/g, '?');

                        // Thay th·∫ø "mon" b·∫±ng "5mon" n·∫øu c√≥
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        // B√¢y gi·ªù hiddenDescription ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c thay th·∫ø
                        descInfo += hiddenDescription
                    }
                });
            } else {
                item.EFFECT.forEach((effect) => {
                    if (effectsSkill[effect]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSkill[effect].descriptionSkill}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay th·∫ø m·ªçi s·ª± xu·∫•t hi·ªán c·ªßa -Infinity b·∫±ng d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/-Infinity/g, '?');

                        // Ti·∫øp t·ª•c thay th·∫ø c√°c s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        hiddenDescription = hiddenDescription.replace(/\d+(\.\d+)?/g, '?');

                        // Thay th·∫ø "mon" b·∫±ng "5mon" n·∫øu c√≥
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        // B√¢y gi·ªù hiddenDescription ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c thay th·∫ø

                        descInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countDescInfo})</span> ${hiddenDescription}</span>`;
                        countDescInfo += 1;
                    }
                });
            }

            let internalInfo = "";
            let countInternalInfo = 1;
            if (item.INTERNAL.length === 1) {
                item.INTERNAL.forEach((internal) => {
                    if (effectsInternal[internal]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsInternal[internal].descriptionInternal}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');
                        internalInfo += hiddenDescription
                    }
                });
            } else {
                item.INTERNAL.forEach((internal) => {
                    if (effectsInternal[internal]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsInternal[internal].descriptionInternal}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        internalInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countInternalInfo})</span> ${hiddenDescription}</span>`;
                        countInternalInfo += 1;
                    }
                });
            }

            //Ch√≠ m·∫°ng info
            let critInfo = `[T·ª∑ l·ªá ch√≠ m·∫°ng: <span style="color: red; font-weight: bold">???</span>]`;

            // G√°n n·ªôi dung v√†o ph·∫ßn t·ª≠ HTML
            if (descInfo !== "") {
                descTextItem +=
                    `<span style="font-weight: bold;margin-top: 5px;">[K·ªπ nƒÉng ch·ªß ƒë·ªông][+N·ªô: ???][Li√™n k√≠ch: ???]</span>
    <span style="display: flex;flex-direction: column; gap: 3px;">${descInfo.trim()}</span>
    <span>${critInfo.trim()}</span>`;
            } else {
                descTextItem += "";
            }

            if (internalInfo !== "") {
                descTextItem +=
                    `<span style="font-weight: bold;margin-top: 5px;">[K·ªπ nƒÉng b·ªã ƒë·ªông]</span>
    <span style="display: flex;flex-direction: column; gap: 3px;">${internalInfo.trim()}</span>`
            } else {
                descTextItem += "";
            }

            //Sellup info
            let sellUpInfo = "";
            let countSellUpInfo = 1;
            if (item.SELLUP.length === 1) {
                item.SELLUP.forEach((sellup) => {
                    if (effectsSellUp[sellup]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        sellUpInfo += hiddenDescription
                    }
                });
            } else {
                item.SELLUP.forEach((sellup) => {
                    if (effectsSellUp[sellup]) {
                        // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                        const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                        let rawDescription = dynamicDescription(item);
                        // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                        let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                        hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                        sellUpInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countSellUpInfo})</span> ${hiddenDescription}</span>`;
                        countSellUpInfo += 1;
                    }
                });
            }

            if (sellUpInfo !== "") {
                descTextItem += `<span style="font-weight: bold;margin-top: 5px;">[Th·∫£ ƒëi nh·∫≠n ƒë∆∞·ª£c]</span>
                <span style="display: flex;flex-direction: column; gap: 3px;">${sellUpInfo.trim()}</span>`;
            } else {
                descTextItem += "";
            }

            document.getElementById("popupDescExchange").innerHTML = descTextItem;


            document.getElementById("popupPriceExchange").textContent = `${item.ticketsPRICE} v√© ƒë·ªïi`;
            // Ki·ªÉm tra n·∫øu pet ƒë√£ select ch∆∞a
            const hasEquipped = select5MonInSelectHunt.includes(item.ID);

            if (hasEquipped) {
                buttonBuy.innerHTML = "B·ªè l·ª±a ch·ªçn";
                buttonBuy.style.background = "gray";
                buttonBuy.style.cursor = "not-allowed";
                buttonBuy.disabled = true;
                buttonBuy.onclick = () => {
                    select5MonInSelectHunt = select5MonInSelectHunt.filter(id => id !== item.ID);
                };
            } else {
                buttonBuy.innerHTML = "L·ª±a ch·ªçn";
                buttonBuy.style.background = "firebrick";
                buttonBuy.style.cursor = "pointer";
                buttonBuy.disabled = false;
                buttonBuy.onclick = () => {
                    select5MonInSelectHunt.push(item.ID);
                };
            }

            popup.style.display = "block";
            overlay.style.display = "block";
        });
    });

    // ƒê√≥ng popup khi b·∫•m n√∫t ƒë√≥ng ho·∫∑c click v√†o n·ªÅn m·ªù
    [overlay].forEach(element => {
        element.addEventListener("click", (event) => {
            if (popup.style.display === "block") {
                popup.style.display = "none";
                overlay.style.display = "none";
            }
        });
    });
}

let scaleGameScreen = 0;
function settingMap() {
    // Ghi l·∫°i ph·∫ßn trƒÉm v·ªã tr√≠ hi·ªán t·∫°i c·ªßa player tr∆∞·ªõc khi map thay ƒë·ªïi
    const percentX = playerX / mapWidth;
    const percentY = playerY / mapHeight;

    const isMobile = /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent) || window.innerWidth < 1000;

    if (isMobile) {
        // ƒê·∫£m b·∫£o screenMain c√≥ k√≠ch th∆∞·ªõc ch√≠nh x√°c khi xoay m√†n h√¨nh
        screenMain.style.height = "85vh";
        screenMain.style.width = "99%";

        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;

        // Reset transform cho gameScreen tr∆∞·ªõc khi t√≠nh to√°n
        gameScreen.style.transform = "scale(1)";
        gameScreen.style.transformOrigin = "left";

        const battleWidth = gameScreen.offsetWidth;
        const battleHeight = gameScreen.offsetHeight;

        let scaleW = screenWidth / battleWidth;
        let scaleH = screenHeight / battleHeight;

        scaleGameScreen = Math.min(scaleW, scaleH) * 0.98; // T·ª∑ l·ªá t·ªëi ƒëa l√† 90%
        scaleGameScreen = Math.min(scaleGameScreen, 1); // ƒê·∫£m b·∫£o t·ª∑ l·ªá kh√¥ng v∆∞·ª£t qu√° 1

        // √Åp d·ª•ng t·ª∑ l·ªá cho gameScreen
        gameScreen.style.transform = `scale(${scaleGameScreen})`;
        gameScreen.style.transformOrigin = "center";

        // const marginLeft = (screenWidth - (battleWidth * scaleGameScreen)) / 2;
        // gameScreen.style.marginLeft = `${marginLeft}px`;
        // const marginTop = (screenHeight - (battleHeight * scaleGameScreen)) / 2;
        // gameScreen.style.marginTop = `${marginTop}px`;

    } else {
        // N·∫øu kh√¥ng ph·∫£i tr√™n thi·∫øt b·ªã di ƒë·ªông, s·ª≠ d·ª•ng k√≠ch th∆∞·ªõc chu·∫©n
        gameScreen.style.transform = "scale(1)";
        gameScreen.style.transformOrigin = "center";
        gameScreen.style.marginLeft = null;
    }

    // C·∫≠p nh·∫≠t l·∫°i c√°c th√¥ng s·ªë k√≠ch th∆∞·ªõc map v√† player
    map.style.width = (viewport.offsetWidth * 2.5) + 'px';
    map.style.height = (viewport.offsetWidth * 2.5) + 'px';
    viewWidth = viewport.offsetWidth;
    viewHeight = viewport.offsetHeight;
    mapWidth = viewport.offsetWidth * 2.5;
    mapHeight = viewport.offsetWidth * 2.5;

    // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc c·ªßa player v√† c√°c y·∫øu t·ªë kh√°c
    player.style.width = (mapWidth / 20) + "px";
    player.style.height = (mapWidth / 20) + "px";

    // C·∫≠p nh·∫≠t l·∫°i k√≠ch th∆∞·ªõc c·ªßa c√°c Wild Pets
    document.querySelectorAll('.wildPet').forEach(el => {
        el.style.width = (mapWidth / 36) + "px";
        el.style.height = (mapWidth / 36) + "px";
    });

    // C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ player d·ª±a tr√™n ph·∫ßn trƒÉm ƒë√£ l∆∞u
    playerX = percentX * mapWidth;
    playerY = percentY * mapHeight;
    targetX = playerX;
    targetY = playerY;

    updateView();
    settingScreenBattle();
}

let scaleBattleScreen = 0;
function settingScreenBattle() {
    const isMobile = /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent) || window.innerWidth < 1000;

    if (isMobile) {
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;

        // T√≠nh to√°n t·ª∑ l·ªá v√† cƒÉn ch·ªânh cho battleScreen ri√™ng bi·ªát
        const battleWidth2 = battleScreen.offsetWidth;
        const battleHeight2 = battleScreen.offsetHeight;

        let scaleW2 = screenWidth / battleWidth2;
        let scaleH2 = screenHeight / battleHeight2;

        scaleBattleScreen = Math.min(scaleW2, scaleH2) * 1; // T·ª∑ l·ªá t·ªëi ƒëa l√† 90%
        scaleBattleScreen = Math.min(scaleBattleScreen, 1); // ƒê·∫£m b·∫£o t·ª∑ l·ªá kh√¥ng v∆∞·ª£t qu√° 1

        // √Åp d·ª•ng t·ª∑ l·ªá v√† cƒÉn ch·ªânh l·∫°i battleScreen
        battleScreen.style.transform = `scale(${scaleBattleScreen})`;

        // // T√≠nh to√°n marginLeft v√† marginTop ƒë·ªÉ cƒÉn gi·ªØa
        // const marginLeft2 = (screenWidth - (battleWidth2 * scaleBattleScreen)) / 2;
        // battleScreen.style.marginLeft = `${marginLeft2}px`;

    } else {
        // C·∫ßn √°p d·ª•ng t∆∞∆°ng t·ª± cho battleScreen n·∫øu c·∫ßn
        battleScreen.style.transform = "scale(1)";
        battleScreen.style.marginLeft = null;
    }
}

window.onload = function () {
    const isMobile = /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent) || window.innerWidth < 1000;

    if (isMobile) {
        // ƒê·∫£m b·∫£o screenMain c√≥ k√≠ch th∆∞·ªõc ch√≠nh x√°c khi xoay m√†n h√¨nh
        screenMain.style.height = "85vh";
        screenMain.style.width = "99%";

        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;

        // Reset transform cho gameScreen tr∆∞·ªõc khi t√≠nh to√°n
        gameScreen.style.transform = "scale(1)";
        gameScreen.style.transformOrigin = "left";

        const battleWidth = gameScreen.offsetWidth;
        const battleHeight = gameScreen.offsetHeight;

        let scaleW = screenWidth / battleWidth;
        let scaleH = screenHeight / battleHeight;

        let scale = Math.min(scaleW, scaleH) * 0.98; // T·ª∑ l·ªá t·ªëi ƒëa l√† 90%
        scale = Math.min(scale, 1); // ƒê·∫£m b·∫£o t·ª∑ l·ªá kh√¥ng v∆∞·ª£t qu√° 1

        // √Åp d·ª•ng t·ª∑ l·ªá cho gameScreen
        gameScreen.style.transform = `scale(${scale})`;
        gameScreen.style.transformOrigin = "center";

        // const marginLeft = (screenWidth - (battleWidth * scale)) / 2;
        // gameScreen.style.marginLeft = `${marginLeft}px`;
        // const marginTop = (screenHeight - (battleHeight * scale)) / 2;
        // gameScreen.style.marginTop = `${marginTop}px`;

    } else {
        // N·∫øu kh√¥ng ph·∫£i tr√™n thi·∫øt b·ªã di ƒë·ªông, s·ª≠ d·ª•ng k√≠ch th∆∞·ªõc chu·∫©n
        gameScreen.style.transform = "scale(1)";
        gameScreen.style.transformOrigin = "center";
        gameScreen.style.marginLeft = null;
    }

};

// ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc khi thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh (bao g·ªìm khi xoay m√†n h√¨nh)
let resizeTimeout;
window.addEventListener("resize", function () {
    clearTimeout(resizeTimeout);

    // Thi·∫øt l·∫≠p th·ªùi gian ch·ªù 200ms tr∆∞·ªõc khi g·ªçi l·∫°i settingMap() ƒë·ªÉ tr√°nh g·ªçi qu√° nhi·ªÅu
    resizeTimeout = setTimeout(function () {
        settingMap(); // G·ªçi l·∫°i settingMap ƒë·ªÉ t√≠nh to√°n l·∫°i c√°c gi√° tr·ªã k√≠ch th∆∞·ªõc khi xoay m√†n h√¨nh
    }, 200);
});


document.getElementById("toggleMenu").addEventListener("click", () => {
    if (document.getElementById("menuButtons1").style.display === "flex") {
        document.getElementById("menuButtons1").style.display = "none";
        document.getElementById("menuButtons2").style.display = "none";
        document.getElementById("toggleMenu").textContent = "T√≠nh nƒÉng";
    } else {
        document.getElementById("menuButtons1").style.display = "flex";
        document.getElementById("menuButtons2").style.display = "flex";
        document.getElementById("toggleMenu").textContent = "Thu g·ªçn";
    }
});

let animationId = null

map.addEventListener("click", function (event) {
    if (isAutoHunter) return;

    if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
        moveStartTime = null;
    }

    const rect = map.getBoundingClientRect();

    // T√≠nh to√°n t·ªâ l·ªá scale ng∆∞·ª£c l·∫°i
    const scaleX = map.offsetWidth / rect.width;
    const scaleY = map.offsetHeight / rect.height;

    // ƒêi·ªÅu ch·ªânh t·ªça ƒë·ªô click theo scale
    targetX = (event.clientX - rect.left) * scaleX;
    targetY = (event.clientY - rect.top) * scaleY;

    targetX = Math.max(0, Math.min(targetX, mapWidth - 20));
    targetY = Math.max(0, Math.min(targetY, mapHeight - 20));

    const marker = document.createElement("div");
    marker.className = "target-x";
    marker.textContent = "x";

    Object.assign(marker.style, {
        position: "absolute",
        color: "firebrick",
        fontWeight: "bold",
        fontSize: "18px",
        transform: "translate(-50%, -50%)",
        zIndex: "2",
        pointerEvents: "none",
        left: `${targetX}px`,
        top: `${targetY}px`
    });

    map.appendChild(marker);
    setTimeout(() => {
        map.removeChild(marker);
    }, timeMove);

    requestAnimationFrame(movePlayer);
});

function closeMap() {

    autoButton.textContent = "T·ª± ƒë·ªông sƒÉn";
    autoButton.classList.remove("active");
    autoButton.style.border = "2px solid #ffffff40";
    autoButton.style.boxShadow = "1px 1px 1px 1px #961862";
    clearInterval(autoInterval); // D·ª´ng l·∫°i khi t·∫Øt auto
    autoInterval = null;
    isAutoHunter = false;

    // X√≥a s·ª± ki·ªán visibilitychange khi t·∫Øt auto
    document.removeEventListener("visibilitychange", changeTabWhenAutoMove);
}

let staminaDrain = 1; // M·ªói l·∫ßn di chuy·ªÉn tr·ª´ ƒëi bao nhi√™u staminaUser

let isAutoMoving = false;

function updateView() {
    const playerWidth = player.offsetWidth;
    const playerHeight = player.offsetHeight;

    player.style.left = (playerX - playerWidth / 2) + "px";
    player.style.top = (playerY - playerHeight / 2) + "px";

    let offsetX = Math.min(Math.max(0, playerX - viewWidth / 2), mapWidth - viewWidth);
    let offsetY = Math.min(Math.max(0, playerY - viewHeight / 2), mapHeight - viewHeight);

    map.style.left = -offsetX + "px";
    map.style.top = -offsetY + "px";
}

function updateStamina() {
    // C·∫≠p nh·∫≠t thanh staminaUser: t√≠nh ph·∫ßn trƒÉm v√† c·∫≠p nh·∫≠t
    let staminaPercentage = Math.max(0, Math.min(100, (staminaUser / 1000) * 100));
    staminaFill.style.width = `${staminaPercentage}%`; // ƒê·∫£m b·∫£o thanh staminaUser c√≥ chi·ªÅu r·ªông ƒë√∫ng

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë staminaUser
    staminaText.textContent = `${staminaUser}/1000`;

    if (staminaUser <= 0) {
        staminaUser = 0;
        if (isAutoMoving) {
            toggleAutoMovement(); // D·ª´ng auto di chuy·ªÉn khi staminaUser h·∫øt
        }
    }
}

let startX, startY;
let moveStartTime = null;
let moveDuration = 1000; // ms
let timeMove = 1050;
let meet5Mon = false //Tr·∫°ng th√°i g·∫∑p 5mon
let movedDistance = 0; //Bi·∫øn l∆∞u kho·∫£ng c√°ch ƒë√£ di chuy·ªÉn

function movePlayer(timestamp) {
    if (!moveStartTime) {
        moveStartTime = timestamp;
        startX = playerX;
        startY = playerY;
    }

    if (meet5Mon) {
        // Ng·∫Øt animation ngay n·∫øu ƒë√£ g·∫∑p
        moveStartTime = null;
        animationId = null;
        movedDistance = 0;
        return;
    }

    let luckUp = 0
    if (staminaUser <= 0) {
        luckUp = 0.2;
    } else {
        luckUp = 0.4;
    }

    if (Object.values(userPet).length >= weightBagUser) {
        messageOpen('T·ªß ƒë·ªì ƒë√£ ƒë·∫ßy');
        return;
    }

    const elapsed = timestamp - moveStartTime;
    const progress = Math.min(elapsed / moveDuration, 1);

    let newX = startX + (targetX - startX) * progress;
    let newY = startY + (targetY - startY) * progress;

    // T√≠nh kho·∫£ng c√°ch ƒë√£ ƒëi k·ªÉ t·ª´ l·∫ßn update tr∆∞·ªõc
    let dx = newX - playerX;
    let dy = newY - playerY;
    let distance = Math.sqrt(dx * dx + dy * dy);
    movedDistance += distance;

    // C·∫≠p nh·∫≠t v·ªã tr√≠ nh√¢n v·∫≠t
    playerX = newX;
    playerY = newY;

    // Flip tr√°i/ph·∫£i
    if (targetX < startX) {
        document.getElementById('playerHunter').style.transform = "scaleX(1)";
    } else if (targetX > startX) {
        document.getElementById('playerHunter').style.transform = "scaleX(-1)";
    }

    updateView();

    // N·∫øu ƒë√£ di chuy·ªÉn > 50px
    if (movedDistance >= 150) {
        movedDistance = 0;

        if (!isMeet5Mon) {
            staminaUser -= staminaDrain;
            updateStamina();
        }

        let rd5MonID = Math.random() * 100;
        if (rd5MonID <= luckyMeet5Mon) {
            meet5Mon = true;
            catch5Mon();
            if (staminaUser <= 0) {
                luckyMeet5Mon = 0;
            } else {
                luckyMeet5Mon = 5;
            }
        } else {
            luckyMeet5Mon += luckUp;
            if (staminaUser <= 0) {
                let rdSpawn5Mon = Math.random() * 100;
                if (rdSpawn5Mon <= 30) {
                    spawnRandomPets();
                }
            } else {
                spawnRandomPets();
            }
        }
    }

    // Ti·∫øp t·ª•c animation n·∫øu ch∆∞a ƒë·∫øn ƒë√≠ch
    if (progress < 1 && !meet5Mon) {
        animationId = requestAnimationFrame(movePlayer);
    } else {
        moveStartTime = null;
        animationId = null;
        playerX = targetX;
        playerY = targetY;
        movedDistance = 0;
        updateView();
    }
}

var list5MonMeet = []; //Danh s√°ch s·∫Ω g·∫∑p ·ªü b·∫£n ƒë·ªì hi·ªán t·∫°i
var is5MonMeet = {};
var percentCatch5MonMeet = 0;
var isMeet5Mon = false
function catch5Mon() {
    if (isMeet5Mon) return;
    isMeet5Mon = true;

    //D·ª±a v√†o list5MonMeet ƒë·ªÉ random
    if (list5MonMeet.length === 0) {
        console.warn("Kh√¥ng c√≥ 5Mon n√†o ƒë·ªÉ b·∫Øt!");
        return;
    }

    // Random ch·ªâ s·ªë ng·∫´u nhi√™n t·ª´ 0 ƒë·∫øn list5MonMeet.length - 1
    const randomIndex = Math.floor(Math.random() * list5MonMeet.length);

    // L·∫•y ID 5Mon t∆∞∆°ng ·ª©ng
    const random5MonID = list5MonMeet[randomIndex];

    let e5mon = allPets.find(p => p.ID === random5MonID && Number(p.LEVEL) === 1);

    const rand = Math.random() * 100;
    let rare = '';
    if (rand < 0.5) rare = 'SSR';
    else if (rand < 1) rare = 'SS';
    else if (rand < 2) rare = 'S';
    else if (rand < 5) rare = 'A';
    else if (rand < 25) rare = 'B';
    else if (rand < 45) rare = 'C';
    else rare = 'D';

    const { sttMin: pointMin, sttMax: pointMax, max: maxPointUp } = rareStats1[rare];
    const randStat = () => Math.floor(Math.random() * (maxPointUp - 10 + 1)) + 10;

    let str, def, int, agi, luk, hp, total;

    let attempts = 0;
    do {
        str = randStat();
        def = randStat();
        int = randStat();
        agi = randStat();
        luk = randStat();
        hp = randStat();
        total = str + def + int + agi + luk + hp;
        attempts++;
    } while (
        (total > pointMax || total < pointMin) &&
        attempts < 1000
    );

    // const { min: minSTT, max: maxSTT } = rareStats[rare];

    // let str, def, int, agi, luk, hp, total;

    // do {
    //     total = Math.floor(Math.random() * (maxSTT - minSTT + 1)) + minSTT;

    //     str = Math.floor(Math.random() * (total + 1));
    //     def = Math.floor(Math.random() * (total + 1));
    //     int = Math.floor(Math.random() * (total + 1));
    //     agi = Math.floor(Math.random() * (total + 1));
    //     luk = Math.floor(Math.random() * (total + 1));
    //     hp = Math.floor(Math.random() * (total + 1));

    // } while ((str + def + int + agi + luk + hp > total)
    // || str < 10 || def < 10 || int < 10 || agi < 10 || luk < 10 || hp < 30
    // || str > 250 || def > 250 || int > 250 || agi > 250 || luk > 250 || hp > 250
    // || str + def + int + agi + luk + hp > maxSTT
    //     || str + def + int + agi + luk + hp < minSTT
    // );

    //L·∫•y ID5mon m·ªõi
    let maxID = 0;
    for (let key in userPet) {
        let numberPart = parseInt(key.slice(-6)); // L·∫•y 6 s·ªë cu·ªëi
        if (numberPart > maxID) {
            maxID = numberPart;
        }
    }
    // TƒÉng l√™n 1 ƒë·ªÉ d√πng l√†m ID m·ªõi
    let newNumber = (maxID + 1).toString().padStart(6, '0'); // Gi·ªØ 6 ch·ªØ s·ªë
    let newID = `${username}ID${newNumber}`;

    //Quy ƒë·ªïi sang DAME HEAL SHIELD BURN POISON COOLDOWN
    let powerINT = scalePower5Mon(int);

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0;

    // √Åp d·ª•ng scaleSTR v√†o c√°c ph√©p t√≠nh hi·ªáu ·ª©ng
    if (e5mon.EFFECT.includes("Attacking")) {
        dame = Math.round(powerINT.dame * e5mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (e5mon.EFFECT.includes("Healing")) {
        heal = Math.round(powerINT.heal * e5mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (e5mon.EFFECT.includes("Shield")) {
        shield = Math.round(powerINT.shield * e5mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (e5mon.EFFECT.includes("Burn")) {
        burn = Math.round(powerINT.burn * e5mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }
    if (e5mon.EFFECT.includes("Poison")) {
        poison = Math.round(powerINT.poison * e5mon.POWER.SCALE);  // Gi·∫£m d·∫ßn khi STR tƒÉng
    }

    //T√≠nh cooldown
    let minC = 8;
    let maxC = 20;

    let scaleC = Math.max(5, 170 - Math.floor((agi - 200) / 9)); // gi·∫£m d·∫ßn, min l√† 5

    let valueC = ((maxC - minC) / (1 + agi / scaleC) * 1000) * (2 - e5mon.POWER.SCALE);


    //t√≠nh crit
    let maxCrit = 60;
    let scaleCrit = 1500; // t√πy ch·ªânh
    let valueCrit = maxCrit * luk / (luk + scaleCrit);
    valueCrit = Math.min(maxCrit, Math.max(0, valueCrit));
    valueCrit = Math.round(valueCrit * e5mon.POWER.SCALE);

    //t√≠nh def
    let maxDef = 90;
    let scaleDef = 475; // t√πy ch·ªânh
    let valueDef = maxDef * def / (def + scaleDef);
    valueDef = Math.min(maxDef, Math.max(0, valueDef));
    valueDef = Math.round(valueDef * e5mon.POWER.SCALE);

    //G√°n info v√†o 5mon
    is5MonMeet = {
        IDcreate: newID,
        ID: e5mon.ID,
        LEVEL: 1,
        NAME: e5mon.NAME,
        POWER: { STR: str, DEF: def, INT: int, AGI: agi, LUK: luk, HP: hp, SCALE: e5mon.POWER.SCALE },
        TYPE: e5mon.TYPE,
        SELLUP: e5mon.SELLUP,
        INTERNAL: e5mon.INTERNAL,
        EFFECT: e5mon.EFFECT,
        URLimg: e5mon.URLimg,
        DAME: [dame, 0, 0, 0, 0, 0],
        DEF: [Math.round(valueDef * 100) / 100, 0, 0, 0, 0, 0],
        HEAL: [heal, 0, 0, 0, 0, 0],
        SHIELD: [shield, 0, 0, 0, 0, 0],
        BURN: [burn, 0, 0, 0, 0, 0],
        POISON: [poison, 0, 0, 0, 0, 0],
        CRIT: [Math.round(valueCrit * 100) / 100, 0, 0, 0, 0, 0],
        COOLDOWN: [Math.ceil(valueC), e5mon.COOLDOWN[1], 0, 0, 0, 0],
        RARE: rare,
        PRICE: e5mon.PRICE
    }


    // Hi·ªÉn th·ªã popup
    let URLimg = is5MonMeet.URLimg[`Lv${is5MonMeet.LEVEL}`] || is5MonMeet.URLimg['Lv1'];
    
    document.getElementById("imgPopupSTT5MonMeet").style.backgroundImage = "url('" + URLimg + "')";
    document.getElementById("namePopupSTT5MonMeet").textContent = is5MonMeet.NAME;
    document.getElementById("allStats5MonMeet").textContent = `‚öîÔ∏è: ${is5MonMeet.POWER.STR + is5MonMeet.POWER.DEF + is5MonMeet.POWER.INT + is5MonMeet.POWER.AGI + is5MonMeet.POWER.LUK + is5MonMeet.POWER.HP}`;
    document.getElementById("rareTextPopupSTT5MonMeet").textContent = `${is5MonMeet.RARE}`;
    document.getElementById("rareTextPopupSTT5MonMeet").textContent = `${is5MonMeet.RARE}`;
    document.getElementById("priceTextPopupMeet5Mon").textContent = `${is5MonMeet.PRICE}`;
    
    for (let k = 1; k <= 4; k++) {
        document.getElementById(`popupMeet5MonLV${k}`).style.background = "firebrick";
    }

    document.getElementById(`popupMeet5MonLV${is5MonMeet.LEVEL}`).style.background = "rebeccapurple";

    for (let s = 1; s <= 4; s++) {
        const el = document.getElementById(`popupMeet5MonLV${s}`);
        if (!el) continue;
        el.onclick = () => {
            
            let URLimg = is5MonMeet.URLimg[`Lv${is5MonMeet.LEVEL}`] || is5MonMeet.URLimg['Lv1'];

            document.getElementById("imgPopupSTT5MonMeet").style.backgroundImage = "url('" + URLimg + "')";

            for (let k = 1; k <= 4; k++) {
                document.getElementById(`popupMeet5MonLV${k}`).style.background = "firebrick";
            }
            
            el.style.background = "rebeccapurple";


            const powerStatsSTR = updateStatWhenLevelUp(is5MonMeet, s, 'str');
            const powerStatsDEF = updateStatWhenLevelUp(is5MonMeet, s, 'def');
            const powerStatsINT = updateStatWhenLevelUp(is5MonMeet, s, 'int');
            const powerStatsAGI = updateStatWhenLevelUp(is5MonMeet, s, 'agi');
            const powerStatsLUK = updateStatWhenLevelUp(is5MonMeet, s, 'luk');
            const powerStatsHP = updateStatWhenLevelUp(is5MonMeet, s, 'hp');
            
            let strA, defA, intA, agiA, lukA, hpA, allStat;
            strA = Math.round(str + powerStatsSTR)
            defA = Math.round(def + powerStatsDEF)
            intA = Math.round(int + powerStatsINT)
            agiA = Math.round(agi + powerStatsAGI)
            lukA = Math.round(luk + powerStatsLUK)
            hpA = Math.round(hp + powerStatsHP)

            allStat = strA + defA + intA + agiA + lukA + hpA

            document.getElementById("allStats5MonMeet").textContent = `‚öîÔ∏è: ${allStat}`
        };
    }

    
    let descTextItem = "";
    // Type
    let typeInfo = "";
    is5MonMeet.TYPE.forEach(type => {
        typeInfo += `<a style=" background: rebeccapurple; padding: 2px 4px; border-radius: 4px; color: #ffffff;">${type}</a>`;
    });

    // C·∫≠p nh·∫≠t th√¥ng tin trong popup
    descTextItem += `
<div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; width: 100%">
<div style="display: flex; justify-content: space-between; flex-direction: row; align-items: center; gap: 3px; width: 100%">
    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-hand-fist"></i>: ??</span>
    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-shield"></i>: ??</span>
    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-brain"></i>: ??</span>
    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-bolt"></i></i>: ??</span>
    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-clover"></i>: ??</span>
    <span style="background: #cd9161; font-weight: bold; font-size: 12px; padding: 2px 4px; border-radius: 4px; color: #ffffff; text-shadow: 1px 1px 1px #4f290c;"><i class="fa-solid fa-heart"></i>: ??</span>
</div>
</div>`


    descTextItem += `
    <span style="display: flex;font-weight: bold;font-size: 12px;padding: 2px 0px;color: black;gap: 5px;flex-direction: row;align-content: center;
    justify-content: space-between;align-items: center; width: 100%;">
    <span>
        [M√°u: <a style="color:red; font-weight: bold;">???</a>]
    </span>
    <span style="display: flex; gap: 5px;">
        <span style="display: flex; gap: 3px; flex-direction: row; align-content: center; justify-content: center; align-items: center;">
            ${typeInfo}
        </span>
    </span>
    </span>
    <span style="font-weight: bold;margin-top: 5px;">[ƒê√°nh th∆∞·ªùng][T·ªëc ƒë·ªô: ??? gi√¢y][Li√™n k√≠ch: ???]</span>
    <span>G√¢y <a style="color: red; font-weight: bold">??? s√°t th∆∞∆°ng </a> cho 5Mon ƒë·ªëi th·ªß (∆∞u ti√™n 5Mon ƒë·ªëi di·ªán)</span>
    `

    let descInfo = "";
    let countDescInfo = 1;
    if (is5MonMeet.EFFECT.length === 1) {
        is5MonMeet.EFFECT.forEach((effect) => {
            if (effectsSkill[effect]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsSkill[effect].descriptionSkill}\`;`);

                let rawDescription = dynamicDescription(is5MonMeet);

                // Thay th·∫ø m·ªçi s·ª± xu·∫•t hi·ªán c·ªßa -Infinity b·∫±ng d·∫•u ?
                let hiddenDescription = rawDescription.replace(/-Infinity/g, '?');

                // Ti·∫øp t·ª•c thay th·∫ø c√°c s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                hiddenDescription = hiddenDescription.replace(/\d+(\.\d+)?/g, '?');

                // Thay th·∫ø "mon" b·∫±ng "5mon" n·∫øu c√≥
                hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                // B√¢y gi·ªù hiddenDescription ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c thay th·∫ø

                descInfo += hiddenDescription
            }
        });
    } else {
        is5MonMeet.EFFECT.forEach((effect) => {
            if (effectsSkill[effect]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsSkill[effect].descriptionSkill}\`;`);
                let rawDescription = dynamicDescription(is5MonMeet);

                // Thay th·∫ø m·ªçi s·ª± xu·∫•t hi·ªán c·ªßa -Infinity b·∫±ng d·∫•u ?
                let hiddenDescription = rawDescription.replace(/-Infinity/g, '?');

                // Ti·∫øp t·ª•c thay th·∫ø c√°c s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                hiddenDescription = hiddenDescription.replace(/\d+(\.\d+)?/g, '?');

                // Thay th·∫ø "mon" b·∫±ng "5mon" n·∫øu c√≥
                hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                // B√¢y gi·ªù hiddenDescription ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c thay th·∫ø

                descInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countDescInfo})</span> ${hiddenDescription}</span>`;
                countDescInfo += 1;
            }
        });
    }

    let internalInfo = "";
    let countInternalInfo = 1;
    if (is5MonMeet.INTERNAL.length === 1) {
        is5MonMeet.INTERNAL.forEach((internal) => {
            if (effectsInternal[internal]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsInternal[internal].descriptionInternal}\`;`);

                let rawDescription = dynamicDescription(is5MonMeet);

                // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                internalInfo += hiddenDescription
            }
        });
    } else {
        is5MonMeet.INTERNAL.forEach((internal) => {
            if (effectsInternal[internal]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsInternal[internal].descriptionInternal}\`;`);
                let rawDescription = dynamicDescription(is5MonMeet);

                // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                internalInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countInternalInfo})</span> ${hiddenDescription}</span>`;
                countInternalInfo += 1;
            }
        });
    }

    //Ch√≠ m·∫°ng info
    let critPercent = is5MonMeet.CRIT.reduce((a, b) => a + b, 0)
    let critInfo = ""
    if (critPercent > 0) {
        critInfo = `[T·ª∑ l·ªá ch√≠ m·∫°ng: <span style="color: red; font-weight: bold"> ??? </span>]`;
    }
    // G√°n n·ªôi dung v√†o ph·∫ßn t·ª≠ HTML
    if (descInfo !== "") {
        descTextItem +=
            `<span style="font-weight: bold; margin-top: 5px;">[K·ªπ nƒÉng ch·ªß ƒë·ªông][+N·ªô: ???][Li√™n k√≠ch: ???]</span>
<span style="display: flex;flex-direction: column; gap: 3px;">${descInfo.trim()}</span>
<span>${critInfo.trim()}</span>`;
    } else {
        descTextItem += "";
    }

    if (internalInfo !== "") {
        descTextItem +=
            `<span style="font-weight: bold; margin-top: 5px;">[K·ªπ nƒÉng b·ªã ƒë·ªông]</span>
<span style="display: flex;flex-direction: column; gap: 3px;">${internalInfo.trim()}</span>`
    } else {
        descTextItem += "";
    }

    //Sellup info
    let sellUpInfo = "";
    let countSellUpInfo = 1;
    if (is5MonMeet.SELLUP.length === 1) {
        is5MonMeet.SELLUP.forEach((sellup) => {
            if (effectsSellUp[sellup]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                let rawDescription = dynamicDescription(is5MonMeet);

                // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                sellUpInfo += hiddenDescription
            }
        });
    } else {
        is5MonMeet.SELLUP.forEach((sellup) => {
            if (effectsSellUp[sellup]) {
                // T·∫°o h√†m t·ª´ chu·ªói ƒë·ªông v√† th·ª±c thi v·ªõi `skill` l√†m tham s·ªë
                const dynamicDescription = new Function("skill", `return \`${effectsSellUp[sellup].descriptionSellUp}\`;`);
                let rawDescription = dynamicDescription(is5MonMeet);

                // Thay m·ªçi s·ªë (bao g·ªìm c·∫£ s·ªë th·∫≠p ph√¢n) th√†nh d·∫•u ?
                let hiddenDescription = rawDescription.replace(/\d+(\.\d+)?/g, '?');
                hiddenDescription = hiddenDescription.replace(/\?mon/gi, '5mon');

                sellUpInfo += `<span style="display: flex;flex-direction: row; gap: 3px;"><span style="font-weight: bold">(${countSellUpInfo})</span> ${hiddenDescription}</span>`;
                countSellUpInfo += 1;
            }
        });
    }

    if (sellUpInfo !== "") {
        descTextItem += `<span style="font-weight: bold; margin-top: 5px;">[Th·∫£ ƒëi nh·∫≠n ƒë∆∞·ª£c]</span>
<span style="display: flex;flex-direction: column; gap: 3px;">${sellUpInfo.trim()}</span>`;
    } else {
        descTextItem += "";
    }

    const ranges = [
        { min: 1, max: 5, weight: 1 },    // nhi·ªÅu nh·∫•t
        { min: 5, max: 10, weight: 1 },
        { min: 10, max: 15, weight: 1 },
        { min: 15, max: 20, weight: 2 },
        { min: 20, max: 25, weight: 8 },
        { min: 25, max: 30, weight: 7 },
        { min: 30, max: 35, weight: 6 },
        { min: 35, max: 40, weight: 5 },
        { min: 40, max: 45, weight: 20 },
        { min: 45, max: 50, weight: 15 },
        { min: 50, max: 55, weight: 12 },
        { min: 55, max: 60, weight: 10 },
        { min: 60, max: 65, weight: 4 },
        { min: 65, max: 70, weight: 3 },
        { min: 70, max: 75, weight: 2 },
        { min: 75, max: 80, weight: 1 },
        { min: 80, max: 85, weight: 1 },
        { min: 85, max: 90, weight: 0.5 },
        { min: 90, max: 95, weight: 0.5 },
        { min: 95, max: 100, weight: 0.5 }
    ];


    const totalWeight = ranges.reduce((sum, r) => sum + r.weight, 0);
    const random = Math.random() * totalWeight;

    let cumulative = 0;
    for (const range of ranges) {
        cumulative += range.weight;
        if (random < cumulative) {
            // Tr·∫£ ra m·ªôt s·ªë ng·∫´u nhi√™n trong kho·∫£ng ƒë√≥
            percentCatch5MonMeet = Math.random() * (range.max - range.min) + range.min;
            break;
        }
    }

    let roundedPercent = percentCatch5MonMeet.toFixed(1); // l√†m tr√≤n 1 ch·ªØ s·ªë sau d·∫•u ph·∫©y

    document.getElementById("percentCatch5MonMeet").textContent = `T·ª∑ l·ªá b·∫Øt: ${roundedPercent}%`;

    document.getElementById("descPopupSTT5MonMeet").innerHTML = descTextItem;
    document.getElementById("popupMeet5Mon").style.display = "block";
    document.getElementById("popupOverlay").style.display = "block";

}

function catch5MonMeet() {

    if (!userPet) {
        userPet = {}; // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi userPet l√† m·ªôt ƒë·ªëi t∆∞·ª£ng tr·ªëng
    }

    let doneCatch = Math.random() * 100;
    console.log("doneCatch", doneCatch, "percentCatch5MonMeet", percentCatch5MonMeet)
    if (doneCatch > percentCatch5MonMeet) {
        messageOpen('Ti·∫øc qu√° 5Mon ƒë√£ ch·∫°y m·∫•t r·ªìi!!!')
    } else {
        userPet[is5MonMeet.IDcreate] = is5MonMeet;
        console.log("5mon catch ƒë∆∞·ª£c", userPet[is5MonMeet.IDcreate])
        messageOpen(`B·∫Øt th√†nh c√¥ng pet ${is5MonMeet.NAME}`);
    }

    resetGoldAndTicket();
    meet5Mon = false;

    //reset c√°c bi·∫øn b·∫Øt 5mon v·ªÅ r·ªóng
    is5MonMeet = {};
    percentCatch5MonMeet = 0;
    isMeet5Mon = false;

    document.getElementById("popupMeet5Mon").style.display = "none";
    document.getElementById("popupOverlay").style.display = "none";
}

function closePopupMeet5Mon() {
    if (isAutoHunter) {
        meet5Mon = false
        document.getElementById("popupMeet5Mon").style.display = "none";
        document.getElementById("popupOverlay").style.display = "none";
        messageOpen(`ƒê√£ th·∫£ ${is5MonMeet.NAME}`);
    } else {
        meet5Mon = false
        document.getElementById("popupMeet5Mon").style.display = "none";
        document.getElementById("popupOverlay").style.display = "none";
        messageOpen(`ƒê√£ th·∫£ ${is5MonMeet.NAME}`);
    }
    resetGoldAndTicket();

    //reset c√°c bi·∫øn b·∫Øt 5mon v·ªÅ r·ªóng
    is5MonMeet = {};
    percentCatch5MonMeet = 0;
    isMeet5Mon = false;
}


let isAutoHunter = false; //Tr·∫°ng th√°i ƒëang auto
let timeMoveAuto = 2000;
let autoInterval;

//T·ª± ƒë·ªông sƒÉn 5Mon
function toggleAutoMovement() {
    if (staminaUser <= 0) {
        messageOpen('H·∫øt th·ªÉ l·ª±c')
        autoButton.textContent = "T·ª± ƒë·ªông sƒÉn";
        autoButton.classList.remove("active");
        autoButton.style.border = "2px solid #ffffff40";
        autoButton.style.boxShadow = "1px 1px 1px 1px #961862";

        clearInterval(autoInterval); // D·ª´ng l·∫°i khi t·∫Øt auto
        autoInterval = null;
        isAutoHunter = false;

        // X√≥a s·ª± ki·ªán visibilitychange khi t·∫Øt auto
        document.removeEventListener("visibilitychange", changeTabWhenAutoMove);
        return;
    }


    isAutoMoving = !isAutoMoving;
    isAutoHunter = true;
    meet5Mon = false;

    if (isAutoMoving) {
        autoButton.textContent = "Ng·ª´ng l·∫°i";
        autoButton.classList.add("active");
        autoButton.style.border = "2px solid #ed776f";
        autoButton.style.boxShadow = "1px 1px 1px 1px #7b231d";

        // L·∫Øng nghe s·ª± ki·ªán chuy·ªÉn tab
        document.addEventListener("visibilitychange", changeTabWhenAutoMove);

        autoInterval = setInterval(() => {
            // Gi·ªõi h·∫°n m·ª•c ti√™u trong ph·∫°m vi viewport
            let offsetX = Math.min(Math.max(0, playerX - viewWidth / 2), mapWidth - viewWidth);
            let offsetY = Math.min(Math.max(0, playerY - viewHeight / 2), mapHeight - viewHeight);

            let minX = offsetX;
            let maxX = offsetX + viewWidth - 20;
            let minY = offsetY;
            let maxY = offsetY + viewHeight - 20;

            targetX = Math.floor(Math.random() * (maxX - minX) + minX);
            targetY = Math.floor(Math.random() * (maxY - minY) + minY);

            // N·∫øu g·∫∑p 5Mon d·ª´ng l·∫°i
            if (!canClick || meet5Mon || document.getElementById("popupBag").classList.contains("showDiv")) return; // N·∫øu kh√¥ng th·ªÉ click, kh√¥ng di chuy·ªÉn

            canClick = false; // ƒê·∫∑t canClick = false khi b·∫Øt ƒë·∫ßu di chuy·ªÉn
            requestAnimationFrame(movePlayer); // Di chuy·ªÉn ng∆∞·ªùi ch∆°i

            // Sau khi di chuy·ªÉn, cho ph√©p click l·∫°i
            setTimeout(() => {
                canClick = true;
            }, timeMove);
        }, timeMoveAuto); // M·ªói .. gi√¢y ch·ªçn v·ªã tr√≠ m·ªõi
    } else {
        autoButton.textContent = "T·ª± ƒë·ªông sƒÉn";
        autoButton.classList.remove("active");
        autoButton.style.border = "2px solid #ffffff40";
        autoButton.style.boxShadow = "1px 1px 1px 1px #961862";

        clearInterval(autoInterval); // D·ª´ng l·∫°i khi t·∫Øt auto
        autoInterval = null;
        isAutoHunter = false;

        // X√≥a s·ª± ki·ªán visibilitychange khi t·∫Øt auto
        document.removeEventListener("visibilitychange", changeTabWhenAutoMove);
    }
}

// H√†m x·ª≠ l√Ω khi chuy·ªÉn tab
function changeTabWhenAutoMove() {
    if (document.hidden) {
        clearInterval(autoInterval); // D·ª´ng l·∫°i khi tab kh√¥ng c√≤n hi·ªÉn th·ªã
        autoInterval = null;
        stopStaminaRegen();
        isAutoMoving = false;
        isAutoHunter = false;
        autoButton.textContent = "T·ª± ƒë·ªông sƒÉn"; // ƒê·ªïi l·∫°i tr·∫°ng th√°i c·ªßa n√∫t
        autoButton.classList.remove("active");
        autoButton.style.border = "2px solid #ffffff40";
        autoButton.style.boxShadow = "1px 1px 1px 1px #961862";
    }
}

function showUpStamina() {

    if (staminaUser >= 1000) {
        messageOpen("B·∫°n ƒëang r·∫•t xung m√£n r·ªìi!")
        return;
    }

    // X√≥a n·∫øu ƒë√£ t·ªìn t·∫°i popup c≈©
    const oldPopup = document.getElementById('popupOverlayStamina');
    if (oldPopup) {
        oldPopup.remove();
        oldPopup = null;
    }

    // T·∫°o l·ªõp n·ªÅn m·ªù
    const overlay = document.createElement('div');
    overlay.id = 'popupOverlayStamina';
    overlay.style.position = 'fixed';
    overlay.style.top = 0;
    overlay.style.left = 0;
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.4)';
    overlay.style.display = 'flex';
    overlay.style.alignItems = 'center';
    overlay.style.justifyContent = 'center';
    overlay.style.zIndex = 9999;
    overlay.style.animation = 'fadeIn 0.3s ease';

    // T·∫°o h·ªôp popup
    const popup = document.createElement('div');
    popup.style.backgroundColor = '#fff';
    popup.style.padding = '25px 30px';
    popup.style.borderRadius = '12px';
    popup.style.boxShadow = '0 8px 20px rgba(0,0,0,0.2)';
    popup.style.textAlign = 'center';
    popup.style.maxWidth = '300px';
    popup.style.fontFamily = 'sans-serif';
    popup.style.animation = 'slideUp 0.3s ease';

    popup.innerHTML = `
        <p style="font-size: 16px; margin-bottom: 20px;">D√πng <strong>10 kim c∆∞∆°ng</strong> ƒë·ªÉ nh·∫≠n <strong>10 th·ªÉ l·ª±c</strong>?</p>
        <div style="display: flex; justify-content: center; gap: 10px;">
            <button id="confirmBtn" style="
                padding: 8px 16px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: bold;
                transition: background-color 0.2s;
            ">ƒê·ªìng √Ω</button>
            <button id="cancelBtn" style="
                padding: 8px 16px;
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: bold;
                transition: background-color 0.2s;
            ">H·ªßy</button>
        </div>
    `;

    // G·∫Øn popup v√†o overlay
    overlay.appendChild(popup);
    document.body.appendChild(overlay);

    // Hi·ªáu ·ª©ng CSS
    const style = document.createElement('style');
    style.innerHTML = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        #confirmBtn:hover {
            background-color: #45a049;
        }
        #cancelBtn:hover {
            background-color: #e53935;
        }
    `;
    document.head.appendChild(style);

    // X·ª≠ l√Ω s·ª± ki·ªán n√∫t
    document.getElementById('confirmBtn').onclick = function () {
        upStamina();
        document.body.removeChild(overlay);
    };
    document.getElementById('cancelBtn').onclick = function () {
        document.body.removeChild(overlay);
    };
}



function upStamina() {
    if (diamondUser < 10) {
        messageOpen('Kh√¥ng ƒë·ªß kim c∆∞∆°ng')
        return;
    } else {
        staminaUser += 100
        if (staminaUser > 1000) staminaUser = 1000;

        updateStamina();
        resetGoldAndTicket();
    }
}

// ---- t·∫°o ra 5Mon random xu·∫•t hi·ªán ---- //
let count5MonSpawn = 0;
function spawnRandomPets() {
    const mapWidth = map.offsetWidth;
    const mapHeight = map.offsetHeight;
    let spawn5Mon = Math.random() * 100
    let percentSeen5Mon = 0
    if (staminaUser <= 0) {
        percentSeen5Mon = 5
    } else {
        percentSeen5Mon = 20
    }
    if (spawn5Mon < percentSeen5Mon && count5MonSpawn < 20) {
        count5MonSpawn += 1
        const pet = document.createElement("img");
        pet.src = "https://res.cloudinary.com/dxgawkr4g/image/upload/v1744969937/mt66cdg95hhpgv5uammj.gif";
        pet.className = "wildPet";
        const x = Math.random() * (mapWidth - 32);
        const y = Math.random() * (mapHeight - 32);
        pet.style.left = x + "px";
        pet.style.top = y + "px";
        pet.addEventListener("click", () => click5MonMeet(pet));
        map.appendChild(pet);
        movePetSmoothly(pet, mapWidth, mapHeight);
    }
}

function click5MonMeet(pet) {
    pet.classList.add("pet-catching");
    count5MonSpawn -= 1
    meet5Mon = true;
    catch5Mon();
    setTimeout(() => {
        pet.remove();
        pet = null;
    }, 800);
}

function movePetSmoothly(pet, mapWidth, mapHeight) {
    function move() {
        const currentX = parseFloat(pet.style.left);
        const currentY = parseFloat(pet.style.top);

        const maxDistance = 200;
        let offsetX = (Math.random() - 0.5) * 2 * maxDistance;
        let offsetY = (Math.random() - 0.5) * 2 * maxDistance;

        let targetX = currentX + offsetX;
        let targetY = currentY + offsetY;

        targetX = Math.max(0, Math.min(mapWidth - 32, targetX));
        targetY = Math.max(0, Math.min(mapHeight - 32, targetY));

        // üëâ Flip h√¨nh ·∫£nh n·∫øu di chuy·ªÉn sang tr√°i ho·∫∑c ph·∫£i
        if (targetX < currentX) {
            pet.style.transform = "scaleX(1)";
        } else {
            pet.style.transform = "scaleX(-1)";
        }

        pet.style.left = targetX + "px";
        pet.style.top = targetY + "px";

        setTimeout(move, 2000 + Math.random() * 2000);
    }

    move(); // B·∫Øt ƒë·∫ßu l·∫ßn ƒë·∫ßu
}

function scalePower5Mon(INT) {
    const baseScale = 1;
    const scaleINT = baseScale * Math.log10(INT);
    let valuePower = (1 + INT / scaleINT)/Math.log10(INT*2)

    let dame = 0, heal = 0, shield = 0, burn = 0, poison = 0

    dame = Math.round(valuePower * 2)
    heal = Math.round(valuePower * 2)
    shield = Math.round(valuePower * 2)
    burn = Math.round(valuePower * 0.21)
    poison = Math.round(valuePower * 0.18)

    return { dame, heal, shield, burn, poison }
}

function hideOrShowInfoGoldDiamond() {
    if (document.getElementById('infoGoldDiamond').style.display === "none") {
        document.getElementById('infoGoldDiamond').style.display = "flex";
        document.getElementById('hideOrShowInfoGoldDiamond').style.transform = 'scaleY(1)';
    } else {
        document.getElementById('infoGoldDiamond').style.display = "none";
        document.getElementById('hideOrShowInfoGoldDiamond').style.transform = 'scaleY(-1)';
    }
}

//Audio

//Audio background
const musicBGList = [
    "https://res.cloudinary.com/dxgawkr4g/video/upload/v1745397379/c4nt9wtsye3xfxtcy1li.mp3",
    "https://res.cloudinary.com/dxgawkr4g/video/upload/v1745397475/tzum1m4pokm4wzysapnj.mp3",
    "https://res.cloudinary.com/dxgawkr4g/video/upload/v1745397509/ojwtdwrrntlqrohhky4z.mp3",
    "https://res.cloudinary.com/dxgawkr4g/video/upload/v1745398510/dhe1luws4cwzgoxnj2oi.mp3"
];

const audio = document.getElementById("bgMusic");
let lastPlayedIndex = -1;
const volumeTarget = 0.2;
const fadeDuration = 2000;
let musicBGIsPlay = false;

function getRandomIndexExcept(exceptIndex) {
    let newIndex;
    do {
        newIndex = Math.floor(Math.random() * musicBGList.length);
    } while (musicBGList.length > 1 && newIndex === exceptIndex);
    return newIndex;
}

function fadeVolume(target, duration, callback) {
    const step = 50;
    const diff = (target - audio.volume) / (duration / step);
    let interval = setInterval(() => {
        audio.volume = Math.max(0, Math.min(1, audio.volume + diff));
        if ((diff > 0 && audio.volume >= target) || (diff < 0 && audio.volume <= target)) {
            clearInterval(interval);
            interval = null;
            if (callback) callback();
        }
    }, step);
}

function playRandomMusic() {
    if (musicBGIsPlay) return; // Tr√°nh g·ªçi tr√πng

    const index = getRandomIndexExcept(lastPlayedIndex);
    lastPlayedIndex = index;
    audio.src = musicBGList[index];
    audio.volume = 0.0;

    audio.play().then(() => {
        fadeVolume(volumeTarget, fadeDuration);
        musicBGIsPlay = true;
    }).catch((err) => {
        console.log("C·∫ßn t∆∞∆°ng t√°c ng∆∞·ªùi d√πng:", err);
    });
}

// Khi nh·∫°c k·∫øt th√∫c
audio.addEventListener("ended", () => {
    fadeVolume(0.0, fadeDuration, () => {
        musicBGIsPlay = false;
        playRandomMusic();
    });
});

// L·∫Øng nghe click ƒë·ªÉ ki·ªÉm tra v√† ph√°t nh·∫°c n·∫øu ch∆∞a ch·∫°y
document.addEventListener("click", () => {
    if (!musicBGIsPlay) {
        playRandomMusic();
    }
});

window.addEventListener("load", playRandomMusic);

// C·∫≠p nh·∫≠t volume khi k√©o slider
const volumeControlBG = document.getElementById("volumeControlBG");
const toggleMusicBtnBG = document.getElementById("toggleMusicBG");

volumeControlBG.addEventListener("input", (e) => {
    const newVolume = parseFloat(e.target.value);
    audio.volume = newVolume;
    if (newVolume === 0) {
        toggleMusicBtnBG.textContent = "üîá";
    } else {
        toggleMusicBtnBG.textContent = "üîä";
    }
});

// T·∫Øt/b·∫≠t nh·∫°c khi b·∫•m n√∫t
toggleMusicBtnBG.addEventListener("click", () => {
    if (audio.muted) {
        audio.muted = false;
        toggleMusicBtnBG.textContent = "üîä";
    } else {
        audio.muted = true;
        toggleMusicBtnBG.textContent = "üîá";
    }
});


//Audio click
const clickAudio = document.getElementById("clickSound");
const volumeControlClick = document.getElementById("volumeControlClick");
const toggleMusicClick = document.getElementById("toggleMusicClick");

clickAudio.volume = parseFloat(volumeControlClick.value);
let clickSoundMuted = false;

// Ph√°t √¢m thanh khi click button
document.addEventListener("click", function (e) {
    const isButton = e.target.tagName.toLowerCase() === "button" || e.target.closest("button");
    if (isButton && !clickSoundMuted) {
        clickAudio.currentTime = 0;
        clickAudio.play().catch(() => { });
    }
});

// ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng click
volumeControlClick.addEventListener("input", () => {
    const volume = parseFloat(volumeControlClick.value);
    clickAudio.volume = volume;
    clickSoundMuted = volume === 0;
    toggleMusicClick.textContent = volume === 0 ? "üîá" : "üîä";
});

toggleMusicClick.addEventListener("click", () => {
    const audio = document.getElementById("clickSound");
    clickSoundMuted = !clickSoundMuted;
    if (audio.muted) {
        audio.muted = false;
        toggleMusicClick.textContent = "üîä";
    } else {
        audio.muted = true;
        toggleMusicClick.textContent = "üîá";
    }
});

//Ch·∫∑n ng∆∞·ªùi d√πng b√¥i ƒëen, copy, f12
// // Ch·∫∑n chu·ªôt ph·∫£i
// document.addEventListener("contextmenu", e => e.preventDefault());

// Ch·∫∑n copy
document.addEventListener("copy", e => e.preventDefault());

// Ch·∫∑n b√¥i ƒëen
document.addEventListener("selectstart", e => e.preventDefault());

// Ch·∫∑n ph√≠m F12, Ctrl+Shift+I/J, Ctrl+U
document.addEventListener("keydown", function (e) {
    if (
        e.key === "F12" ||
        (e.ctrlKey && e.shiftKey && (e.key === "I" || e.key === "J")) ||
        (e.ctrlKey && e.key === "U") ||
        (e.ctrlKey && e.key === "S")
    ) {
        e.preventDefault();
    }
});

//H√†m t√≠nh scale m·ªói khi n√¢ng c·∫•p level
function getScaleLevelUp(power) {
    return 1 + ((power - 10) / (100 - 10));  // n·ªôi suy t·ª´ 1 ‚Üí 2
}

// //H√†m load slot lock
// function loadSlotLock() {
//     let slotLock = typeGameConquest.slotLock || {
//         skill1B: false,
//         skill2B: false,
//         skill3B: true,
//         skill4B: true,
//         skill5B: true,
//         skill6B: true,
//         skill7B: true,
//         skill8B: true,
//         skill9B: true
//     };

//     Object.keys(slotLock).forEach(key => {
//         const slot = document.getElementById(`${key}`);
//         if (slotLock[key] === true) {
//             const lock = document.createElement("div");
//             lock.id = `${key}Lock`; // Th√™m ID ƒë·ªÉ truy c·∫≠p d·ªÖ d√†ng
//             lock.className = "slotLock"
//             lock.style.fontSize = "30px";
//             lock.style.color = "rosybrown"
//             lock.style.zIndex = "1";
//             lock.style.textAlign = "center";
//             lock.innerHTML = `<i class="fa-solid fa-lock"></i>`;
//             slot.appendChild(lock); // Th√™m v√†o DOM
//         } else {
//             const existingLock = slot.querySelector(".slotLock");
//             if (existingLock) {
//                 slot.removeChild(existingLock);
//             }
//         }
//     });
// }



// G√°n c√°c h√†m v√†o window
window.switchTabWelcomPage = switchTabWelcomPage;
window.register = register;
window.openRankBoard = openRankBoard;
window.loadQuest = loadQuest;
window.showOrHiddenDiv = showOrHiddenDiv;
window.changePage = changePage;
window.gacha5Mon = gacha5Mon;
window.checkButtonTypeGame = checkButtonTypeGame;
window.checkButtonModeGame = checkButtonModeGame;
window.checkButtonDifficultyGame = checkButtonDifficultyGame;
window.startGame = startGame;
window.openQuestBoard = openQuestBoard;
window.openBag = openBag;
window.openMenuStartGame = openMenuStartGame;
window.openPaymentGateway = openPaymentGateway;
window.reRollShop = reRollShop;
window.nextStepGame1 = nextStepGame1;
window.openPopupSetting = openPopupSetting;
window.closePopupContinueGame = closePopupContinueGame;
window.closeMessagePopup = closeMessagePopup;
window.closePaymentGateway = closePaymentGateway;
window.closePopupSetting = closePopupSetting;
window.outGameRank = outGameRank;
window.skipGuide = skipGuide;
window.messageOpen = messageOpen;
window.nextStepGuide = nextStepGuide;
window.selectCharacterForUser = selectCharacterForUser;
window.openPopupSelectCharacter = openPopupSelectCharacter;
window.prevShowCharacterSelect = prevShowCharacterSelect;
window.nextShowCharacterSelect = nextShowCharacterSelect;
window.openFullscreen = openFullscreen;
window.toggleAutoMovement = toggleAutoMovement;
window.showUpStamina = showUpStamina;
window.closePopupMeet5Mon = closePopupMeet5Mon;
window.catch5MonMeet = catch5MonMeet;
window.openBag = openBag;
window.openSelectHunt = openSelectHunt;
window.loadItemBagLeft = loadItemBagLeft;
window.chosenSortBagLeft = chosenSortBagLeft;
window.showUpWeightBag = showUpWeightBag;
window.hideOrShowInfoGoldDiamond = hideOrShowInfoGoldDiamond;
window.openPopupSettingMain = openPopupSettingMain;
window.selectButtonSettingMain = selectButtonSettingMain;
window.switchTabShop = switchTabShop;
window.checkGiftQuest = checkGiftQuest;
window.lock5MonShop = lock5MonShop;
